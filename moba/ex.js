function LIST_TO_JSTR(list) {
  try {
    let result = '';
    let current = list;
    while (current.$ === 'Cons') {
      result += String.fromCodePoint(Number(current.head));
      current = current.tail;
    }
    if (current.$ === 'Nil') {
      return result;
    }
  } catch (e) {}
  return list;
}

function JSTR_TO_LIST(str) {
  let list = {$: 'Nil'};
  for (let i = str.length - 1; i >= 0; i--) {
    list = {$: 'Cons', head: BigInt(str.charCodeAt(i)), tail: list};
  }
  return list;
}

let MEMORY = new Map();
function SWAP(key, val) {
  var old = MEMORY.get(key) || 0n;
  MEMORY.set(key, val);
  return old;
}


function $BinTree$(_$0/*:Type*/) {var $x0 = /*{$:'Node', val: _$0, lft: BinTree<_$0>, rgt: BinTree<_$0>} | {$:'Leaf'}*/null;return $x0; }
const $BinTree = _$0 => $BinTree$(_$0)

function $Maybe$(_$0/*:Type*/) {var $x0 = /*{$:'None'} | {$:'Some', value: _$0}*/null;return $x0; }
const $Maybe = _$0 => $Maybe$(_$0)

function $BinMap$(_$0/*:Type*/) {var $x2 = _$0;var $x1 = $Maybe$($x2);var $x0 = $BinTree$($x1);return $x0; }
const $BinMap = _$0 => $BinMap$(_$0)

function $BinMap$empty$(_$0/*:Type*/) {var $x0 = ({$: "Leaf"});return $x0; }
const $BinMap$empty = _$0 => $BinMap$empty$(_$0)

const $Bits$ = (() => {var $x0 = /*{$:'O', tail: Bits} | {$:'I', tail: Bits} | {$:'E'}*/null;return $x0; })()
const $Bits = $Bits$

function $BinMap$get$(_$0/*:Type*/,_$1/*:BinMap<null>*/,_$2/*:Bits*/) {while(1){var $x1 = _$1;switch ($x1.$) { case "Leaf": { var $x0 = ({$: "None"}); break; } case "Node": { var $x2 = _$2;switch ($x2.$) { case "E": { var $x0 = $x1.val; break; } case "I": { var $x3 = _$0;var $x4 = $x1.rgt;var $x5 = $x2.tail;_$0 = $x3;_$1 = $x4;_$2 = $x5;/*TCO*/continue; break; } case "O": { var $x6 = _$0;var $x7 = $x1.lft;var $x8 = $x2.tail;_$0 = $x6;_$1 = $x7;_$2 = $x8;/*TCO*/continue; break; } } break; } }return $x0; }}
const $BinMap$get = _$0 => _$1 => _$2 => $BinMap$get$(_$0,_$1,_$2)

function $BinMap$new$(_$0/*:Type*/) {var $x1 = _$0;var $x0 = $BinMap$empty$($x1);return $x0; }
const $BinMap$new = _$0 => $BinMap$new$(_$0)

function $BinMap$set$(_$0/*:Type*/,_$1/*:BinMap<null>*/,_$2/*:Bits*/,_$3/*:null*/) {var $x1 = _$1;switch ($x1.$) { case "Leaf": { var $x2 = _$2;switch ($x2.$) { case "E": { var $x0 = ({$: "Node"});var $x3 = ({$: "Some"});var $x4 = _$3;$x3.value = $x4;$x0.val = $x3;var $x5 = ({$: "Leaf"});$x0.lft = $x5;var $x6 = ({$: "Leaf"});$x0.rgt = $x6; break; } case "I": { var $x0 = ({$: "Node"});var $x7 = ({$: "None"});$x0.val = $x7;var $x8 = ({$: "Leaf"});$x0.lft = $x8;var $x10 = _$0;var $x11 = ({$: "Leaf"});var $x12 = $x2.tail;var $x13 = _$3;var $x9 = $BinMap$set$($x10, $x11, $x12, $x13);$x0.rgt = $x9; break; } case "O": { var $x0 = ({$: "Node"});var $x14 = ({$: "None"});$x0.val = $x14;var $x16 = _$0;var $x17 = ({$: "Leaf"});var $x18 = $x2.tail;var $x19 = _$3;var $x15 = $BinMap$set$($x16, $x17, $x18, $x19);$x0.lft = $x15;var $x20 = ({$: "Leaf"});$x0.rgt = $x20; break; } } break; } case "Node": { var $x21 = _$2;switch ($x21.$) { case "E": { var $x0 = ({$: "Node"});var $x22 = ({$: "Some"});var $x23 = _$3;$x22.value = $x23;$x0.val = $x22;var $x24 = $x1.lft;$x0.lft = $x24;var $x25 = $x1.rgt;$x0.rgt = $x25; break; } case "I": { var $x0 = ({$: "Node"});var $x26 = $x1.val;$x0.val = $x26;var $x27 = $x1.lft;$x0.lft = $x27;var $x29 = _$0;var $x30 = $x1.rgt;var $x31 = $x21.tail;var $x32 = _$3;var $x28 = $BinMap$set$($x29, $x30, $x31, $x32);$x0.rgt = $x28; break; } case "O": { var $x0 = ({$: "Node"});var $x33 = $x1.val;$x0.val = $x33;var $x35 = _$0;var $x36 = $x1.lft;var $x37 = $x21.tail;var $x38 = _$3;var $x34 = $BinMap$set$($x35, $x36, $x37, $x38);$x0.lft = $x34;var $x39 = $x1.rgt;$x0.rgt = $x39; break; } } break; } }return $x0; }
const $BinMap$set = _$0 => _$1 => _$2 => _$3 => $BinMap$set$(_$0,_$1,_$2,_$3)

const $Bool$ = (() => {var $x0 = /*{$:'True'} | {$:'False'}*/null;return $x0; })()
const $Bool = $Bool$

function $Bool$and$(_$0/*:Bool*/,_$1/*:Bool*/) {var $x1 = _$0;switch ($x1.$) { case "False": { var $x0 = ({$: "False"}); break; } case "True": { var $x0 = _$1; break; } }return $x0; }
const $Bool$and = _$0 => _$1 => $Bool$and$(_$0,_$1)

function $Bool$eq$(_$0/*:Bool*/) {var $x1 = _$0;switch ($x1.$) { case "False": { var $x0 = ($__0$0 => {var $x3 = $__0$0;switch ($x3.$) { case "False": { var $x2 = ({$: "True"}); break; } default: { var $x2 = ({$: "False"}); break; } }return $x2;}); break; } case "True": { var $x0 = ($__0$0 => {var $x5 = $__0$0;switch ($x5.$) { case "True": { var $x4 = ({$: "True"}); break; } default: { var $x4 = ({$: "False"}); break; } }return $x4;}); break; } default: { var $x6 = /*Type*/null;var $x7 = $x1;var $x0 = ($x6)($x7); break; } }return $x0; }
const $Bool$eq = _$0 => $Bool$eq$(_$0)

function $Bool$if$(_$0/*:Type*/,_$1/*:Bool*/,_$2/*:null*/,_$3/*:null*/) {var $x1 = _$1;switch ($x1.$) { case "False": { var $x0 = _$3; break; } case "True": { var $x0 = _$2; break; } }return $x0; }
const $Bool$if = _$0 => _$1 => _$2 => _$3 => $Bool$if$(_$0,_$1,_$2,_$3)

function $Bool$not$(_$0/*:Bool*/) {var $x1 = _$0;switch ($x1.$) { case "False": { var $x0 = ({$: "True"}); break; } case "True": { var $x0 = ({$: "False"}); break; } }return $x0; }
const $Bool$not = _$0 => $Bool$not$(_$0)

function $Bool$or$(_$0/*:Bool*/,_$1/*:Bool*/) {var $x1 = _$0;switch ($x1.$) { case "False": { var $x0 = _$1; break; } case "True": { var $x0 = ({$: "True"}); break; } }return $x0; }
const $Bool$or = _$0 => _$1 => $Bool$or$(_$0,_$1)

const $Char$ = (() => {var $x0 = /*BigInt*/null;return $x0; })()
const $Char = $Char$

function $U64$to_bool$(_$0/*:BigInt*/) {var $x1 = _$0;if ($x1 === 0n) { var $x0 = ({$: "False"}); } else { var $x0 = ({$: "True"}); }return $x0; }
const $U64$to_bool = _$0 => $U64$to_bool$(_$0)

function $U64$eql$(_$0/*:BigInt*/,_$1/*:BigInt*/) {var $x1 = _$0;var $x2 = _$1;var $x0 = BigInt.asUintN(64, $x1 === $x2);return $x0; }
const $U64$eql = _$0 => _$1 => $U64$eql$(_$0,_$1)

const $Cmp$ = (() => {var $x0 = /*{$:'LT'} | {$:'EQ'} | {$:'GT'}*/null;return $x0; })()
const $Cmp = $Cmp$

function $U64$compare$(_$0/*:BigInt*/,_$1/*:BigInt*/) {var $x3 = _$0;var $x4 = _$1;var $x2 = $U64$eql$($x3, $x4);var $x1 = $U64$to_bool$($x2);switch ($x1.$) { case "True": { var $x0 = ({$: "EQ"}); break; } case "False": { var $x7 = _$0;var $x8 = _$1;var $x6 = BigInt.asUintN(64, $x7 < $x8);var $x5 = $U64$to_bool$($x6);switch ($x5.$) { case "True": { var $x0 = ({$: "LT"}); break; } case "False": { var $x0 = ({$: "GT"}); break; } } break; } }return $x0; }
const $U64$compare = _$0 => _$1 => $U64$compare$(_$0,_$1)

function $Char$compare$(_$0/*:Char*/,_$1/*:Char*/) {var $x1 = _$0;var $x2 = _$1;var $x0 = $U64$compare$($x1, $x2);return $x0; }
const $Char$compare = _$0 => _$1 => $Char$compare$(_$0,_$1)

function $Ord$(_$0/*:Type*/) {var $x0 = /*{$:'Ord', compare: ($x$0:_$0) => ($y$1:_$0) => Cmp}*/null;return $x0; }
const $Ord = _$0 => $Ord$(_$0)

const $Char$Ord$ = (() => {var $x0 = ({$: "Ord"});var $x1 = $Char$compare;$x0.compare = $x1;return $x0; })()
const $Char$Ord = $Char$Ord$

function $Char$eq$(_$0/*:Char*/,_$1/*:Char*/) {var $x2 = _$0;var $x3 = _$1;var $x1 = $U64$eql$($x2, $x3);var $x0 = $U64$to_bool$($x1);return $x0; }
const $Char$eq = _$0 => _$1 => $Char$eq$(_$0,_$1)

function $Equal$(_$0/*:Type*/,_$1/*:null*/,_$2/*:null*/) {var $x0 = /*{$:'Refl'}*/null;return $x0; }
const $Equal = _$0 => _$1 => _$2 => $Equal$(_$0,_$1,_$2)

function $F64$add$(_$0/*:Number*/,_$1/*:Number*/) {var $x1 = _$0;var $x2 = _$1;var $x0 = $x1 + $x2;return $x0; }
const $F64$add = _$0 => _$1 => $F64$add$(_$0,_$1)

function $F64$div$(_$0/*:Number*/,_$1/*:Number*/) {var $x1 = _$0;var $x2 = _$1;var $x0 = $x1 / $x2;return $x0; }
const $F64$div = _$0 => _$1 => $F64$div$(_$0,_$1)

function $F64$eql$(_$0/*:Number*/,_$1/*:Number*/) {var $x1 = _$0;var $x2 = _$1;var $x0 = BigInt.asUintN(64, $x1 === $x2);return $x0; }
const $F64$eql = _$0 => _$1 => $F64$eql$(_$0,_$1)

function $F64$eq$(_$0/*:Number*/,_$1/*:Number*/) {var $x2 = _$0;var $x3 = _$1;var $x1 = $F64$eql$($x2, $x3);var $x0 = $U64$to_bool$($x1);return $x0; }
const $F64$eq = _$0 => _$1 => $F64$eq$(_$0,_$1)

function $F64$gt$(_$0/*:Number*/,_$1/*:Number*/) {var $x2 = _$0;var $x3 = _$1;var $x1 = BigInt.asUintN(64, $x2 > $x3);var $x0 = $U64$to_bool$($x1);return $x0; }
const $F64$gt = _$0 => _$1 => $F64$gt$(_$0,_$1)

function $F64$gte$(_$0/*:Number*/,_$1/*:Number*/) {var $x2 = _$0;var $x3 = _$1;var $x1 = BigInt.asUintN(64, $x2 >= $x3);var $x0 = $U64$to_bool$($x1);return $x0; }
const $F64$gte = _$0 => _$1 => $F64$gte$(_$0,_$1)

function $F64$is_zero$(_$0/*:Number*/) {var $x2 = _$0;var $x3 = 0.0;var $x1 = BigInt.asUintN(64, $x2 === $x3);var $x0 = $U64$to_bool$($x1);return $x0; }
const $F64$is_zero = _$0 => $F64$is_zero$(_$0)

function $F64$lt$(_$0/*:Number*/,_$1/*:Number*/) {var $x2 = _$0;var $x3 = _$1;var $x1 = BigInt.asUintN(64, $x2 < $x3);var $x0 = $U64$to_bool$($x1);return $x0; }
const $F64$lt = _$0 => _$1 => $F64$lt$(_$0,_$1)

function $F64$lte$(_$0/*:Number*/,_$1/*:Number*/) {var $x2 = _$0;var $x3 = _$1;var $x1 = BigInt.asUintN(64, $x2 <= $x3);var $x0 = $U64$to_bool$($x1);return $x0; }
const $F64$lte = _$0 => _$1 => $F64$lte$(_$0,_$1)

function $F64$min$(_$0/*:Number*/,_$1/*:Number*/) {var $x3 = _$0;var $x4 = _$1;var $x2 = BigInt.asUintN(64, $x3 <= $x4);var $x1 = $U64$to_bool$($x2);switch ($x1.$) { case "True": { var $x0 = _$0; break; } case "False": { var $x0 = _$1; break; } }return $x0; }
const $F64$min = _$0 => _$1 => $F64$min$(_$0,_$1)

function $F64$mul$(_$0/*:Number*/,_$1/*:Number*/) {var $x1 = _$0;var $x2 = _$1;var $x0 = $x1 * $x2;return $x0; }
const $F64$mul = _$0 => _$1 => $F64$mul$(_$0,_$1)

function $F64$negate$(_$0/*:Number*/) {var $x1 = 0.0;var $x2 = _$0;var $x0 = $x1 - $x2;return $x0; }
const $F64$negate = _$0 => $F64$negate$(_$0)

function $F64$sqrt_go$(_$0/*:Number*/,_$1/*:Number*/,_$2/*:BigInt*/) {while(1){var $x1 = _$2;if ($x1 === 0n) { var $x0 = _$1; } else { var $x3 = _$1;var $x5 = _$0;var $x6 = _$1;var $x4 = $F64$div$($x5, $x6);var $x2 = $F64$add$($x3, $x4);var $x7 = 2.0;var $next$0 = $F64$div$($x2, $x7);var $x9 = _$1;var $x10 = $next$0;var $x8 = $F64$eq$($x9, $x10);switch ($x8.$) { case "True": { var $x0 = $next$0; break; } case "False": { var $x11 = _$0;var $x12 = $next$0;var $x14 = $x1;var $x15 = 1n;var $x13 = BigInt.asUintN(64, $x14 - $x15);_$0 = $x11;_$1 = $x12;_$2 = $x13;/*TCO*/continue; break; } } }return $x0; }}
const $F64$sqrt_go = _$0 => _$1 => _$2 => $F64$sqrt_go$(_$0,_$1,_$2)

function $F64$sqrt$(_$0/*:Number*/) {var $x2 = _$0;var $x1 = $F64$is_zero$($x2);switch ($x1.$) { case "True": { var $x0 = _$0; break; } case "False": { var $x3 = _$0;var $x5 = _$0;var $x6 = 2.0;var $x4 = $F64$div$($x5, $x6);var $x7 = 10n;var $x0 = $F64$sqrt_go$($x3, $x4, $x7); break; } }return $x0; }
const $F64$sqrt = _$0 => $F64$sqrt$(_$0)

function $F64$sub$(_$0/*:Number*/,_$1/*:Number*/) {var $x1 = _$0;var $x2 = _$1;var $x0 = $x1 - $x2;return $x0; }
const $F64$sub = _$0 => _$1 => $F64$sub$(_$0,_$1)

const $KEYEVENT$ = (() => {var $x0 = 0n;return $x0; })()
const $KEYEVENT = $KEYEVENT$

const $KEYMOUSE$ = (() => {var $x0 = 2n;return $x0; })()
const $KEYMOUSE = $KEYMOUSE$

function $List$(_$0/*:Type*/) {var $x0 = /*{$:'Nil'} | {$:'Cons', head: _$0, tail: List<_$0>}*/null;return $x0; }
const $List = _$0 => $List$(_$0)

function $List$append$(_$0/*:Type*/,_$1/*:List<null>*/,_$2/*:List<null>*/) {var $x1 = _$1;switch ($x1.$) { case "Cons": { var $x0 = ({$: "Cons"});var $x2 = $x1.head;$x0.head = $x2;var $x4 = _$0;var $x5 = $x1.tail;var $x6 = _$2;var $x3 = $List$append$($x4, $x5, $x6);$x0.tail = $x3; break; } case "Nil": { var $x0 = _$2; break; } }return $x0; }
const $List$append = _$0 => _$1 => _$2 => $List$append$(_$0,_$1,_$2)

function $List$foldr$(_$0/*:Type*/,_$1/*:List<null>*/,_$2/*:Type*/,_$3/*:null*/,_$4/*:($_$4:null) => ($_$5:null) => null*/) {var $x1 = _$1;switch ($x1.$) { case "Cons": { var $x3 = _$4;var $x4 = $x1.head;var $x2 = ($x3)($x4);var $x6 = _$0;var $x7 = $x1.tail;var $x8 = _$2;var $x9 = _$3;var $x10 = _$4;var $x5 = $List$foldr$($x6, $x7, $x8, $x9, $x10);var $x0 = ($x2)($x5); break; } case "Nil": { var $x0 = _$3; break; } }return $x0; }
const $List$foldr = _$0 => _$1 => _$2 => _$3 => _$4 => $List$foldr$(_$0,_$1,_$2,_$3,_$4)

function $List$fold$(_$0/*:Type*/,_$1/*:List<null>*/,_$2/*:Type*/,_$3/*:null*/,_$4/*:($_$4:null) => ($_$5:null) => null*/) {var $x1 = _$0;var $x2 = _$1;var $x3 = _$2;var $x4 = _$3;var $x5 = _$4;var $x0 = $List$foldr$($x1, $x2, $x3, $x4, $x5);return $x0; }
const $List$fold = _$0 => _$1 => _$2 => _$3 => _$4 => $List$fold$(_$0,_$1,_$2,_$3,_$4)

function $List$foldl$(_$0/*:Type*/,_$1/*:List<null>*/,_$2/*:Type*/,_$3/*:null*/,_$4/*:($_$4:null) => ($_$5:null) => null*/) {while(1){var $x1 = _$1;switch ($x1.$) { case "Cons": { var $x2 = _$0;var $x3 = $x1.tail;var $x4 = _$2;var $x7 = _$4;var $x8 = _$3;var $x6 = ($x7)($x8);var $x9 = $x1.head;var $x5 = ($x6)($x9);var $x10 = _$4;_$0 = $x2;_$1 = $x3;_$2 = $x4;_$3 = $x5;_$4 = $x10;/*TCO*/continue; break; } case "Nil": { var $x0 = _$3; break; } }return $x0; }}
const $List$foldl = _$0 => _$1 => _$2 => _$3 => _$4 => $List$foldl$(_$0,_$1,_$2,_$3,_$4)

function $List$head$(_$0/*:Type*/,_$1/*:List<null>*/) {var $x1 = _$1;switch ($x1.$) { case "Cons": { var $x0 = ({$: "Some"});var $x2 = $x1.head;$x0.value = $x2; break; } case "Nil": { var $x0 = ({$: "None"}); break; } }return $x0; }
const $List$head = _$0 => _$1 => $List$head$(_$0,_$1)

function $List$insert_at_sorted$(_$0/*:Type*/,_$1/*:List<null>*/,_$2/*:null*/,_$3/*:($_$3:null) => ($_$4:null) => Bool*/) {var $x1 = _$1;switch ($x1.$) { case "Cons": { var $x4 = _$3;var $x5 = _$2;var $x3 = ($x4)($x5);var $x6 = $x1.head;var $x2 = ($x3)($x6);switch ($x2.$) { case "False": { var $x0 = ({$: "Cons"});var $x7 = $x1.head;$x0.head = $x7;var $x9 = _$0;var $x10 = $x1.tail;var $x11 = _$2;var $x12 = _$3;var $x8 = $List$insert_at_sorted$($x9, $x10, $x11, $x12);$x0.tail = $x8; break; } case "True": { var $x0 = ({$: "Cons"});var $x13 = _$2;$x0.head = $x13;var $x14 = ({$: "Cons"});var $x15 = $x1.head;$x14.head = $x15;var $x16 = $x1.tail;$x14.tail = $x16;$x0.tail = $x14; break; } } break; } case "Nil": { var $x0 = ({$: "Cons"});var $x17 = _$2;$x0.head = $x17;var $x18 = ({$: "Nil"});$x0.tail = $x18; break; } }return $x0; }
const $List$insert_at_sorted = _$0 => _$1 => _$2 => _$3 => $List$insert_at_sorted$(_$0,_$1,_$2,_$3)

function $List$insertion_sort$(_$0/*:Type*/,_$1/*:List<null>*/,_$2/*:($_$2:null) => ($_$3:null) => Bool*/) {var $x1 = _$1;switch ($x1.$) { case "Cons": { var $x2 = _$0;var $x3 = $x1.tail;var $x4 = _$2;var $sorted_tail$0 = $List$insertion_sort$($x2, $x3, $x4);var $x5 = _$0;var $x6 = $sorted_tail$0;var $x7 = $x1.head;var $x8 = _$2;var $x0 = $List$insert_at_sorted$($x5, $x6, $x7, $x8); break; } case "Nil": { var $x0 = ({$: "Nil"}); break; } }return $x0; }
const $List$insertion_sort = _$0 => _$1 => _$2 => $List$insertion_sort$(_$0,_$1,_$2)

function $List$map$(_$0/*:Type*/,_$1/*:Type*/,_$2/*:List<null>*/,_$3/*:($_$3:null) => null*/) {var $x1 = _$2;switch ($x1.$) { case "Cons": { var $x0 = ({$: "Cons"});var $x3 = _$3;var $x4 = $x1.head;var $x2 = ($x3)($x4);$x0.head = $x2;var $x6 = _$0;var $x7 = _$1;var $x8 = $x1.tail;var $x9 = _$3;var $x5 = $List$map$($x6, $x7, $x8, $x9);$x0.tail = $x5; break; } case "Nil": { var $x0 = ({$: "Nil"}); break; } }return $x0; }
const $List$map = _$0 => _$1 => _$2 => _$3 => $List$map$(_$0,_$1,_$2,_$3)

function $List$sort$(_$0/*:Type*/,_$1/*:List<null>*/,_$2/*:($_$2:null) => ($_$3:null) => Bool*/) {var $x1 = _$0;var $x2 = _$1;var $x3 = _$2;var $x0 = $List$insertion_sort$($x1, $x2, $x3);return $x0; }
const $List$sort = _$0 => _$1 => _$2 => $List$sort$(_$0,_$1,_$2)

function $Pair$(_$0/*:Type*/,_$1/*:Type*/) {var $x0 = /*{$:'Pair', fst: _$0, snd: _$1}*/null;return $x0; }
const $Pair = _$0 => _$1 => $Pair$(_$0,_$1)

function $List$zip$(_$0/*:Type*/,_$1/*:Type*/,_$2/*:List<null>*/,_$3/*:List<null>*/) {var $x1 = _$2;switch ($x1.$) { case "Cons": { var $x2 = _$3;switch ($x2.$) { case "Cons": { var $x0 = ({$: "Cons"});var $x3 = ({$: "Pair"});var $x4 = $x1.head;$x3.fst = $x4;var $x5 = $x2.head;$x3.snd = $x5;$x0.head = $x3;var $x7 = _$0;var $x8 = _$1;var $x9 = $x1.tail;var $x10 = $x2.tail;var $x6 = $List$zip$($x7, $x8, $x9, $x10);$x0.tail = $x6; break; } case "Nil": { var $x0 = ({$: "Nil"}); break; } } break; } case "Nil": { var $x0 = ({$: "Nil"}); break; } }return $x0; }
const $List$zip = _$0 => _$1 => _$2 => _$3 => $List$zip$(_$0,_$1,_$2,_$3)

const $MOUSECLICK$ = (() => {var $x0 = 1n;return $x0; })()
const $MOUSECLICK = $MOUSECLICK$

const $MOUSEMOVE$ = (() => {var $x0 = 3n;return $x0; })()
const $MOUSEMOVE = $MOUSEMOVE$

function $Map$delete$(_$0/*:Type*/,_$1/*:Map<BigInt, Maybe<null>>*/,_$2/*:BigInt*/) {var $x1 = _$1;var $x2 = _$2;var $x3 = ({$: "None"});var $x5 = $x1.has($x2) ? $x1.get($x2) : $x1.get(-1n);var $x4 = $x1; $x1.set($x2, $x3);var $x0 = $x4;return $x0; }
const $Map$delete = _$0 => _$1 => _$2 => $Map$delete$(_$0,_$1,_$2)

function $Map$empty$(_$0/*:Type*/) {var $x0 = new Map();var $x1 = ({$: "None"});$x0.set(-1n, $x1);return $x0; }
const $Map$empty = _$0 => $Map$empty$(_$0)

function $U64$eq$(_$0/*:BigInt*/,_$1/*:BigInt*/) {var $x2 = _$0;var $x3 = _$1;var $x1 = $U64$eql$($x2, $x3);var $x0 = $U64$to_bool$($x1);return $x0; }
const $U64$eq = _$0 => _$1 => $U64$eq$(_$0,_$1)

function $Map$fold$go$(_$0/*:Type*/,_$1/*:Type*/,_$2/*:Map<BigInt, Maybe<null>>*/,_$3/*:BigInt*/,_$4/*:null*/,_$5/*:($_$5:null) => ($_$6:BigInt) => ($_$7:null) => null*/) {while(1){var $x2 = _$3;var $x3 = 0n;var $x1 = $U64$eq$($x2, $x3);switch ($x1.$) { case "False": { var $x4 = _$2;var $x5 = _$3;var $x7 = $x4.has($x5) ? $x4.get($x5) : $x4.get(-1n);var $x6 = $x4;var $x8 = $x7;switch ($x8.$) { case "None": { var $x9 = _$0;var $x10 = _$1;var $x11 = $x6;var $x13 = _$3;var $x14 = 1n;var $x12 = BigInt.asUintN(64, $x13 - $x14);var $x15 = _$4;var $x16 = _$5;_$0 = $x9;_$1 = $x10;_$2 = $x11;_$3 = $x12;_$4 = $x15;_$5 = $x16;/*TCO*/continue; break; } case "Some": { var $x17 = _$0;var $x18 = _$1;var $x19 = $x6;var $x21 = _$3;var $x22 = 1n;var $x20 = BigInt.asUintN(64, $x21 - $x22);var $x26 = _$5;var $x27 = _$4;var $x25 = ($x26)($x27);var $x28 = _$3;var $x24 = ($x25)($x28);var $x29 = $x8.value;var $x23 = ($x24)($x29);var $x30 = _$5;_$0 = $x17;_$1 = $x18;_$2 = $x19;_$3 = $x20;_$4 = $x23;_$5 = $x30;/*TCO*/continue; break; } } break; } case "True": { var $x31 = _$2;var $x32 = 0n;var $x34 = $x31.has($x32) ? $x31.get($x32) : $x31.get(-1n);var $x33 = $x31;var $x35 = $x34;switch ($x35.$) { case "None": { var $x0 = _$4; break; } case "Some": { var $x38 = _$5;var $x39 = _$4;var $x37 = ($x38)($x39);var $x40 = 0n;var $x36 = ($x37)($x40);var $x41 = $x35.value;var $x0 = ($x36)($x41); break; } } break; } }return $x0; }}
const $Map$fold$go = _$0 => _$1 => _$2 => _$3 => _$4 => _$5 => $Map$fold$go$(_$0,_$1,_$2,_$3,_$4,_$5)

function $Map$fold$(_$0/*:Type*/,_$1/*:Type*/,_$2/*:Map<BigInt, Maybe<null>>*/,_$3/*:BigInt*/,_$4/*:null*/,_$5/*:($_$5:null) => ($_$6:BigInt) => ($_$7:null) => null*/) {var $x1 = _$0;var $x2 = _$1;var $x3 = _$2;var $x4 = _$3;var $x5 = _$4;var $x6 = _$5;var $x0 = $Map$fold$go$($x1, $x2, $x3, $x4, $x5, $x6);return $x0; }
const $Map$fold = _$0 => _$1 => _$2 => _$3 => _$4 => _$5 => $Map$fold$(_$0,_$1,_$2,_$3,_$4,_$5)

const $Map$fold$test_map$ = (() => {var $x0 = new Map();var $x2 = ({$: "None"});$x0.set(1n, $x2); var $x3 = ({$: "Some"});var $x4 = 10n;$x3.value = $x4;$x0.set(2n, $x3); var $x5 = ({$: "Some"});var $x6 = 20n;$x5.value = $x6;$x0.set(5n, $x5);var $x1 = ({$: "None"});$x0.set(-1n, $x1);return $x0; })()
const $Map$fold$test_map = $Map$fold$test_map$

function $Map$get$(_$0/*:Type*/,_$1/*:Map<BigInt, Maybe<null>>*/,_$2/*:BigInt*/) {var $x1 = _$1;var $x2 = _$2;var $x4 = $x1.has($x2) ? $x1.get($x2) : $x1.get(-1n);var $x3 = $x1;var $x0 = $x4;return $x0; }
const $Map$get = _$0 => _$1 => _$2 => $Map$get$(_$0,_$1,_$2)

const $Map$get$test_map$ = (() => {var $x0 = new Map();var $x2 = ({$: "Some"});var $x3 = 42n;$x2.value = $x3;$x0.set(0n, $x2); var $x4 = ({$: "None"});$x0.set(1n, $x4); var $x5 = ({$: "Some"});var $x6 = 10n;$x5.value = $x6;$x0.set(2n, $x5); var $x7 = ({$: "Some"});var $x8 = 20n;$x7.value = $x8;$x0.set(5n, $x7);var $x1 = ({$: "None"});$x0.set(-1n, $x1);return $x0; })()
const $Map$get$test_map = $Map$get$test_map$

function $Map$insert$(_$0/*:Type*/,_$1/*:Map<BigInt, Maybe<null>>*/,_$2/*:BigInt*/,_$3/*:null*/) {var $x1 = _$1;var $x2 = _$2;var $x3 = ({$: "Some"});var $x4 = _$3;$x3.value = $x4;var $x6 = $x1.has($x2) ? $x1.get($x2) : $x1.get(-1n);var $x5 = $x1; $x1.set($x2, $x3);var $x0 = $x5;return $x0; }
const $Map$insert = _$0 => _$1 => _$2 => _$3 => $Map$insert$(_$0,_$1,_$2,_$3)

function $Map$update$(_$0/*:Type*/,_$1/*:Map<BigInt, Maybe<null>>*/,_$2/*:BigInt*/,_$3/*:null*/) {var $x2 = _$0;var $x3 = _$1;var $x4 = _$2;var $x1 = $Map$get$($x2, $x3, $x4);switch ($x1.$) { case "None": { var $x0 = _$1; break; } case "Some": { var $x5 = _$1;var $x6 = _$2;var $x7 = ({$: "Some"});var $x8 = _$3;$x7.value = $x8;var $x10 = $x5.has($x6) ? $x5.get($x6) : $x5.get(-1n);var $x9 = $x5; $x5.set($x6, $x7);var $x0 = $x9; break; } }return $x0; }
const $Map$update = _$0 => _$1 => _$2 => _$3 => $Map$update$(_$0,_$1,_$2,_$3)

function $Map$values$go$(_$0/*:Type*/,_$1/*:Map<BigInt, Maybe<null>>*/,_$2/*:BigInt*/,_$3/*:List<null>*/) {while(1){var $x2 = _$2;var $x3 = 0n;var $x1 = $U64$eq$($x2, $x3);switch ($x1.$) { case "False": { var $x4 = _$1;var $x5 = _$2;var $x7 = $x4.has($x5) ? $x4.get($x5) : $x4.get(-1n);var $x6 = $x4;var $x8 = $x7;switch ($x8.$) { case "None": { var $x9 = _$0;var $x10 = $x6;var $x12 = _$2;var $x13 = 1n;var $x11 = BigInt.asUintN(64, $x12 - $x13);var $x14 = _$3;_$0 = $x9;_$1 = $x10;_$2 = $x11;_$3 = $x14;/*TCO*/continue; break; } case "Some": { var $x15 = _$0;var $x16 = $x6;var $x18 = _$2;var $x19 = 1n;var $x17 = BigInt.asUintN(64, $x18 - $x19);var $x20 = ({$: "Cons"});var $x21 = $x8.value;$x20.head = $x21;var $x22 = _$3;$x20.tail = $x22;_$0 = $x15;_$1 = $x16;_$2 = $x17;_$3 = $x20;/*TCO*/continue; break; } } break; } case "True": { var $x23 = _$1;var $x24 = 0n;var $x26 = $x23.has($x24) ? $x23.get($x24) : $x23.get(-1n);var $x25 = $x23;var $x27 = $x26;switch ($x27.$) { case "None": { var $x0 = _$3; break; } case "Some": { var $x0 = ({$: "Cons"});var $x28 = $x27.value;$x0.head = $x28;var $x29 = _$3;$x0.tail = $x29; break; } } break; } }return $x0; }}
const $Map$values$go = _$0 => _$1 => _$2 => _$3 => $Map$values$go$(_$0,_$1,_$2,_$3)

function $Map$values$(_$0/*:Type*/,_$1/*:Map<BigInt, Maybe<null>>*/,_$2/*:BigInt*/) {var $x1 = _$0;var $x2 = _$1;var $x3 = _$2;var $x4 = ({$: "Nil"});var $x0 = $Map$values$go$($x1, $x2, $x3, $x4);return $x0; }
const $Map$values = _$0 => _$1 => _$2 => $Map$values$(_$0,_$1,_$2)

const $Map$values$test_map$ = (() => {var $x0 = new Map();var $x2 = ({$: "None"});$x0.set(1n, $x2); var $x3 = ({$: "Some"});var $x4 = 10n;$x3.value = $x4;$x0.set(2n, $x3); var $x5 = ({$: "Some"});var $x6 = 20n;$x5.value = $x6;$x0.set(5n, $x5);var $x1 = ({$: "None"});$x0.set(-1n, $x1);return $x0; })()
const $Map$values$test_map = $Map$values$test_map$

function $Maybe$none$(_$0/*:Type*/) {var $x0 = ({$: "None"});return $x0; }
const $Maybe$none = _$0 => $Maybe$none$(_$0)

const $Nat$ = (() => {var $x0 = /*{$:'Zero'} | {$:'Succ', pred: Nat}*/null;return $x0; })()
const $Nat = $Nat$

function $Nat$add$(_$0/*:Nat*/,_$1/*:Nat*/) {var $x1 = _$0;switch ($x1.$) { case "Succ": { var $x0 = ({$: "Succ"});var $x3 = $x1.pred;var $x4 = _$1;var $x2 = $Nat$add$($x3, $x4);$x0.pred = $x2; break; } case "Zero": { var $x0 = _$1; break; } }return $x0; }
const $Nat$add = _$0 => _$1 => $Nat$add$(_$0,_$1)

function $Nat$lte$(_$0/*:Nat*/,_$1/*:Nat*/) {while(1){var $x1 = _$0;switch ($x1.$) { case "Succ": { var $x2 = _$1;switch ($x2.$) { case "Succ": { var $x3 = $x1.pred;var $x4 = $x2.pred;_$0 = $x3;_$1 = $x4;/*TCO*/continue; break; } case "Zero": { var $x0 = ({$: "False"}); break; } } break; } case "Zero": { var $x0 = ({$: "True"}); break; } }return $x0; }}
const $Nat$lte = _$0 => _$1 => $Nat$lte$(_$0,_$1)

function $Nat$gte$(_$0/*:Nat*/,_$1/*:Nat*/) {var $x1 = _$1;var $x2 = _$0;var $x0 = $Nat$lte$($x1, $x2);return $x0; }
const $Nat$gte = _$0 => _$1 => $Nat$gte$(_$0,_$1)

function $Nat$max$(_$0/*:Nat*/,_$1/*:Nat*/) {var $x1 = $Nat;var $x3 = _$0;var $x4 = _$1;var $x2 = $Nat$gte$($x3, $x4);var $x5 = _$0;var $x6 = _$1;var $x0 = $Bool$if$($x1, $x2, $x5, $x6);return $x0; }
const $Nat$max = _$0 => _$1 => $Nat$max$(_$0,_$1)

function $Ord$compare$(_$0/*:Type*/,_$1/*:Ord<null>*/,_$2/*:null*/,_$3/*:null*/) {var $x1 = _$1;var $x3 = $x1.compare;var $x4 = _$2;var $x2 = ($x3)($x4);var $x5 = _$3;var $x0 = ($x2)($x5);return $x0; }
const $Ord$compare = _$0 => _$1 => _$2 => _$3 => $Ord$compare$(_$0,_$1,_$2,_$3)

const $OrdTree$Balance$ = (() => {var $x0 = /*{$:'MinusOne'} | {$:'Zero'} | {$:'PlusOne'}*/null;return $x0; })()
const $OrdTree$Balance = $OrdTree$Balance$

function $OrdTree$(_$0/*:Type*/,_$1/*:Type*/) {var $x0 = /*{$:'Leaf'} | {$:'Node', key_value: Pair<_$0><_$1>, balance: OrdTree/Balance, left: OrdTree<_$0><_$1>, right: OrdTree<_$0><_$1>}*/null;return $x0; }
const $OrdTree = _$0 => _$1 => $OrdTree$(_$0,_$1)

function $OrdTree$Balance$rotate_left$(_$0/*:Type*/,_$1/*:Type*/,_$2/*:OrdTree<null><null>*/) {var $x1 = _$2;switch ($x1.$) { case "Leaf": { var $x0 = ({$: "Pair"});var $x2 = ({$: "Leaf"});$x0.fst = $x2;var $x3 = ({$: "False"});$x0.snd = $x3; break; } case "Node": { var $x4 = $x1.balance;switch ($x4.$) { case "PlusOne": { var $x5 = $x1.right;switch ($x5.$) { case "Node": { var $x6 = $x5.balance;switch ($x6.$) { case "MinusOne": { var $x7 = $x5.left;switch ($x7.$) { case "Node": { var $x8 = $x7.balance;switch ($x8.$) { case "MinusOne": { var $x0 = ({$: "Pair"});var $x9 = ({$: "Node"});var $x10 = $x7.key_value;$x9.key_value = $x10;var $x11 = ({$: "Zero"});$x9.balance = $x11;var $x12 = ({$: "Node"});var $x13 = $x1.key_value;$x12.key_value = $x13;var $x14 = ({$: "Zero"});$x12.balance = $x14;var $x15 = $x1.left;$x12.left = $x15;var $x16 = $x7.left;$x12.right = $x16;$x9.left = $x12;var $x17 = ({$: "Node"});var $x18 = $x5.key_value;$x17.key_value = $x18;var $x19 = ({$: "PlusOne"});$x17.balance = $x19;var $x20 = $x7.right;$x17.left = $x20;var $x21 = $x5.right;$x17.right = $x21;$x9.right = $x17;$x0.fst = $x9;var $x22 = ({$: "False"});$x0.snd = $x22; break; } case "PlusOne": { var $x0 = ({$: "Pair"});var $x23 = ({$: "Node"});var $x24 = $x7.key_value;$x23.key_value = $x24;var $x25 = ({$: "Zero"});$x23.balance = $x25;var $x26 = ({$: "Node"});var $x27 = $x1.key_value;$x26.key_value = $x27;var $x28 = ({$: "MinusOne"});$x26.balance = $x28;var $x29 = $x1.left;$x26.left = $x29;var $x30 = $x7.left;$x26.right = $x30;$x23.left = $x26;var $x31 = ({$: "Node"});var $x32 = $x5.key_value;$x31.key_value = $x32;var $x33 = ({$: "Zero"});$x31.balance = $x33;var $x34 = $x7.right;$x31.left = $x34;var $x35 = $x5.right;$x31.right = $x35;$x23.right = $x31;$x0.fst = $x23;var $x36 = ({$: "False"});$x0.snd = $x36; break; } case "Zero": { var $x0 = ({$: "Pair"});var $x37 = ({$: "Node"});var $x38 = $x7.key_value;$x37.key_value = $x38;var $x39 = ({$: "Zero"});$x37.balance = $x39;var $x40 = ({$: "Node"});var $x41 = $x1.key_value;$x40.key_value = $x41;var $x42 = ({$: "Zero"});$x40.balance = $x42;var $x43 = $x1.left;$x40.left = $x43;var $x44 = $x7.left;$x40.right = $x44;$x37.left = $x40;var $x45 = ({$: "Node"});var $x46 = $x5.key_value;$x45.key_value = $x46;var $x47 = ({$: "Zero"});$x45.balance = $x47;var $x48 = $x7.right;$x45.left = $x48;var $x49 = $x5.right;$x45.right = $x49;$x37.right = $x45;$x0.fst = $x37;var $x50 = ({$: "False"});$x0.snd = $x50; break; } } break; } default: { var $x0 = ({$: "Pair"});var $x51 = ({$: "Node"});var $x52 = $x1.key_value;$x51.key_value = $x52;var $x53 = ({$: "PlusOne"});$x51.balance = $x53;var $x54 = $x1.left;$x51.left = $x54;var $x55 = ({$: "Node"});var $x56 = $x5.key_value;$x55.key_value = $x56;var $x57 = ({$: "MinusOne"});$x55.balance = $x57;var $x58 = $x7;$x55.left = $x58;var $x59 = $x5.right;$x55.right = $x59;$x51.right = $x55;$x0.fst = $x51;var $x60 = ({$: "False"});$x0.snd = $x60; break; } } break; } case "PlusOne": { var $x0 = ({$: "Pair"});var $x61 = ({$: "Node"});var $x62 = $x5.key_value;$x61.key_value = $x62;var $x63 = ({$: "Zero"});$x61.balance = $x63;var $x64 = ({$: "Node"});var $x65 = $x1.key_value;$x64.key_value = $x65;var $x66 = ({$: "Zero"});$x64.balance = $x66;var $x67 = $x1.left;$x64.left = $x67;var $x68 = $x5.left;$x64.right = $x68;$x61.left = $x64;var $x69 = $x5.right;$x61.right = $x69;$x0.fst = $x61;var $x70 = ({$: "False"});$x0.snd = $x70; break; } case "Zero": { var $x0 = ({$: "Pair"});var $x71 = ({$: "Node"});var $x72 = $x5.key_value;$x71.key_value = $x72;var $x73 = ({$: "MinusOne"});$x71.balance = $x73;var $x74 = ({$: "Node"});var $x75 = $x1.key_value;$x74.key_value = $x75;var $x76 = ({$: "PlusOne"});$x74.balance = $x76;var $x77 = $x1.left;$x74.left = $x77;var $x78 = $x5.left;$x74.right = $x78;$x71.left = $x74;var $x79 = $x5.right;$x71.right = $x79;$x0.fst = $x71;var $x80 = ({$: "True"});$x0.snd = $x80; break; } default: { var $x83 = /*Type*/null;var $x84 = $x6;var $x82 = ($x83)($x84);var $x85 = $x5.left;var $x81 = ($x82)($x85);var $x86 = $x5.right;var $x0 = ($x81)($x86); break; } } break; } default: { var $x0 = ({$: "Pair"});var $x87 = ({$: "Node"});var $x88 = $x1.key_value;$x87.key_value = $x88;var $x89 = ({$: "PlusOne"});$x87.balance = $x89;var $x90 = $x1.left;$x87.left = $x90;var $x91 = $x5;$x87.right = $x91;$x0.fst = $x87;var $x92 = ({$: "False"});$x0.snd = $x92; break; } } break; } default: { var $x0 = ({$: "Pair"});var $x93 = ({$: "Node"});var $x94 = $x1.key_value;$x93.key_value = $x94;var $x95 = $x4;$x93.balance = $x95;var $x96 = $x1.left;$x93.left = $x96;var $x97 = $x1.right;$x93.right = $x97;$x0.fst = $x93;var $x98 = ({$: "False"});$x0.snd = $x98; break; } } break; } default: { var $x99 = /*Type*/null;var $x100 = $x1;var $x0 = ($x99)($x100); break; } }return $x0; }
const $OrdTree$Balance$rotate_left = _$0 => _$1 => _$2 => $OrdTree$Balance$rotate_left$(_$0,_$1,_$2)

function $OrdTree$Balance$rotate_right$(_$0/*:Type*/,_$1/*:Type*/,_$2/*:OrdTree<null><null>*/) {var $x1 = _$2;switch ($x1.$) { case "Leaf": { var $x0 = ({$: "Pair"});var $x2 = ({$: "Leaf"});$x0.fst = $x2;var $x3 = ({$: "False"});$x0.snd = $x3; break; } case "Node": { var $x4 = $x1.balance;switch ($x4.$) { case "MinusOne": { var $x5 = $x1.left;switch ($x5.$) { case "Node": { var $x6 = $x5.balance;switch ($x6.$) { case "MinusOne": { var $x0 = ({$: "Pair"});var $x7 = ({$: "Node"});var $x8 = $x5.key_value;$x7.key_value = $x8;var $x9 = ({$: "Zero"});$x7.balance = $x9;var $x10 = $x5.left;$x7.left = $x10;var $x11 = ({$: "Node"});var $x12 = $x1.key_value;$x11.key_value = $x12;var $x13 = ({$: "Zero"});$x11.balance = $x13;var $x14 = $x5.right;$x11.left = $x14;var $x15 = $x1.right;$x11.right = $x15;$x7.right = $x11;$x0.fst = $x7;var $x16 = ({$: "False"});$x0.snd = $x16; break; } case "PlusOne": { var $x17 = $x5.right;switch ($x17.$) { case "Node": { var $x18 = $x17.balance;switch ($x18.$) { case "MinusOne": { var $x0 = ({$: "Pair"});var $x19 = ({$: "Node"});var $x20 = $x17.key_value;$x19.key_value = $x20;var $x21 = ({$: "Zero"});$x19.balance = $x21;var $x22 = ({$: "Node"});var $x23 = $x5.key_value;$x22.key_value = $x23;var $x24 = ({$: "Zero"});$x22.balance = $x24;var $x25 = $x5.left;$x22.left = $x25;var $x26 = $x17.left;$x22.right = $x26;$x19.left = $x22;var $x27 = ({$: "Node"});var $x28 = $x1.key_value;$x27.key_value = $x28;var $x29 = ({$: "PlusOne"});$x27.balance = $x29;var $x30 = $x17.right;$x27.left = $x30;var $x31 = $x1.right;$x27.right = $x31;$x19.right = $x27;$x0.fst = $x19;var $x32 = ({$: "False"});$x0.snd = $x32; break; } case "PlusOne": { var $x0 = ({$: "Pair"});var $x33 = ({$: "Node"});var $x34 = $x17.key_value;$x33.key_value = $x34;var $x35 = ({$: "Zero"});$x33.balance = $x35;var $x36 = ({$: "Node"});var $x37 = $x5.key_value;$x36.key_value = $x37;var $x38 = ({$: "MinusOne"});$x36.balance = $x38;var $x39 = $x5.left;$x36.left = $x39;var $x40 = $x17.left;$x36.right = $x40;$x33.left = $x36;var $x41 = ({$: "Node"});var $x42 = $x1.key_value;$x41.key_value = $x42;var $x43 = ({$: "Zero"});$x41.balance = $x43;var $x44 = $x17.right;$x41.left = $x44;var $x45 = $x1.right;$x41.right = $x45;$x33.right = $x41;$x0.fst = $x33;var $x46 = ({$: "False"});$x0.snd = $x46; break; } case "Zero": { var $x0 = ({$: "Pair"});var $x47 = ({$: "Node"});var $x48 = $x17.key_value;$x47.key_value = $x48;var $x49 = ({$: "Zero"});$x47.balance = $x49;var $x50 = ({$: "Node"});var $x51 = $x5.key_value;$x50.key_value = $x51;var $x52 = ({$: "Zero"});$x50.balance = $x52;var $x53 = $x5.left;$x50.left = $x53;var $x54 = $x17.left;$x50.right = $x54;$x47.left = $x50;var $x55 = ({$: "Node"});var $x56 = $x1.key_value;$x55.key_value = $x56;var $x57 = ({$: "Zero"});$x55.balance = $x57;var $x58 = $x17.right;$x55.left = $x58;var $x59 = $x1.right;$x55.right = $x59;$x47.right = $x55;$x0.fst = $x47;var $x60 = ({$: "False"});$x0.snd = $x60; break; } } break; } default: { var $x0 = ({$: "Pair"});var $x61 = ({$: "Node"});var $x62 = $x1.key_value;$x61.key_value = $x62;var $x63 = ({$: "MinusOne"});$x61.balance = $x63;var $x64 = ({$: "Node"});var $x65 = $x5.key_value;$x64.key_value = $x65;var $x66 = ({$: "PlusOne"});$x64.balance = $x66;var $x67 = $x5.left;$x64.left = $x67;var $x68 = $x17;$x64.right = $x68;$x61.left = $x64;var $x69 = $x1.right;$x61.right = $x69;$x0.fst = $x61;var $x70 = ({$: "False"});$x0.snd = $x70; break; } } break; } case "Zero": { var $x0 = ({$: "Pair"});var $x71 = ({$: "Node"});var $x72 = $x5.key_value;$x71.key_value = $x72;var $x73 = ({$: "PlusOne"});$x71.balance = $x73;var $x74 = $x5.left;$x71.left = $x74;var $x75 = ({$: "Node"});var $x76 = $x1.key_value;$x75.key_value = $x76;var $x77 = ({$: "MinusOne"});$x75.balance = $x77;var $x78 = $x5.right;$x75.left = $x78;var $x79 = $x1.right;$x75.right = $x79;$x71.right = $x75;$x0.fst = $x71;var $x80 = ({$: "True"});$x0.snd = $x80; break; } default: { var $x84 = /*Type*/null;var $x85 = $x6;var $x83 = ($x84)($x85);var $x86 = $x5.left;var $x82 = ($x83)($x86);var $x87 = $x5.right;var $x81 = ($x82)($x87);var $x88 = $x1.right;var $x0 = ($x81)($x88); break; } } break; } default: { var $x0 = ({$: "Pair"});var $x89 = ({$: "Node"});var $x90 = $x1.key_value;$x89.key_value = $x90;var $x91 = ({$: "MinusOne"});$x89.balance = $x91;var $x92 = $x5;$x89.left = $x92;var $x93 = $x1.right;$x89.right = $x93;$x0.fst = $x89;var $x94 = ({$: "False"});$x0.snd = $x94; break; } } break; } default: { var $x0 = ({$: "Pair"});var $x95 = ({$: "Node"});var $x96 = $x1.key_value;$x95.key_value = $x96;var $x97 = $x4;$x95.balance = $x97;var $x98 = $x1.left;$x95.left = $x98;var $x99 = $x1.right;$x95.right = $x99;$x0.fst = $x95;var $x100 = ({$: "False"});$x0.snd = $x100; break; } } break; } default: { var $x101 = /*Type*/null;var $x102 = $x1;var $x0 = ($x101)($x102); break; } }return $x0; }
const $OrdTree$Balance$rotate_right = _$0 => _$1 => _$2 => $OrdTree$Balance$rotate_right$(_$0,_$1,_$2)

function $OrdTree$empty$(_$0/*:Type*/,_$1/*:Type*/) {var $x0 = ({$: "Leaf"});return $x0; }
const $OrdTree$empty = _$0 => _$1 => $OrdTree$empty$(_$0,_$1)

function $OrdTree$fold$(_$0/*:Type*/,_$1/*:Type*/,_$2/*:OrdTree<null><null>*/,_$3/*:Type*/,_$4/*:null*/,_$5/*:($_$5:Pair<null><null>) => ($_$6:null) => null*/) {while(1){var $x1 = _$2;switch ($x1.$) { case "Leaf": { var $x0 = _$4; break; } case "Node": { var $x2 = _$0;var $x3 = _$1;var $x4 = $x1.left;var $x5 = _$3;var $x6 = _$4;var $x7 = _$5;var $left_result$0 = $OrdTree$fold$($x2, $x3, $x4, $x5, $x6, $x7);var $x9 = _$5;var $x10 = $x1.key_value;var $x8 = ($x9)($x10);var $x11 = $left_result$0;var $curr_result$1 = ($x8)($x11);var $x12 = _$0;var $x13 = _$1;var $x14 = $x1.right;var $x15 = _$3;var $x16 = $curr_result$1;var $x17 = _$5;_$0 = $x12;_$1 = $x13;_$2 = $x14;_$3 = $x15;_$4 = $x16;_$5 = $x17;/*TCO*/continue; break; } }return $x0; }}
const $OrdTree$fold = _$0 => _$1 => _$2 => _$3 => _$4 => _$5 => $OrdTree$fold$(_$0,_$1,_$2,_$3,_$4,_$5)

function $OrdTree$get$(_$0/*:Type*/,_$1/*:Type*/,_$2/*:Ord<null>*/,_$3/*:OrdTree<null><null>*/) {var $x1 = _$3;switch ($x1.$) { case "Leaf": { var $x0 = ($key$0 => {var $x2 = ({$: "None"});return $x2;}); break; } case "Node": { var $x3 = $x1.key_value;var $x0 = ($key$0 => {var $x6 = _$0;var $x7 = _$2;var $x8 = $key$0;var $x9 = $x3.fst;var $x5 = $Ord$compare$($x6, $x7, $x8, $x9);switch ($x5.$) { case "EQ": { var $x4 = ({$: "Some"});var $x10 = $x3.snd;$x4.value = $x10; break; } case "GT": { var $x12 = _$0;var $x13 = _$1;var $x14 = _$2;var $x15 = $x1.right;var $x11 = $OrdTree$get$($x12, $x13, $x14, $x15);var $x16 = $key$0;var $x4 = ($x11)($x16); break; } case "LT": { var $x18 = _$0;var $x19 = _$1;var $x20 = _$2;var $x21 = $x1.left;var $x17 = $OrdTree$get$($x18, $x19, $x20, $x21);var $x22 = $key$0;var $x4 = ($x17)($x22); break; } }return $x4;}); break; } }return $x0; }
const $OrdTree$get = _$0 => _$1 => _$2 => _$3 => $OrdTree$get$(_$0,_$1,_$2,_$3)

function $OrdTree$height$(_$0/*:Type*/,_$1/*:Type*/,_$2/*:OrdTree<null><null>*/) {var $x1 = _$2;switch ($x1.$) { case "Leaf": { var $x0 = ({$: "Zero"}); break; } case "Node": { var $x0 = ({$: "Succ"});var $x4 = _$0;var $x5 = _$1;var $x6 = $x1.left;var $x3 = $OrdTree$height$($x4, $x5, $x6);var $x8 = _$0;var $x9 = _$1;var $x10 = $x1.right;var $x7 = $OrdTree$height$($x8, $x9, $x10);var $x2 = $Nat$max$($x3, $x7);$x0.pred = $x2; break; } }return $x0; }
const $OrdTree$height = _$0 => _$1 => _$2 => $OrdTree$height$(_$0,_$1,_$2)

function $Pair$get_fst$(_$0/*:Type*/,_$1/*:Type*/,_$2/*:Pair<null><null>*/) {var $x1 = _$2;var $x0 = $x1.fst;return $x0; }
const $Pair$get_fst = _$0 => _$1 => _$2 => $Pair$get_fst$(_$0,_$1,_$2)

function $OrdTree$insert$go$(_$0/*:Type*/,_$1/*:Type*/,_$2/*:Ord<null>*/,_$3/*:OrdTree<null><null>*/) {var $x1 = _$3;switch ($x1.$) { case "Leaf": { var $x0 = ($kv$0 => {var $x2 = ({$: "Pair"});var $x3 = ({$: "Node"});var $x4 = $kv$0;$x3.key_value = $x4;var $x5 = ({$: "Zero"});$x3.balance = $x5;var $x6 = ({$: "Leaf"});$x3.left = $x6;var $x7 = ({$: "Leaf"});$x3.right = $x7;$x2.fst = $x3;var $x8 = ({$: "True"});$x2.snd = $x8;return $x2;}); break; } case "Node": { var $x9 = $x1.key_value;var $x0 = ($__8$0 => {var $x11 = $__8$0;var $x13 = _$0;var $x14 = _$2;var $x15 = $x11.fst;var $x16 = $x9.fst;var $x12 = $Ord$compare$($x13, $x14, $x15, $x16);switch ($x12.$) { case "EQ": { var $x10 = ({$: "Pair"});var $x17 = ({$: "Node"});var $x18 = ({$: "Pair"});var $x19 = $x11.fst;$x18.fst = $x19;var $x20 = $x11.snd;$x18.snd = $x20;$x17.key_value = $x18;var $x21 = $x1.balance;$x17.balance = $x21;var $x22 = $x1.left;$x17.left = $x22;var $x23 = $x1.right;$x17.right = $x23;$x10.fst = $x17;var $x24 = ({$: "False"});$x10.snd = $x24; break; } case "GT": { var $x26 = _$0;var $x27 = _$1;var $x28 = _$2;var $x29 = $x1.right;var $x25 = $OrdTree$insert$go$($x26, $x27, $x28, $x29);var $x30 = ({$: "Pair"});var $x31 = $x11.fst;$x30.fst = $x31;var $x32 = $x11.snd;$x30.snd = $x32;var $got$1 = ($x25)($x30);var $x33 = $got$1;var $x34 = $x33.snd;switch ($x34.$) { case "True": { var $x35 = $x1.balance;switch ($x35.$) { case "PlusOne": { var $x36 = _$0;var $x37 = _$1;var $x38 = ({$: "Node"});var $x39 = ({$: "Pair"});var $x40 = $x9.fst;$x39.fst = $x40;var $x41 = $x9.snd;$x39.snd = $x41;$x38.key_value = $x39;var $x42 = ({$: "PlusOne"});$x38.balance = $x42;var $x43 = $x1.left;$x38.left = $x43;var $x44 = $x33.fst;$x38.right = $x44;var $x10 = $OrdTree$Balance$rotate_left$($x36, $x37, $x38); break; } case "Zero": { var $x10 = ({$: "Pair"});var $x45 = ({$: "Node"});var $x46 = ({$: "Pair"});var $x47 = $x9.fst;$x46.fst = $x47;var $x48 = $x9.snd;$x46.snd = $x48;$x45.key_value = $x46;var $x49 = ({$: "PlusOne"});$x45.balance = $x49;var $x50 = $x1.left;$x45.left = $x50;var $x51 = $x33.fst;$x45.right = $x51;$x10.fst = $x45;var $x52 = ({$: "True"});$x10.snd = $x52; break; } case "MinusOne": { var $x10 = ({$: "Pair"});var $x53 = ({$: "Node"});var $x54 = ({$: "Pair"});var $x55 = $x9.fst;$x54.fst = $x55;var $x56 = $x9.snd;$x54.snd = $x56;$x53.key_value = $x54;var $x57 = ({$: "Zero"});$x53.balance = $x57;var $x58 = $x1.left;$x53.left = $x58;var $x59 = $x33.fst;$x53.right = $x59;$x10.fst = $x53;var $x60 = ({$: "False"});$x10.snd = $x60; break; } } break; } case "False": { var $x10 = ({$: "Pair"});var $x61 = ({$: "Node"});var $x62 = ({$: "Pair"});var $x63 = $x9.fst;$x62.fst = $x63;var $x64 = $x9.snd;$x62.snd = $x64;$x61.key_value = $x62;var $x65 = $x1.balance;$x61.balance = $x65;var $x66 = $x1.left;$x61.left = $x66;var $x67 = $x33.fst;$x61.right = $x67;$x10.fst = $x61;var $x68 = ({$: "False"});$x10.snd = $x68; break; } } break; } case "LT": { var $x70 = _$0;var $x71 = _$1;var $x72 = _$2;var $x73 = $x1.left;var $x69 = $OrdTree$insert$go$($x70, $x71, $x72, $x73);var $x74 = ({$: "Pair"});var $x75 = $x11.fst;$x74.fst = $x75;var $x76 = $x11.snd;$x74.snd = $x76;var $got$1 = ($x69)($x74);var $x77 = $got$1;var $x78 = $x77.snd;switch ($x78.$) { case "True": { var $x79 = $x1.balance;switch ($x79.$) { case "PlusOne": { var $x10 = ({$: "Pair"});var $x80 = ({$: "Node"});var $x81 = ({$: "Pair"});var $x82 = $x9.fst;$x81.fst = $x82;var $x83 = $x9.snd;$x81.snd = $x83;$x80.key_value = $x81;var $x84 = ({$: "Zero"});$x80.balance = $x84;var $x85 = $x77.fst;$x80.left = $x85;var $x86 = $x1.right;$x80.right = $x86;$x10.fst = $x80;var $x87 = ({$: "False"});$x10.snd = $x87; break; } case "Zero": { var $x10 = ({$: "Pair"});var $x88 = ({$: "Node"});var $x89 = ({$: "Pair"});var $x90 = $x9.fst;$x89.fst = $x90;var $x91 = $x9.snd;$x89.snd = $x91;$x88.key_value = $x89;var $x92 = ({$: "MinusOne"});$x88.balance = $x92;var $x93 = $x77.fst;$x88.left = $x93;var $x94 = $x1.right;$x88.right = $x94;$x10.fst = $x88;var $x95 = ({$: "True"});$x10.snd = $x95; break; } case "MinusOne": { var $x96 = _$0;var $x97 = _$1;var $x98 = ({$: "Node"});var $x99 = ({$: "Pair"});var $x100 = $x9.fst;$x99.fst = $x100;var $x101 = $x9.snd;$x99.snd = $x101;$x98.key_value = $x99;var $x102 = ({$: "MinusOne"});$x98.balance = $x102;var $x103 = $x77.fst;$x98.left = $x103;var $x104 = $x1.right;$x98.right = $x104;var $x10 = $OrdTree$Balance$rotate_right$($x96, $x97, $x98); break; } } break; } case "False": { var $x10 = ({$: "Pair"});var $x105 = ({$: "Node"});var $x106 = ({$: "Pair"});var $x107 = $x9.fst;$x106.fst = $x107;var $x108 = $x9.snd;$x106.snd = $x108;$x105.key_value = $x106;var $x109 = $x1.balance;$x105.balance = $x109;var $x110 = $x77.fst;$x105.left = $x110;var $x111 = $x1.right;$x105.right = $x111;$x10.fst = $x105;var $x112 = ({$: "False"});$x10.snd = $x112; break; } } break; } }return $x10;}); break; } }return $x0; }
const $OrdTree$insert$go = _$0 => _$1 => _$2 => _$3 => $OrdTree$insert$go$(_$0,_$1,_$2,_$3)

function $OrdTree$insert$(_$0/*:Type*/,_$1/*:Type*/,_$2/*:Ord<null>*/,_$3/*:OrdTree<null><null>*/,_$4/*:Pair<null><null>*/) {var $x2 = _$0;var $x3 = _$1;var $x1 = $OrdTree$($x2, $x3);var $x4 = $Bool;var $x7 = _$0;var $x8 = _$1;var $x9 = _$2;var $x10 = _$3;var $x6 = $OrdTree$insert$go$($x7, $x8, $x9, $x10);var $x11 = _$4;var $x5 = ($x6)($x11);var $x0 = $Pair$get_fst$($x1, $x4, $x5);return $x0; }
const $OrdTree$insert = _$0 => _$1 => _$2 => _$3 => _$4 => $OrdTree$insert$(_$0,_$1,_$2,_$3,_$4)

function $OrdTree$keys$(_$0/*:Type*/,_$1/*:Type*/,_$2/*:OrdTree<null><null>*/) {var $x1 = _$2;switch ($x1.$) { case "Leaf": { var $x0 = ({$: "Nil"}); break; } case "Node": { var $x2 = $x1.key_value;var $x3 = _$0;var $x4 = _$1;var $x5 = $x1.left;var $left_keys$0 = $OrdTree$keys$($x3, $x4, $x5);var $x6 = _$0;var $x7 = _$1;var $x8 = $x1.right;var $right_keys$1 = $OrdTree$keys$($x6, $x7, $x8);var $x9 = _$0;var $x10 = $left_keys$0;var $x11 = ({$: "Cons"});var $x12 = $x2.fst;$x11.head = $x12;var $x13 = $right_keys$1;$x11.tail = $x13;var $x0 = $List$append$($x9, $x10, $x11); break; } }return $x0; }
const $OrdTree$keys = _$0 => _$1 => _$2 => $OrdTree$keys$(_$0,_$1,_$2)

function $OrdTree$singleton$(_$0/*:Type*/,_$1/*:Type*/,_$2/*:Pair<null><null>*/) {var $x0 = ({$: "Node"});var $x1 = _$2;$x0.key_value = $x1;var $x2 = ({$: "Zero"});$x0.balance = $x2;var $x3 = ({$: "Leaf"});$x0.left = $x3;var $x4 = ({$: "Leaf"});$x0.right = $x4;return $x0; }
const $OrdTree$singleton = _$0 => _$1 => _$2 => $OrdTree$singleton$(_$0,_$1,_$2)

function $OrdTree$size$(_$0/*:Type*/,_$1/*:Type*/,_$2/*:OrdTree<null><null>*/) {var $x1 = _$2;switch ($x1.$) { case "Leaf": { var $x0 = ({$: "Zero"}); break; } case "Node": { var $x2 = _$0;var $x3 = _$1;var $x4 = $x1.left;var $left_size$0 = $OrdTree$size$($x2, $x3, $x4);var $x5 = _$0;var $x6 = _$1;var $x7 = $x1.right;var $right_size$1 = $OrdTree$size$($x5, $x6, $x7);var $x0 = ({$: "Succ"});var $x9 = $left_size$0;var $x10 = $right_size$1;var $x8 = $Nat$add$($x9, $x10);$x0.pred = $x8; break; } }return $x0; }
const $OrdTree$size = _$0 => _$1 => _$2 => $OrdTree$size$(_$0,_$1,_$2)

const $SETNICK$ = (() => {var $x0 = 101n;return $x0; })()
const $SETNICK = $SETNICK$

const $String$ = (() => {var $x1 = $Char;var $x0 = $List$($x1);return $x0; })()
const $String = $String$

function $String$compare$(_$0/*:String*/,_$1/*:String*/) {while(1){var $x1 = _$0;switch ($x1.$) { case "Cons": { var $x2 = _$1;switch ($x2.$) { case "Cons": { var $x4 = $Char;var $x5 = $Char$Ord;var $x6 = $x1.head;var $x7 = $x2.head;var $x3 = $Ord$compare$($x4, $x5, $x6, $x7);switch ($x3.$) { case "LT": { var $x0 = ({$: "LT"}); break; } case "EQ": { var $x8 = $x1.tail;var $x9 = $x2.tail;_$0 = $x8;_$1 = $x9;/*TCO*/continue; break; } case "GT": { var $x0 = ({$: "GT"}); break; } } break; } case "Nil": { var $x0 = ({$: "GT"}); break; } } break; } case "Nil": { var $x10 = _$1;switch ($x10.$) { case "Cons": { var $x0 = ({$: "LT"}); break; } case "Nil": { var $x0 = ({$: "EQ"}); break; } } break; } }return $x0; }}
const $String$compare = _$0 => _$1 => $String$compare$(_$0,_$1)

const $String$Ord$ = (() => {var $x0 = ({$: "Ord"});var $x1 = $String$compare;$x0.compare = $x1;return $x0; })()
const $String$Ord = $String$Ord$

function $String$eq$(_$0/*:String*/,_$1/*:String*/) {while(1){var $x1 = _$0;switch ($x1.$) { case "Cons": { var $x2 = _$1;switch ($x2.$) { case "Cons": { var $x4 = $x1.head;var $x5 = $x2.head;var $x3 = $Char$eq$($x4, $x5);switch ($x3.$) { case "True": { var $x6 = $x1.tail;var $x7 = $x2.tail;_$0 = $x6;_$1 = $x7;/*TCO*/continue; break; } case "False": { var $x0 = ({$: "False"}); break; } } break; } case "Nil": { var $x0 = ({$: "False"}); break; } } break; } case "Nil": { var $x8 = _$1;switch ($x8.$) { case "Cons": { var $x0 = ({$: "False"}); break; } case "Nil": { var $x0 = ({$: "True"}); break; } } break; } }return $x0; }}
const $String$eq = _$0 => _$1 => $String$eq$(_$0,_$1)

const $U64$Ord$ = (() => {var $x0 = ({$: "Ord"});var $x1 = $U64$compare;$x0.compare = $x1;return $x0; })()
const $U64$Ord = $U64$Ord$

function $U64$add$(_$0/*:BigInt*/,_$1/*:BigInt*/) {var $x1 = _$0;var $x2 = _$1;var $x0 = BigInt.asUintN(64, $x1 + $x2);return $x0; }
const $U64$add = _$0 => _$1 => $U64$add$(_$0,_$1)

function $U64$div$(_$0/*:BigInt*/,_$1/*:BigInt*/) {var $x1 = _$0;var $x2 = _$1;var $x0 = BigInt.asUintN(64, $x1 / $x2);return $x0; }
const $U64$div = _$0 => _$1 => $U64$div$(_$0,_$1)

function $U64$from_bool$(_$0/*:Bool*/) {var $x1 = _$0;switch ($x1.$) { case "False": { var $x0 = 0n; break; } case "True": { var $x0 = 1n; break; } }return $x0; }
const $U64$from_bool = _$0 => $U64$from_bool$(_$0)

function $U64$gt$(_$0/*:BigInt*/,_$1/*:BigInt*/) {var $x2 = _$0;var $x3 = _$1;var $x1 = BigInt.asUintN(64, $x2 > $x3);var $x0 = $U64$to_bool$($x1);return $x0; }
const $U64$gt = _$0 => _$1 => $U64$gt$(_$0,_$1)

function $U64$lt$(_$0/*:BigInt*/,_$1/*:BigInt*/) {var $x2 = _$0;var $x3 = _$1;var $x1 = BigInt.asUintN(64, $x2 < $x3);var $x0 = $U64$to_bool$($x1);return $x0; }
const $U64$lt = _$0 => _$1 => $U64$lt$(_$0,_$1)

function $U64$lte$(_$0/*:BigInt*/,_$1/*:BigInt*/) {var $x2 = _$0;var $x3 = _$1;var $x1 = BigInt.asUintN(64, $x2 <= $x3);var $x0 = $U64$to_bool$($x1);return $x0; }
const $U64$lte = _$0 => _$1 => $U64$lte$(_$0,_$1)

function $U64$max$(_$0/*:BigInt*/,_$1/*:BigInt*/) {var $x3 = _$0;var $x4 = _$1;var $x2 = BigInt.asUintN(64, $x3 >= $x4);var $x1 = $U64$to_bool$($x2);switch ($x1.$) { case "True": { var $x0 = _$0; break; } case "False": { var $x0 = _$1; break; } }return $x0; }
const $U64$max = _$0 => _$1 => $U64$max$(_$0,_$1)

function $U64$min$(_$0/*:BigInt*/,_$1/*:BigInt*/) {var $x3 = _$0;var $x4 = _$1;var $x2 = BigInt.asUintN(64, $x3 <= $x4);var $x1 = $U64$to_bool$($x2);switch ($x1.$) { case "True": { var $x0 = _$0; break; } case "False": { var $x0 = _$1; break; } }return $x0; }
const $U64$min = _$0 => _$1 => $U64$min$(_$0,_$1)

function $U64$mod$(_$0/*:BigInt*/,_$1/*:BigInt*/) {var $x1 = _$0;var $x2 = _$1;var $x0 = BigInt.asUintN(64, $x1 % $x2);return $x0; }
const $U64$mod = _$0 => _$1 => $U64$mod$(_$0,_$1)

function $U64$mul$(_$0/*:BigInt*/,_$1/*:BigInt*/) {var $x1 = _$0;var $x2 = _$1;var $x0 = BigInt.asUintN(64, $x1 * $x2);return $x0; }
const $U64$mul = _$0 => _$1 => $U64$mul$(_$0,_$1)

function $U64$neq$(_$0/*:BigInt*/,_$1/*:BigInt*/) {var $x2 = _$0;var $x3 = _$1;var $x1 = BigInt.asUintN(64, $x2 !== $x3);var $x0 = $U64$to_bool$($x1);return $x0; }
const $U64$neq = _$0 => _$1 => $U64$neq$(_$0,_$1)

function $U64$sub$(_$0/*:BigInt*/,_$1/*:BigInt*/) {var $x1 = _$0;var $x2 = _$1;var $x0 = BigInt.asUintN(64, $x1 - $x2);return $x0; }
const $U64$sub = _$0 => _$1 => $U64$sub$(_$0,_$1)

function $U64$to_bits$(_$0/*:BigInt*/) {var $x1 = _$0;if ($x1 === 0n) { var $x0 = ({$: "E"}); } else { var $x3 = $x1;var $x4 = 1n;var $x2 = BigInt.asUintN(64, $x3 - $x4);if ($x2 === 0n) { var $x0 = ({$: "I"});var $x5 = ({$: "E"});$x0.tail = $x5; } else { var $x7 = 2n;var $x9 = $x2;var $x10 = 1n;var $x8 = BigInt.asUintN(64, $x9 - $x10);var $x6 = BigInt.asUintN(64, $x7 + $x8);var $x11 = 2n;var $quotient$0 = $U64$div$($x6, $x11);var $x13 = 2n;var $x15 = $x2;var $x16 = 1n;var $x14 = BigInt.asUintN(64, $x15 - $x16);var $x12 = BigInt.asUintN(64, $x13 + $x14);var $x17 = 2n;var $remainder$1 = $U64$mod$($x12, $x17);var $x19 = $remainder$1;var $x18 = $U64$to_bool$($x19);switch ($x18.$) { case "True": { var $x0 = ({$: "I"});var $x21 = $quotient$0;var $x20 = $U64$to_bits$($x21);$x0.tail = $x20; break; } case "False": { var $x0 = ({$: "O"});var $x23 = $quotient$0;var $x22 = $U64$to_bits$($x23);$x0.tail = $x22; break; } } } }return $x0; }
const $U64$to_bits = _$0 => $U64$to_bits$(_$0)

const $UG$Collision$Collidable$ = (() => {var $x0 = /*{$:'Hard'} | {$:'TakesEffects'} | {$:'Untouchable'}*/null;return $x0; })()
const $UG$Collision$Collidable = $UG$Collision$Collidable$

const $V2$ = (() => {var $x0 = /*{$:'V2', x: Number, y: Number}*/null;return $x0; })()
const $V2 = $V2$

function $V2$div_scalar$(_$0/*:V2*/,_$1/*:Number*/) {var $x1 = _$0;var $x3 = _$1;var $x2 = $F64$is_zero$($x3);switch ($x2.$) { case "True": { var $x0 = ({$: "V2"});var $x4 = 0.0;$x0.x = $x4;var $x5 = 0.0;$x0.y = $x5; break; } case "False": { var $x0 = ({$: "V2"});var $x7 = $x1.x;var $x8 = _$1;var $x6 = $F64$div$($x7, $x8);$x0.x = $x6;var $x10 = $x1.y;var $x11 = _$1;var $x9 = $F64$div$($x10, $x11);$x0.y = $x9; break; } }return $x0; }
const $V2$div_scalar = _$0 => _$1 => $V2$div_scalar$(_$0,_$1)

function $V2$length$(_$0/*:V2*/) {var $x1 = _$0;var $x4 = $x1.x;var $x5 = $x1.x;var $x3 = $F64$mul$($x4, $x5);var $x7 = $x1.y;var $x8 = $x1.y;var $x6 = $F64$mul$($x7, $x8);var $x2 = $F64$add$($x3, $x6);var $x0 = $F64$sqrt$($x2);return $x0; }
const $V2$length = _$0 => $V2$length$(_$0)

function $V2$is_zero$(_$0/*:V2*/) {var $x1 = _$0;var $x3 = $x1.x;var $x2 = $F64$is_zero$($x3);var $x5 = $x1.y;var $x4 = $F64$is_zero$($x5);var $x0 = $Bool$and$($x2, $x4);return $x0; }
const $V2$is_zero = _$0 => $V2$is_zero$(_$0)

function $V2$normalize$(_$0/*:V2*/) {var $x2 = _$0;var $x1 = $V2$is_zero$($x2);switch ($x1.$) { case "True": { var $x0 = _$0; break; } case "False": { var $x3 = _$0;var $x5 = _$0;var $x4 = $V2$length$($x5);var $x0 = $V2$div_scalar$($x3, $x4); break; } }return $x0; }
const $V2$normalize = _$0 => $V2$normalize$(_$0)

function $V2$sub$(_$0/*:V2*/,_$1/*:V2*/) {var $x1 = _$0;var $x2 = _$1;var $x0 = ({$: "V2"});var $x4 = $x1.x;var $x5 = $x2.x;var $x3 = $F64$sub$($x4, $x5);$x0.x = $x3;var $x7 = $x1.y;var $x8 = $x2.y;var $x6 = $F64$sub$($x7, $x8);$x0.y = $x6;return $x0; }
const $V2$sub = _$0 => _$1 => $V2$sub$(_$0,_$1)

function $UG$Shape$segments$(_$0/*:List<V2>*/) {var $x1 = _$0;switch ($x1.$) { case "Cons": { var $x2 = null;var $x3 = $x1.tail;var $x4 = ({$: "Cons"});var $x5 = $x1.head;$x4.head = $x5;var $x6 = ({$: "Nil"});$x4.tail = $x6;var $next_points$0 = $List$append$($x2, $x3, $x4);var $x7 = null;var $x8 = null;var $x9 = ({$: "Cons"});var $x10 = $x1.head;$x9.head = $x10;var $x11 = $x1.tail;$x9.tail = $x11;var $x12 = $next_points$0;var $x0 = $List$zip$($x7, $x8, $x9, $x12); break; } case "Nil": { var $x0 = ({$: "Nil"}); break; } }return $x0; }
const $UG$Shape$segments = _$0 => $UG$Shape$segments$(_$0)

function $V2$dot$(_$0/*:V2*/,_$1/*:V2*/) {var $x1 = _$0;var $x2 = _$1;var $x4 = $x1.x;var $x5 = $x2.x;var $x3 = $F64$mul$($x4, $x5);var $x7 = $x1.y;var $x8 = $x2.y;var $x6 = $F64$mul$($x7, $x8);var $x0 = $F64$add$($x3, $x6);return $x0; }
const $V2$dot = _$0 => _$1 => $V2$dot$(_$0,_$1)

function $V2$point_to_segment_distance$(_$0/*:V2*/,_$1/*:V2*/,_$2/*:V2*/) {var $x1 = _$0;var $x2 = _$1;var $x3 = _$2;var $ab$0 = ({$: "V2"});var $x5 = $x3.x;var $x6 = $x2.x;var $x4 = $F64$sub$($x5, $x6);$ab$0.x = $x4;var $x8 = $x3.y;var $x9 = $x2.y;var $x7 = $F64$sub$($x8, $x9);$ab$0.y = $x7;var $ap$1 = ({$: "V2"});var $x11 = $x1.x;var $x12 = $x2.x;var $x10 = $F64$sub$($x11, $x12);$ap$1.x = $x10;var $x14 = $x1.y;var $x15 = $x2.y;var $x13 = $F64$sub$($x14, $x15);$ap$1.y = $x13;var $x17 = $ap$1;var $x18 = $ab$0;var $x16 = $V2$dot$($x17, $x18);var $x20 = $ab$0;var $x21 = $ab$0;var $x19 = $V2$dot$($x20, $x21);var $projection$2 = $F64$div$($x16, $x19);var $x23 = $projection$2;var $x24 = 0.0;var $x22 = $F64$lt$($x23, $x24);switch ($x22.$) { case "True": { var $x0 = ({$: "V2"});var $x25 = $x2.x;$x0.x = $x25;var $x26 = $x2.y;$x0.y = $x26; break; } case "False": { var $x28 = $projection$2;var $x29 = 1.0;var $x27 = $F64$gt$($x28, $x29);switch ($x27.$) { case "True": { var $x0 = ({$: "V2"});var $x30 = $x3.x;$x0.x = $x30;var $x31 = $x3.y;$x0.y = $x31; break; } case "False": { var $x0 = ({$: "V2"});var $x33 = $x2.x;var $x36 = $x3.x;var $x37 = $x2.x;var $x35 = $F64$sub$($x36, $x37);var $x38 = $projection$2;var $x34 = $F64$mul$($x35, $x38);var $x32 = $F64$add$($x33, $x34);$x0.x = $x32;var $x40 = $x2.y;var $x43 = $x3.y;var $x44 = $x2.y;var $x42 = $F64$sub$($x43, $x44);var $x45 = $projection$2;var $x41 = $F64$mul$($x42, $x45);var $x39 = $F64$add$($x40, $x41);$x0.y = $x39; break; } } break; } }return $x0; }
const $V2$point_to_segment_distance = _$0 => _$1 => _$2 => $V2$point_to_segment_distance$(_$0,_$1,_$2)

function $UG$Shape$closest_point_on_polygon$go$(_$0/*:V2*/,_$1/*:Pair<V2><V2>*/) {var $x1 = _$1;var $x2 = _$0;var $x3 = $x1.fst;var $x4 = $x1.snd;var $x0 = $V2$point_to_segment_distance$($x2, $x3, $x4);return $x0; }
const $UG$Shape$closest_point_on_polygon$go = _$0 => _$1 => $UG$Shape$closest_point_on_polygon$go$(_$0,_$1)

function $UG$Shape$closest_point_on_polygon$(_$0/*:V2*/,_$1/*:List<V2>*/) {var $x1 = _$1;var $segments$0 = $UG$Shape$segments$($x1);var $x3 = $V2;var $x4 = $V2;var $x2 = $Pair$($x3, $x4);var $x5 = $V2;var $x6 = $segments$0;var $x8 = $UG$Shape$closest_point_on_polygon$go;var $x9 = _$0;var $x7 = ($x8)($x9);var $points$1 = $List$map$($x2, $x5, $x6, $x7);var $x10 = $V2;var $x11 = $points$1;var $x12 = ($p1$2 => $p2$3 => {var $x16 = _$0;var $x17 = $p1$2;var $x15 = $V2$sub$($x16, $x17);var $x14 = $V2$length$($x15);var $x20 = _$0;var $x21 = $p2$3;var $x19 = $V2$sub$($x20, $x21);var $x18 = $V2$length$($x19);var $x13 = $F64$lt$($x14, $x18);return $x13;});var $sorted$2 = $List$sort$($x10, $x11, $x12);var $x23 = $V2;var $x24 = $sorted$2;var $x22 = $List$head$($x23, $x24);switch ($x22.$) { case "None": { var $x0 = ({$: "V2"});var $x25 = 10000.0;$x0.x = $x25;var $x26 = 10000.0;$x0.y = $x26; break; } case "Some": { var $x0 = $x22.value; break; } }return $x0; }
const $UG$Shape$closest_point_on_polygon = _$0 => _$1 => $UG$Shape$closest_point_on_polygon$(_$0,_$1)

function $UG$Shape$abs_vertices$go$(_$0/*:V2*/,_$1/*:V2*/) {var $x1 = _$0;var $x2 = _$1;var $x3 = $x1.x;var $x4 = $x2.x;var $x$0 = $F64$add$($x3, $x4);var $x5 = $x1.y;var $x6 = $x2.y;var $y$1 = $F64$add$($x5, $x6);var $x0 = ({$: "V2"});var $x7 = $x$0;$x0.x = $x7;var $x8 = $y$1;$x0.y = $x8;return $x0; }
const $UG$Shape$abs_vertices$go = _$0 => _$1 => $UG$Shape$abs_vertices$go$(_$0,_$1)

const $UG$Shape$ = (() => {var $x0 = /*{$:'Circle', center: V2, radius: Number} | {$:'Polygon', center: V2, vertices: List<V2>}*/null;return $x0; })()
const $UG$Shape = $UG$Shape$

function $UG$Shape$abs_vertices$(_$0/*:UG/Shape*/) {var $x1 = _$0;switch ($x1.$) { case "Circle": { var $x0 = ({$: "Nil"}); break; } case "Polygon": { var $x2 = $V2;var $x3 = $V2;var $x4 = $x1.vertices;var $x6 = $UG$Shape$abs_vertices$go;var $x7 = $x1.center;var $x5 = ($x6)($x7);var $x0 = $List$map$($x2, $x3, $x4, $x5); break; } }return $x0; }
const $UG$Shape$abs_vertices = _$0 => $UG$Shape$abs_vertices$(_$0)

function $V2$new$(_$0/*:Number*/,_$1/*:Number*/) {var $x0 = ({$: "V2"});var $x1 = _$0;$x0.x = $x1;var $x2 = _$1;$x0.y = $x2;return $x0; }
const $V2$new = _$0 => _$1 => $V2$new$(_$0,_$1)

function $closest_point_polygon_polygon$(_$0/*:List<V2>*/,_$1/*:List<V2>*/) {var $x1 = 10000.0;var $x2 = 10000.0;var $x0 = $V2$new$($x1, $x2);return $x0; }
const $closest_point_polygon_polygon = _$0 => _$1 => $closest_point_polygon_polygon$(_$0,_$1)

function $UG$Collision$calculate_collision_normal$(_$0/*:UG/Shape*/,_$1/*:UG/Shape*/) {var $x1 = _$0;switch ($x1.$) { case "Circle": { var $x2 = _$1;switch ($x2.$) { case "Circle": { var $x4 = $x1.center;var $x5 = $x2.center;var $x3 = $V2$sub$($x4, $x5);var $x0 = $V2$normalize$($x3); break; } case "Polygon": { var $x7 = $x1.center;var $x9 = $x1.center;var $x11 = ({$: "Polygon"});var $x12 = $x2.center;$x11.center = $x12;var $x13 = $x2.vertices;$x11.vertices = $x13;var $x10 = $UG$Shape$abs_vertices$($x11);var $x8 = $UG$Shape$closest_point_on_polygon$($x9, $x10);var $x6 = $V2$sub$($x7, $x8);var $x0 = $V2$normalize$($x6); break; } } break; } case "Polygon": { var $x14 = _$1;switch ($x14.$) { case "Circle": { var $x17 = $x14.center;var $x19 = ({$: "Polygon"});var $x20 = $x1.center;$x19.center = $x20;var $x21 = $x1.vertices;$x19.vertices = $x21;var $x18 = $UG$Shape$abs_vertices$($x19);var $x16 = $UG$Shape$closest_point_on_polygon$($x17, $x18);var $x22 = $x1.center;var $x15 = $V2$sub$($x16, $x22);var $x0 = $V2$normalize$($x15); break; } case "Polygon": { var $x25 = ({$: "Polygon"});var $x26 = $x1.center;$x25.center = $x26;var $x27 = $x1.vertices;$x25.vertices = $x27;var $x24 = $UG$Shape$abs_vertices$($x25);var $x29 = ({$: "Polygon"});var $x30 = $x14.center;$x29.center = $x30;var $x31 = $x14.vertices;$x29.vertices = $x31;var $x28 = $UG$Shape$abs_vertices$($x29);var $x23 = $closest_point_polygon_polygon$($x24, $x28);var $x0 = $V2$normalize$($x23); break; } } break; } }return $x0; }
const $UG$Collision$calculate_collision_normal = _$0 => _$1 => $UG$Collision$calculate_collision_normal$(_$0,_$1)

function $UG$Shape$get_center$(_$0/*:UG/Shape*/) {var $x1 = _$0;switch ($x1.$) { case "Circle": { var $x0 = $x1.center; break; } case "Polygon": { var $x0 = $x1.center; break; } }return $x0; }
const $UG$Shape$get_center = _$0 => $UG$Shape$get_center$(_$0)

function $V2$add$(_$0/*:V2*/,_$1/*:V2*/) {var $x1 = _$0;var $x2 = _$1;var $x0 = ({$: "V2"});var $x4 = $x1.x;var $x5 = $x2.x;var $x3 = $F64$add$($x4, $x5);$x0.x = $x3;var $x7 = $x1.y;var $x8 = $x2.y;var $x6 = $F64$add$($x7, $x8);$x0.y = $x6;return $x0; }
const $V2$add = _$0 => _$1 => $V2$add$(_$0,_$1)

function $UG$Shape$move$(_$0/*:UG/Shape*/,_$1/*:V2*/) {var $x1 = _$0;switch ($x1.$) { case "Circle": { var $x0 = ({$: "Circle"});var $x3 = $x1.center;var $x4 = _$1;var $x2 = $V2$add$($x3, $x4);$x0.center = $x2;var $x5 = $x1.radius;$x0.radius = $x5; break; } case "Polygon": { var $x0 = ({$: "Polygon"});var $x7 = $x1.center;var $x8 = _$1;var $x6 = $V2$add$($x7, $x8);$x0.center = $x6;var $x9 = $x1.vertices;$x0.vertices = $x9; break; } }return $x0; }
const $UG$Shape$move = _$0 => _$1 => $UG$Shape$move$(_$0,_$1)

function $V2$sqr_dist$(_$0/*:V2*/,_$1/*:V2*/) {var $x1 = _$0;var $x2 = _$1;var $x3 = $x2.x;var $x4 = $x1.x;var $dx$0 = $F64$sub$($x3, $x4);var $x5 = $x2.y;var $x6 = $x1.y;var $dy$1 = $F64$sub$($x5, $x6);var $x7 = $dx$0;var $x8 = $dx$0;var $dx2$2 = $F64$mul$($x7, $x8);var $x9 = $dy$1;var $x10 = $dy$1;var $dy2$3 = $F64$mul$($x9, $x10);var $x11 = $dx2$2;var $x12 = $dy2$3;var $x0 = $F64$add$($x11, $x12);return $x0; }
const $V2$sqr_dist = _$0 => _$1 => $V2$sqr_dist$(_$0,_$1)

function $V2$dist$(_$0/*:V2*/,_$1/*:V2*/) {var $x2 = _$0;var $x3 = _$1;var $x1 = $V2$sqr_dist$($x2, $x3);var $x0 = $F64$sqrt$($x1);return $x0; }
const $V2$dist = _$0 => _$1 => $V2$dist$(_$0,_$1)

function $V2$x$(_$0/*:V2*/) {var $x1 = _$0;var $x0 = $x1.x;return $x0; }
const $V2$x = _$0 => $V2$x$(_$0)

function $V2$y$(_$0/*:V2*/) {var $x1 = _$0;var $x0 = $x1.y;return $x0; }
const $V2$y = _$0 => $V2$y$(_$0)

function $is_right_side$(_$0/*:V2*/,_$1/*:V2*/,_$2/*:V2*/) {var $x4 = _$1;var $x3 = $V2$y$($x4);var $x6 = _$0;var $x5 = $V2$y$($x6);var $x2 = $F64$gt$($x3, $x5);var $x9 = _$2;var $x8 = $V2$y$($x9);var $x11 = _$0;var $x10 = $V2$y$($x11);var $x7 = $F64$gt$($x8, $x10);var $x1 = $Bool$and$($x2, $x7);switch ($x1.$) { case "True": { var $x0 = ({$: "False"}); break; } case "False": { var $x13 = _$2;var $x12 = $V2$x$($x13);var $x15 = _$1;var $x14 = $V2$x$($x15);var $dx$0 = $F64$sub$($x12, $x14);var $x17 = _$2;var $x16 = $V2$y$($x17);var $x19 = _$1;var $x18 = $V2$y$($x19);var $dy$1 = $F64$sub$($x16, $x18);var $x22 = _$0;var $x21 = $V2$y$($x22);var $x24 = _$1;var $x23 = $V2$y$($x24);var $x20 = $F64$sub$($x21, $x23);var $x25 = $dy$1;var $t$2 = $F64$div$($x20, $x25);var $x27 = _$1;var $x26 = $V2$x$($x27);var $x29 = $t$2;var $x30 = $dx$0;var $x28 = $F64$mul$($x29, $x30);var $intersect_x$3 = $F64$add$($x26, $x28);var $x32 = _$0;var $x31 = $V2$x$($x32);var $x33 = $intersect_x$3;var $x0 = $F64$lt$($x31, $x33); break; } }return $x0; }
const $is_right_side = _$0 => _$1 => _$2 => $is_right_side$(_$0,_$1,_$2)

function $process_edge$(_$0/*:V2*/,_$1/*:Bool*/,_$2/*:Pair<V2><V2>*/) {var $x1 = _$2;var $x3 = _$0;var $x4 = $x1.fst;var $x5 = $x1.snd;var $x2 = $is_right_side$($x3, $x4, $x5);switch ($x2.$) { case "True": { var $x6 = _$1;var $x0 = $Bool$not$($x6); break; } case "False": { var $x0 = _$1; break; } }return $x0; }
const $process_edge = _$0 => _$1 => _$2 => $process_edge$(_$0,_$1,_$2)

function $point_in_polygon$go$(_$0/*:V2*/,_$1/*:Bool*/,_$2/*:List<V2>*/) {while(1){var $x1 = _$2;switch ($x1.$) { case "Cons": { var $x2 = $x1.tail;switch ($x2.$) { case "Cons": { var $x3 = _$0;var $x5 = _$0;var $x6 = _$1;var $x7 = ({$: "Pair"});var $x8 = $x1.head;$x7.fst = $x8;var $x9 = $x2.head;$x7.snd = $x9;var $x4 = $process_edge$($x5, $x6, $x7);var $x10 = ({$: "Cons"});var $x11 = $x2.head;$x10.head = $x11;var $x12 = $x2.tail;$x10.tail = $x12;_$0 = $x3;_$1 = $x4;_$2 = $x10;/*TCO*/continue; break; } case "Nil": { var $x0 = _$1; break; } } break; } case "Nil": { var $x0 = _$1; break; } }return $x0; }}
const $point_in_polygon$go = _$0 => _$1 => _$2 => $point_in_polygon$go$(_$0,_$1,_$2)

function $UG$Shape$point_in_polygon$(_$0/*:V2*/,_$1/*:List<V2>*/) {var $x1 = _$1;switch ($x1.$) { case "Cons": { var $x2 = _$0;var $x3 = ({$: "False"});var $x5 = $V2;var $x6 = ({$: "Cons"});var $x7 = $x1.head;$x6.head = $x7;var $x8 = $x1.tail;$x6.tail = $x8;var $x9 = ({$: "Cons"});var $x10 = $x1.head;$x9.head = $x10;var $x11 = ({$: "Nil"});$x9.tail = $x11;var $x4 = $List$append$($x5, $x6, $x9);var $x0 = $point_in_polygon$go$($x2, $x3, $x4); break; } case "Nil": { var $x0 = ({$: "False"}); break; } }return $x0; }
const $UG$Shape$point_in_polygon = _$0 => _$1 => $UG$Shape$point_in_polygon$(_$0,_$1)

function $UG$Shape$any_vertex_inside$(_$0/*:List<V2>*/,_$1/*:List<V2>*/) {var $x1 = _$0;switch ($x1.$) { case "Cons": { var $x3 = $x1.head;var $x4 = _$1;var $x2 = $UG$Shape$point_in_polygon$($x3, $x4);var $x6 = $x1.tail;var $x7 = _$1;var $x5 = $UG$Shape$any_vertex_inside$($x6, $x7);var $x0 = $Bool$or$($x2, $x5); break; } case "Nil": { var $x0 = ({$: "False"}); break; } }return $x0; }
const $UG$Shape$any_vertex_inside = _$0 => _$1 => $UG$Shape$any_vertex_inside$(_$0,_$1)

function $UG$Shape$line_line_intersection$(_$0/*:V2*/,_$1/*:V2*/,_$2/*:V2*/,_$3/*:V2*/) {var $x1 = _$0;var $x2 = _$1;var $x3 = _$2;var $x4 = _$3;var $x5 = $x2.x;var $x6 = $x1.x;var $dx1$0 = $F64$sub$($x5, $x6);var $x7 = $x2.y;var $x8 = $x1.y;var $dy1$1 = $F64$sub$($x7, $x8);var $x9 = $x4.x;var $x10 = $x3.x;var $dx2$2 = $F64$sub$($x9, $x10);var $x11 = $x4.y;var $x12 = $x3.y;var $dy2$3 = $F64$sub$($x11, $x12);var $x14 = $dx1$0;var $x15 = $dy2$3;var $x13 = $F64$mul$($x14, $x15);var $x17 = $dx2$2;var $x18 = $dy1$1;var $x16 = $F64$mul$($x17, $x18);var $det$4 = $F64$sub$($x13, $x16);var $x20 = $det$4;var $x21 = 0.0;var $x19 = $F64$eq$($x20, $x21);switch ($x19.$) { case "True": { var $x0 = ({$: "False"}); break; } case "False": { var $x22 = $x3.x;var $x23 = $x1.x;var $dx3$5 = $F64$sub$($x22, $x23);var $x24 = $x3.y;var $x25 = $x1.y;var $dy3$6 = $F64$sub$($x24, $x25);var $x28 = $dy2$3;var $x29 = $dx3$5;var $x27 = $F64$mul$($x28, $x29);var $x32 = $x3.x;var $x33 = $x4.x;var $x31 = $F64$sub$($x32, $x33);var $x34 = $dy3$6;var $x30 = $F64$mul$($x31, $x34);var $x26 = $F64$add$($x27, $x30);var $x35 = $det$4;var $lambda$7 = $F64$div$($x26, $x35);var $x38 = $dy1$1;var $x39 = $dx3$5;var $x37 = $F64$mul$($x38, $x39);var $x42 = $x1.x;var $x43 = $x2.x;var $x41 = $F64$sub$($x42, $x43);var $x44 = $dy3$6;var $x40 = $F64$mul$($x41, $x44);var $x36 = $F64$add$($x37, $x40);var $x45 = $det$4;var $gamma$8 = $F64$div$($x36, $x45);var $x47 = $lambda$7;var $x48 = 0.0;var $x46 = $F64$gte$($x47, $x48);var $x50 = $lambda$7;var $x51 = 1.0;var $x49 = $F64$lte$($x50, $x51);var $valid_lambda$9 = $Bool$and$($x46, $x49);var $x53 = $gamma$8;var $x54 = 0.0;var $x52 = $F64$gte$($x53, $x54);var $x56 = $gamma$8;var $x57 = 1.0;var $x55 = $F64$lte$($x56, $x57);var $valid_gamma$10 = $Bool$and$($x52, $x55);var $x58 = $valid_lambda$9;var $x59 = $valid_gamma$10;var $x0 = $Bool$and$($x58, $x59); break; } }return $x0; }
const $UG$Shape$line_line_intersection = _$0 => _$1 => _$2 => _$3 => $UG$Shape$line_line_intersection$(_$0,_$1,_$2,_$3)

function $UG$Shape$check_against_all$(_$0/*:V2*/,_$1/*:V2*/,_$2/*:List<V2>*/,_$3/*:List<V2>*/) {var $x1 = _$2;switch ($x1.$) { case "Cons": { var $x2 = $x1.tail;switch ($x2.$) { case "Cons": { var $x4 = _$0;var $x5 = _$1;var $x6 = $x1.head;var $x7 = $x2.head;var $x3 = $UG$Shape$line_line_intersection$($x4, $x5, $x6, $x7);var $x9 = _$0;var $x10 = _$1;var $x11 = ({$: "Cons"});var $x12 = $x2.head;$x11.head = $x12;var $x13 = $x2.tail;$x11.tail = $x13;var $x14 = _$3;var $x8 = $UG$Shape$check_against_all$($x9, $x10, $x11, $x14);var $x0 = $Bool$or$($x3, $x8); break; } case "Nil": { var $x0 = ({$: "False"}); break; } } break; } case "Nil": { var $x0 = ({$: "False"}); break; } }return $x0; }
const $UG$Shape$check_against_all = _$0 => _$1 => _$2 => _$3 => $UG$Shape$check_against_all$(_$0,_$1,_$2,_$3)

function $UG$Shape$any_edges_intersect$(_$0/*:List<V2>*/,_$1/*:List<V2>*/) {var $x1 = _$0;switch ($x1.$) { case "Cons": { var $x2 = $x1.tail;switch ($x2.$) { case "Cons": { var $x4 = $x1.head;var $x5 = $x2.head;var $x6 = _$1;var $x7 = _$1;var $x3 = $UG$Shape$check_against_all$($x4, $x5, $x6, $x7);var $x9 = ({$: "Cons"});var $x10 = $x2.head;$x9.head = $x10;var $x11 = $x2.tail;$x9.tail = $x11;var $x12 = _$1;var $x8 = $UG$Shape$any_edges_intersect$($x9, $x12);var $x0 = $Bool$or$($x3, $x8); break; } case "Nil": { var $x0 = ({$: "False"}); break; } } break; } case "Nil": { var $x0 = ({$: "False"}); break; } }return $x0; }
const $UG$Shape$any_edges_intersect = _$0 => _$1 => $UG$Shape$any_edges_intersect$(_$0,_$1)

function $UG$Shape$collide$(_$0/*:UG/Shape*/,_$1/*:UG/Shape*/) {var $x1 = _$0;switch ($x1.$) { case "Circle": { var $x2 = _$1;switch ($x2.$) { case "Circle": { var $x3 = $x1.center;var $x4 = $x2.center;var $center_dist$0 = $V2$dist$($x3, $x4);var $x5 = $x1.radius;var $x6 = $x2.radius;var $rsum$1 = $F64$add$($x5, $x6);var $x7 = $center_dist$0;var $x8 = $rsum$1;var $x0 = $F64$lte$($x7, $x8); break; } case "Polygon": { var $x9 = $x1.center;var $x11 = ({$: "Polygon"});var $x12 = $x2.center;$x11.center = $x12;var $x13 = $x2.vertices;$x11.vertices = $x13;var $x10 = $UG$Shape$abs_vertices$($x11);var $closest$0 = $UG$Shape$closest_point_on_polygon$($x9, $x10);var $x14 = $x1.center;var $x15 = $closest$0;var $dst$1 = $V2$dist$($x14, $x15);var $x16 = $dst$1;var $x17 = $x1.radius;var $x0 = $F64$lte$($x16, $x17); break; } } break; } case "Polygon": { var $x18 = _$1;switch ($x18.$) { case "Circle": { var $x19 = $x18.center;var $x21 = ({$: "Polygon"});var $x22 = $x1.center;$x21.center = $x22;var $x23 = $x1.vertices;$x21.vertices = $x23;var $x20 = $UG$Shape$abs_vertices$($x21);var $closest$0 = $UG$Shape$closest_point_on_polygon$($x19, $x20);var $x24 = $x18.center;var $x25 = $closest$0;var $dst$1 = $V2$dist$($x24, $x25);var $x26 = $dst$1;var $x27 = $x18.radius;var $x0 = $F64$lte$($x26, $x27); break; } case "Polygon": { var $x28 = ({$: "Polygon"});var $x29 = $x18.center;$x28.center = $x29;var $x30 = $x18.vertices;$x28.vertices = $x30;var $abs_p1$0 = $UG$Shape$abs_vertices$($x28);var $x31 = ({$: "Polygon"});var $x32 = $x1.center;$x31.center = $x32;var $x33 = $x1.vertices;$x31.vertices = $x33;var $abs_p2$1 = $UG$Shape$abs_vertices$($x31);var $x34 = $abs_p1$0;var $x35 = $abs_p2$1;var $p1_in_p2$2 = $UG$Shape$any_vertex_inside$($x34, $x35);var $x36 = $abs_p2$1;var $x37 = $abs_p1$0;var $p2_in_p1$3 = $UG$Shape$any_vertex_inside$($x36, $x37);var $x38 = $abs_p1$0;var $x39 = $abs_p2$1;var $edges_intersect$4 = $UG$Shape$any_edges_intersect$($x38, $x39);var $x41 = $p1_in_p2$2;var $x42 = $p2_in_p1$3;var $x40 = $Bool$or$($x41, $x42);var $x43 = $edges_intersect$4;var $x0 = $Bool$or$($x40, $x43); break; } } break; } }return $x0; }
const $UG$Shape$collide = _$0 => _$1 => $UG$Shape$collide$(_$0,_$1)

const $UG$SIPD$Effect$ = (() => {var $x0 = /*($_$0:UG/SIPD/State) => UG/SIPD/State*/null;return $x0; })()
const $UG$SIPD$Effect = $UG$SIPD$Effect$

const $UG$SIPD$Skill$ = (() => {var $x0 = /*{$:'Skill', name: String, effects: List<UG/SIPD/Effect>, cooldown: BigInt}*/null;return $x0; })()
const $UG$SIPD$Skill = $UG$SIPD$Skill$

const $UG$SIPD$Hero$ = (() => {var $x0 = /*{$:'Hero', owner_id: BigInt, name: String, skills: OrdTree<String><UG/SIPD/Skill>, body_id: BigInt}*/null;return $x0; })()
const $UG$SIPD$Hero = $UG$SIPD$Hero$

const $UG$SIPD$Player$ = (() => {var $x0 = /*{$:'Player', id: BigInt, name: String, keys: OrdTree<String><Pair<Bool><V2>>, target: V2, hero: UG/SIPD/Hero}*/null;return $x0; })()
const $UG$SIPD$Player = $UG$SIPD$Player$

const $UG$SIPD$Hero$HeroState$ = (() => {var $x0 = /*{$:'HeroState', cooldowns: OrdTree<String><BigInt>, health: BigInt}*/null;return $x0; })()
const $UG$SIPD$Hero$HeroState = $UG$SIPD$Hero$HeroState$

const $UG$SIPD$GameMap$ = (() => {var $x0 = /*{$:'GameMap', width: BigInt, height: BigInt, bodies: Map<BigInt, Maybe<UG/SIPD/Body>>, bodies_count: BigInt}*/null;return $x0; })()
const $UG$SIPD$GameMap = $UG$SIPD$GameMap$

const $UG$SIPD$State$ = (() => {var $x0 = /*{$:'State', next_id: BigInt, tick: BigInt, players: Map<BigInt, Maybe<UG/SIPD/Player>>, hero_states: Map<BigInt, Maybe<UG/SIPD/Hero/HeroState>>, game_map: UG/SIPD/GameMap}*/null;return $x0; })()
const $UG$SIPD$State = $UG$SIPD$State$

const $UG$SIPD$Body$ = (() => {var $x0 = /*{$:'Body', id: BigInt, hitbox: UG/Shape, tick: ($_$0:UG/SIPD/State) => UG/SIPD/State, effects: List<UG/SIPD/Effect>, collidable: UG/Collision/Collidable}*/null;return $x0; })()
const $UG$SIPD$Body = $UG$SIPD$Body$

function $UG$SIPD$Body$find_collision$(_$0/*:BigInt*/,_$1/*:UG/SIPD/Body*/,_$2/*:List<UG/SIPD/Body>*/) {while(1){var $x1 = _$1;var $x2 = _$2;switch ($x2.$) { case "Cons": { var $x3 = $x2.head;var $x4 = $x1.id;var $x5 = $x3.id;var $diff_ids$0 = $U64$neq$($x4, $x5);var $x6 = $x3.id;var $x7 = _$0;var $diff_ig$1 = $U64$neq$($x6, $x7);var $x8 = $x1.hitbox;var $x9 = $x3.hitbox;var $collides$2 = $UG$Shape$collide$($x8, $x9);var $x12 = $diff_ids$0;var $x13 = $collides$2;var $x11 = $Bool$and$($x12, $x13);var $x14 = $diff_ig$1;var $x10 = $Bool$and$($x11, $x14);switch ($x10.$) { case "True": { var $x15 = $x1.hitbox;var $x16 = $x3.hitbox;var $col_normal$3 = $UG$Collision$calculate_collision_normal$($x15, $x16);var $x0 = ({$: "Some"});var $x17 = ({$: "Pair"});var $x18 = $col_normal$3;$x17.fst = $x18;var $x19 = ({$: "Body"});var $x20 = $x3.id;$x19.id = $x20;var $x21 = $x3.hitbox;$x19.hitbox = $x21;var $x22 = $x3.tick;$x19.tick = $x22;var $x23 = $x3.effects;$x19.effects = $x23;var $x24 = $x3.collidable;$x19.collidable = $x24;$x17.snd = $x19;$x0.value = $x17; break; } case "False": { var $x25 = _$0;var $x26 = ({$: "Body"});var $x27 = $x1.id;$x26.id = $x27;var $x28 = $x1.hitbox;$x26.hitbox = $x28;var $x29 = $x1.tick;$x26.tick = $x29;var $x30 = $x1.effects;$x26.effects = $x30;var $x31 = $x1.collidable;$x26.collidable = $x31;var $x32 = $x2.tail;_$0 = $x25;_$1 = $x26;_$2 = $x32;/*TCO*/continue; break; } } break; } case "Nil": { var $x0 = ({$: "None"}); break; } }return $x0; }}
const $UG$SIPD$Body$find_collision = _$0 => _$1 => _$2 => $UG$SIPD$Body$find_collision$(_$0,_$1,_$2)

function $V2$mul_scalar$(_$0/*:V2*/,_$1/*:Number*/) {var $x1 = _$0;var $x0 = ({$: "V2"});var $x3 = $x1.x;var $x4 = _$1;var $x2 = $F64$mul$($x3, $x4);$x0.x = $x2;var $x6 = $x1.y;var $x7 = _$1;var $x5 = $F64$mul$($x6, $x7);$x0.y = $x5;return $x0; }
const $V2$mul_scalar = _$0 => _$1 => $V2$mul_scalar$(_$0,_$1)

function $collide_and_slide$handle_collidable$(_$0/*:UG/SIPD/Body*/,_$1/*:UG/Collision/Collidable*/,_$2/*:V2*/,_$3/*:V2*/,_$4/*:V2*/,_$5/*:List<UG/SIPD/Body>*/,_$6/*:Nat*/) {var $x1 = _$0;var $x2 = ({$: "Pair"});var $x3 = $x1.collidable;$x2.fst = $x3;var $x4 = _$1;$x2.snd = $x4;var $x5 = $x2.fst;switch ($x5.$) { case "Untouchable": { var $x6 = $x2.snd;switch ($x6.$) { case "Untouchable": { var $x0 = ({$: "Pair"});var $x8 = _$2;var $x9 = _$4;var $x7 = $V2$add$($x8, $x9);$x0.fst = $x7;var $x10 = _$3;$x0.snd = $x10; break; } default: { var $x0 = ({$: "Pair"});var $x12 = _$2;var $x13 = _$4;var $x11 = $V2$add$($x12, $x13);$x0.fst = $x11;var $x14 = _$3;$x0.snd = $x14; break; } } break; } default: { var $x15 = $x2.snd;switch ($x15.$) { case "Untouchable": { var $x0 = ({$: "Pair"});var $x17 = _$2;var $x18 = _$4;var $x16 = $V2$add$($x17, $x18);$x0.fst = $x16;var $x19 = _$3;$x0.snd = $x19; break; } default: { var $x20 = _$2;var $x21 = _$4;var $new_position$0 = $V2$add$($x20, $x21);var $x22 = $x1.hitbox;var $x24 = $new_position$0;var $x25 = _$2;var $x23 = $V2$sub$($x24, $x25);var $new_hitbox$1 = $UG$Shape$move$($x22, $x23);var $x26 = _$3;var $slide_plane$2 = $V2$normalize$($x26);var $x27 = _$4;var $x29 = $slide_plane$2;var $x31 = _$4;var $x32 = $slide_plane$2;var $x30 = $V2$dot$($x31, $x32);var $x28 = $V2$mul_scalar$($x29, $x30);var $slide_movement$3 = $V2$sub$($x27, $x28);var $x33 = ({$: "Body"});var $x34 = $x1.id;$x33.id = $x34;var $x35 = $new_hitbox$1;$x33.hitbox = $x35;var $x36 = $x1.tick;$x33.tick = $x36;var $x37 = $x1.effects;$x33.effects = $x37;var $x38 = $x1.collidable;$x33.collidable = $x38;var $x39 = _$2;var $x40 = $slide_movement$3;var $x41 = _$5;var $x42 = _$6;var $x0 = $collide_and_slide$go$($x33, $x39, $x40, $x41, $x42); break; } } break; } }return $x0; }
const $collide_and_slide$handle_collidable = _$0 => _$1 => _$2 => _$3 => _$4 => _$5 => _$6 => $collide_and_slide$handle_collidable$(_$0,_$1,_$2,_$3,_$4,_$5,_$6)

function $collide_and_slide$go$(_$0/*:UG/SIPD/Body*/,_$1/*:V2*/,_$2/*:V2*/,_$3/*:List<UG/SIPD/Body>*/,_$4/*:Nat*/) {var $x1 = _$0;var $x2 = _$4;switch ($x2.$) { case "Succ": { var $x3 = _$1;var $x4 = _$2;var $new_position$0 = $V2$add$($x3, $x4);var $x5 = $x1.hitbox;var $x7 = $new_position$0;var $x8 = _$1;var $x6 = $V2$sub$($x7, $x8);var $new_hitbox$1 = $UG$Shape$move$($x5, $x6);var $x9 = $x1.id;var $x10 = ({$: "Body"});var $x11 = $x1.id;$x10.id = $x11;var $x12 = $new_hitbox$1;$x10.hitbox = $x12;var $x13 = $x1.tick;$x10.tick = $x13;var $x14 = $x1.effects;$x10.effects = $x14;var $x15 = $x1.collidable;$x10.collidable = $x15;var $x16 = _$3;var $collision$2 = $UG$SIPD$Body$find_collision$($x9, $x10, $x16);var $x17 = $collision$2;switch ($x17.$) { case "None": { var $x0 = ({$: "Pair"});var $x18 = $new_position$0;$x0.fst = $x18;var $x19 = ({$: "V2"});var $x20 = 0.0;$x19.x = $x20;var $x21 = 0.0;$x19.y = $x21;$x0.snd = $x19; break; } case "Some": { var $got$3 = $x17.value;var $x22 = $got$3;var $got$4 = $x22.snd;var $x23 = $got$4;var $x24 = ({$: "Body"});var $x25 = $x1.id;$x24.id = $x25;var $x26 = $x1.hitbox;$x24.hitbox = $x26;var $x27 = $x1.tick;$x24.tick = $x27;var $x28 = $x1.effects;$x24.effects = $x28;var $x29 = $x1.collidable;$x24.collidable = $x29;var $x30 = $x23.collidable;var $x31 = _$1;var $x32 = $x22.fst;var $x33 = _$2;var $x34 = _$3;var $x35 = $x2.pred;var $x0 = $collide_and_slide$handle_collidable$($x24, $x30, $x31, $x32, $x33, $x34, $x35); break; } } break; } case "Zero": { var $x0 = ({$: "Pair"});var $x36 = _$1;$x0.fst = $x36;var $x37 = _$2;$x0.snd = $x37; break; } }return $x0; }
const $collide_and_slide$go = _$0 => _$1 => _$2 => _$3 => _$4 => $collide_and_slide$go$(_$0,_$1,_$2,_$3,_$4)

function $UG$Collision$collide_and_slide$(_$0/*:UG/SIPD/Body*/,_$1/*:V2*/,_$2/*:List<UG/SIPD/Body>*/) {var $x1 = _$0;var $x2 = $x1.hitbox;var $initial_position$0 = $UG$Shape$get_center$($x2);var $x3 = ({$: "Body"});var $x4 = $x1.id;$x3.id = $x4;var $x5 = $x1.hitbox;$x3.hitbox = $x5;var $x6 = $x1.tick;$x3.tick = $x6;var $x7 = $x1.effects;$x3.effects = $x7;var $x8 = $x1.collidable;$x3.collidable = $x8;var $x9 = $initial_position$0;var $x10 = _$1;var $x11 = _$2;var $x12 = ({$: "Succ"});var $x13 = ({$: "Succ"});var $x14 = ({$: "Succ"});var $x15 = ({$: "Zero"});$x14.pred = $x15;$x13.pred = $x14;$x12.pred = $x13;var $x0 = $collide_and_slide$go$($x3, $x9, $x10, $x11, $x12);return $x0; }
const $UG$Collision$collide_and_slide = _$0 => _$1 => _$2 => $UG$Collision$collide_and_slide$(_$0,_$1,_$2)

const $UG$SIPD$Action$ = (() => {var $x0 = /*{$:'SetNick', time: BigInt, pid: BigInt, nick: String}*/null;return $x0; })()
const $UG$SIPD$Action = $UG$SIPD$Action$

function $UG$SIPD$Action$eq$(_$0/*:UG/SIPD/Action*/,_$1/*:UG/SIPD/Action*/) {var $x1 = _$0;var $x2 = _$1;var $x3 = $x1.time;var $x4 = $x2.time;var $time_eq$0 = $U64$eq$($x3, $x4);var $x5 = $x1.pid;var $x6 = $x2.pid;var $pid_eq$1 = $U64$eq$($x5, $x6);var $x7 = $x1.nick;var $x8 = $x2.nick;var $nick_eq$2 = $String$eq$($x7, $x8);var $x9 = $time_eq$0;var $x11 = $pid_eq$1;var $x12 = $nick_eq$2;var $x10 = $Bool$and$($x11, $x12);var $x0 = $Bool$and$($x9, $x10);return $x0; }
const $UG$SIPD$Action$eq = _$0 => _$1 => $UG$SIPD$Action$eq$(_$0,_$1)

function $UG$SIPD$Body$set_effects$(_$0/*:UG/SIPD/Body*/,_$1/*:List<UG/SIPD/Effect>*/) {var $x1 = _$0;var $x0 = ({$: "Body"});var $x2 = $x1.id;$x0.id = $x2;var $x3 = $x1.hitbox;$x0.hitbox = $x3;var $x4 = $x1.tick;$x0.tick = $x4;var $x5 = _$1;$x0.effects = $x5;var $x6 = $x1.collidable;$x0.collidable = $x6;return $x0; }
const $UG$SIPD$Body$set_effects = _$0 => _$1 => $UG$SIPD$Body$set_effects$(_$0,_$1)

function $UG$SIPD$Effect$apply$(_$0/*:UG/SIPD/Effect*/,_$1/*:UG/SIPD/State*/) {var $x1 = _$0;var $x2 = _$1;var $x0 = ($x1)($x2);return $x0; }
const $UG$SIPD$Effect$apply = _$0 => _$1 => $UG$SIPD$Effect$apply$(_$0,_$1)

function $UG$SIPD$Body$apply_effects$go$(_$0/*:UG/SIPD/Body*/,_$1/*:UG/SIPD/State*/,_$2/*:List<UG/SIPD/Effect>*/) {while(1){var $x1 = _$2;switch ($x1.$) { case "Cons": { var $x2 = _$0;var $x3 = $x1.tail;var $updated_body$0 = $UG$SIPD$Body$set_effects$($x2, $x3);var $got$1 = $updated_body$0;var $x4 = $got$1;var $got$2 = _$1;var $x5 = $got$2;var $got$3 = $x5.game_map;var $x6 = $got$3;var $x7 = $UG$SIPD$Body;var $x8 = $x6.bodies;var $x9 = $x4.id;var $x10 = $updated_body$0;var $updated_bodies$4 = $Map$insert$($x7, $x8, $x9, $x10);var $x11 = $x1.head;var $x12 = ({$: "State"});var $x13 = $x5.next_id;$x12.next_id = $x13;var $x14 = $x5.tick;$x12.tick = $x14;var $x15 = $x5.players;$x12.players = $x15;var $x16 = $x5.hero_states;$x12.hero_states = $x16;var $x17 = ({$: "GameMap"});var $x18 = $x6.width;$x17.width = $x18;var $x19 = $x6.height;$x17.height = $x19;var $x20 = $updated_bodies$4;$x17.bodies = $x20;var $x21 = $x6.bodies_count;$x17.bodies_count = $x21;$x12.game_map = $x17;var $new_state$5 = $UG$SIPD$Effect$apply$($x11, $x12);var $x22 = $updated_body$0;var $x23 = $new_state$5;var $x24 = $x1.tail;_$0 = $x22;_$1 = $x23;_$2 = $x24;/*TCO*/continue; break; } case "Nil": { var $x0 = _$1; break; } }return $x0; }}
const $UG$SIPD$Body$apply_effects$go = _$0 => _$1 => _$2 => $UG$SIPD$Body$apply_effects$go$(_$0,_$1,_$2)

function $UG$SIPD$Body$apply_effects$(_$0/*:UG/SIPD/Body*/,_$1/*:UG/SIPD/State*/) {var $x1 = _$0;var $x2 = ({$: "Body"});var $x3 = $x1.id;$x2.id = $x3;var $x4 = $x1.hitbox;$x2.hitbox = $x4;var $x5 = $x1.tick;$x2.tick = $x5;var $x6 = $x1.effects;$x2.effects = $x6;var $x7 = $x1.collidable;$x2.collidable = $x7;var $x8 = _$1;var $x9 = $x1.effects;var $x0 = $UG$SIPD$Body$apply_effects$go$($x2, $x8, $x9);return $x0; }
const $UG$SIPD$Body$apply_effects = _$0 => _$1 => $UG$SIPD$Body$apply_effects$(_$0,_$1)

function $UG$SIPD$Body$delete_body$(_$0/*:BigInt*/,_$1/*:Map<BigInt, Maybe<UG/SIPD/Body>>*/) {var $x1 = $UG$SIPD$Body;var $x2 = _$1;var $x3 = _$0;var $x0 = $Map$delete$($x1, $x2, $x3);return $x0; }
const $UG$SIPD$Body$delete_body = _$0 => _$1 => $UG$SIPD$Body$delete_body$(_$0,_$1)

function $UG$SIPD$Body$get_body$(_$0/*:BigInt*/,_$1/*:Map<BigInt, Maybe<UG/SIPD/Body>>*/) {var $x1 = $UG$SIPD$Body;var $x2 = _$1;var $x3 = _$0;var $x0 = $Map$get$($x1, $x2, $x3);return $x0; }
const $UG$SIPD$Body$get_body = _$0 => _$1 => $UG$SIPD$Body$get_body$(_$0,_$1)

function $UG$SIPD$Body$tick$(_$0/*:UG/SIPD/Body*/) {var $x1 = _$0;var $x0 = $x1.tick;return $x0; }
const $UG$SIPD$Body$tick = _$0 => $UG$SIPD$Body$tick$(_$0)

function $UG$SIPD$GameMap$delete_body$(_$0/*:UG/SIPD/GameMap*/,_$1/*:BigInt*/) {var $x1 = _$0;var $x2 = _$1;var $x3 = $x1.bodies;var $bodies$0 = $UG$SIPD$Body$delete_body$($x2, $x3);var $x0 = ({$: "GameMap"});var $x4 = $x1.width;$x0.width = $x4;var $x5 = $x1.height;$x0.height = $x5;var $x6 = $bodies$0;$x0.bodies = $x6;var $x7 = $x1.bodies_count;$x0.bodies_count = $x7;return $x0; }
const $UG$SIPD$GameMap$delete_body = _$0 => _$1 => $UG$SIPD$GameMap$delete_body$(_$0,_$1)

function $UG$SIPD$State$delete_body$(_$0/*:UG/SIPD/State*/,_$1/*:BigInt*/) {var $x1 = _$0;var $x2 = $x1.game_map;var $x3 = _$1;var $new_game_map$0 = $UG$SIPD$GameMap$delete_body$($x2, $x3);var $x0 = ({$: "State"});var $x4 = $x1.next_id;$x0.next_id = $x4;var $x5 = $x1.tick;$x0.tick = $x5;var $x6 = $x1.players;$x0.players = $x6;var $x7 = $x1.hero_states;$x0.hero_states = $x7;var $x8 = $new_game_map$0;$x0.game_map = $x8;return $x0; }
const $UG$SIPD$State$delete_body = _$0 => _$1 => $UG$SIPD$State$delete_body$(_$0,_$1)

function $damage$handle_collidable$(_$0/*:BigInt*/,_$1/*:UG/SIPD/Body*/,_$2/*:UG/SIPD/Body*/,_$3/*:UG/SIPD/State*/) {var $x1 = _$1;var $x2 = _$2;var $x3 = $x2.collidable;switch ($x3.$) { case "TakesEffects": { var $got$0 = _$3;var $x4 = $got$0;var $x6 = $UG$SIPD$Hero$HeroState;var $x7 = $x4.hero_states;var $x8 = $x2.id;var $x5 = $Map$get$($x6, $x7, $x8);switch ($x5.$) { case "Some": { var $got$1 = $x5.value;var $x9 = $got$1;var $x10 = $x9.health;var $x11 = _$0;var $new_health$2 = $U64$sub$($x10, $x11);var $x12 = $UG$SIPD$Hero$HeroState;var $x13 = $x4.hero_states;var $x14 = $x2.id;var $x15 = ({$: "HeroState"});var $x16 = $x9.cooldowns;$x15.cooldowns = $x16;var $x17 = $new_health$2;$x15.health = $x17;var $updated_hero_states$3 = $Map$insert$($x12, $x13, $x14, $x15);var $x18 = ({$: "State"});var $x19 = $x4.next_id;$x18.next_id = $x19;var $x20 = $x4.tick;$x18.tick = $x20;var $x21 = $x4.players;$x18.players = $x21;var $x22 = $updated_hero_states$3;$x18.hero_states = $x22;var $x23 = $x4.game_map;$x18.game_map = $x23;var $x24 = $x1.id;var $state$4 = $UG$SIPD$State$delete_body$($x18, $x24);var $x26 = $new_health$2;var $x27 = 0n;var $x25 = $U64$lte$($x26, $x27);switch ($x25.$) { case "True": { var $x28 = $state$4;var $x29 = $x2.id;var $x0 = $UG$SIPD$State$delete_body$($x28, $x29); break; } case "False": { var $x0 = $state$4; break; } } break; } case "None": { var $x0 = _$3; break; } } break; } default: { var $x0 = _$3; break; } }return $x0; }
const $damage$handle_collidable = _$0 => _$1 => _$2 => _$3 => $damage$handle_collidable$(_$0,_$1,_$2,_$3)

function $UG$SIPD$GameMap$get_body$(_$0/*:Map<BigInt, Maybe<UG/SIPD/Body>>*/,_$1/*:BigInt*/) {var $x1 = $UG$SIPD$Body;var $x2 = _$0;var $x3 = _$1;var $x0 = $Map$get$($x1, $x2, $x3);return $x0; }
const $UG$SIPD$GameMap$get_body = _$0 => _$1 => $UG$SIPD$GameMap$get_body$(_$0,_$1)

function $UG$SIPD$Effect$collide_and_damage$(_$0/*:BigInt*/,_$1/*:BigInt*/,_$2/*:BigInt*/,_$3/*:UG/SIPD/State*/) {var $got$0 = _$3;var $x1 = $got$0;var $got$1 = $x1.game_map;var $x2 = $got$1;var $x3 = $UG$SIPD$Body;var $x4 = $x2.bodies;var $x5 = $x2.bodies_count;var $bodies_list$2 = $Map$values$($x3, $x4, $x5);var $x7 = $x2.bodies;var $x8 = _$1;var $x6 = $UG$SIPD$GameMap$get_body$($x7, $x8);switch ($x6.$) { case "Some": { var $got$3 = $x6.value;var $x9 = $got$3;var $x10 = _$0;var $x11 = $x6.value;var $x12 = $bodies_list$2;var $collision_result$4 = $UG$SIPD$Body$find_collision$($x10, $x11, $x12);var $x13 = $collision_result$4;var $x15 = _$0;var $x17 = $collision_result$4;switch ($x17.$) { case "None": { var $x16 = ({$: "State"});var $x18 = $x1.next_id;$x16.next_id = $x18;var $x19 = $x1.tick;$x16.tick = $x19;var $x20 = $x1.players;$x16.players = $x20;var $x21 = $x1.hero_states;$x16.hero_states = $x21;var $x22 = $x1.game_map;$x16.game_map = $x22; break; } case "Some": { var $got$5 = $x17.value;var $x23 = $got$5;var $got$6 = $x23.snd;var $x24 = $got$6;var $x26 = _$0;var $x27 = $x24.id;var $x25 = $U64$eq$($x26, $x27);switch ($x25.$) { case "True": { var $x16 = _$3; break; } case "False": { var $x28 = _$2;var $x29 = $x6.value;var $x30 = $x23.snd;var $x31 = _$3;var $x16 = $damage$handle_collidable$($x28, $x29, $x30, $x31); break; } } break; } }var $x14 = (console.log(LIST_TO_JSTR($x15)), $x16);var $x0 = (console.log(LIST_TO_JSTR($x13)), $x14); break; } case "None": { var $x0 = _$3; break; } }return $x0; }
const $UG$SIPD$Effect$collide_and_damage = _$0 => _$1 => _$2 => _$3 => $UG$SIPD$Effect$collide_and_damage$(_$0,_$1,_$2,_$3)

function $dps$handle_collidable$(_$0/*:BigInt*/,_$1/*:UG/SIPD/Body*/,_$2/*:UG/SIPD/Body*/,_$3/*:UG/SIPD/State*/) {var $x1 = _$1;var $x2 = _$2;var $x3 = $x2.collidable;switch ($x3.$) { case "TakesEffects": { var $got$0 = _$3;var $x4 = $got$0;var $x6 = $UG$SIPD$Hero$HeroState;var $x7 = $x4.hero_states;var $x8 = $x2.id;var $x5 = $Map$get$($x6, $x7, $x8);switch ($x5.$) { case "Some": { var $got$1 = $x5.value;var $x9 = $got$1;var $x10 = $x9.health;var $x11 = _$0;var $new_health$2 = $U64$sub$($x10, $x11);var $x12 = $UG$SIPD$Hero$HeroState;var $x13 = $x4.hero_states;var $x14 = $x2.id;var $x15 = ({$: "HeroState"});var $x16 = $x9.cooldowns;$x15.cooldowns = $x16;var $x17 = $new_health$2;$x15.health = $x17;var $updated_hero_states$3 = $Map$insert$($x12, $x13, $x14, $x15);var $x19 = $new_health$2;var $x20 = 0n;var $x18 = $U64$lte$($x19, $x20);switch ($x18.$) { case "True": { var $x21 = ({$: "State"});var $x22 = $x4.next_id;$x21.next_id = $x22;var $x23 = $x4.tick;$x21.tick = $x23;var $x24 = $x4.players;$x21.players = $x24;var $x25 = $updated_hero_states$3;$x21.hero_states = $x25;var $x26 = $x4.game_map;$x21.game_map = $x26;var $x27 = $x2.id;var $x0 = $UG$SIPD$State$delete_body$($x21, $x27); break; } case "False": { var $x0 = _$3; break; } } break; } case "None": { var $x0 = _$3; break; } } break; } default: { var $x0 = _$3; break; } }return $x0; }
const $dps$handle_collidable = _$0 => _$1 => _$2 => _$3 => $dps$handle_collidable$(_$0,_$1,_$2,_$3)

function $UG$SIPD$Effect$collide_and_dps$(_$0/*:BigInt*/,_$1/*:BigInt*/,_$2/*:BigInt*/,_$3/*:UG/SIPD/State*/) {var $got$0 = _$3;var $x1 = $got$0;var $got$1 = $x1.game_map;var $x2 = $got$1;var $x3 = $UG$SIPD$Body;var $x4 = $x2.bodies;var $x5 = $x2.bodies_count;var $bodies_list$2 = $Map$values$($x3, $x4, $x5);var $x7 = $x2.bodies;var $x8 = _$1;var $x6 = $UG$SIPD$GameMap$get_body$($x7, $x8);switch ($x6.$) { case "Some": { var $got$3 = $x6.value;var $x9 = $got$3;var $x10 = _$0;var $x11 = $x6.value;var $x12 = $bodies_list$2;var $collision_result$4 = $UG$SIPD$Body$find_collision$($x10, $x11, $x12);var $x13 = $collision_result$4;var $x15 = _$0;var $x17 = $collision_result$4;switch ($x17.$) { case "None": { var $x16 = ({$: "State"});var $x18 = $x1.next_id;$x16.next_id = $x18;var $x19 = $x1.tick;$x16.tick = $x19;var $x20 = $x1.players;$x16.players = $x20;var $x21 = $x1.hero_states;$x16.hero_states = $x21;var $x22 = $x1.game_map;$x16.game_map = $x22; break; } case "Some": { var $got$5 = $x17.value;var $x23 = $got$5;var $got$6 = $x23.snd;var $x24 = $got$6;var $x26 = _$0;var $x27 = $x24.id;var $x25 = $U64$eq$($x26, $x27);switch ($x25.$) { case "True": { var $x16 = _$3; break; } case "False": { var $x28 = _$2;var $x29 = $x6.value;var $x30 = $x23.snd;var $x31 = _$3;var $x16 = $dps$handle_collidable$($x28, $x29, $x30, $x31); break; } } break; } }var $x14 = (console.log(LIST_TO_JSTR($x15)), $x16);var $x0 = (console.log(LIST_TO_JSTR($x13)), $x14); break; } case "None": { var $x0 = _$3; break; } }return $x0; }
const $UG$SIPD$Effect$collide_and_dps = _$0 => _$1 => _$2 => _$3 => $UG$SIPD$Effect$collide_and_dps$(_$0,_$1,_$2,_$3)

function $UG$SIPD$Player$get_mouse_pos$(_$0/*:UG/SIPD/Player*/,_$1/*:String*/) {var $x1 = _$0;var $x4 = $String;var $x6 = $Bool;var $x7 = $V2;var $x5 = $Pair$($x6, $x7);var $x8 = $String$Ord;var $x9 = $x1.keys;var $x3 = $OrdTree$get$($x4, $x5, $x8, $x9);var $x10 = _$1;var $x2 = ($x3)($x10);switch ($x2.$) { case "None": { var $x0 = ({$: "V2"});var $x11 = 0.0;$x0.x = $x11;var $x12 = 0.0;$x0.y = $x12; break; } case "Some": { var $x13 = $x2.value;var $x0 = $x13.snd; break; } }return $x0; }
const $UG$SIPD$Player$get_mouse_pos = _$0 => _$1 => $UG$SIPD$Player$get_mouse_pos$(_$0,_$1)

function $UG$SIPD$State$generate_id$(_$0/*:UG/SIPD/State*/) {var $x1 = _$0;var $x2 = $x1.next_id;var $x3 = 1n;var $nxt_next_id$0 = BigInt.asUintN(64, $x2 + $x3);var $x0 = ({$: "Pair"});var $x4 = $x1.next_id;$x0.fst = $x4;var $x5 = ({$: "State"});var $x6 = $nxt_next_id$0;$x5.next_id = $x6;var $x7 = $x1.tick;$x5.tick = $x7;var $x8 = $x1.players;$x5.players = $x8;var $x9 = $x1.hero_states;$x5.hero_states = $x9;var $x10 = $x1.game_map;$x5.game_map = $x10;$x0.snd = $x5;return $x0; }
const $UG$SIPD$State$generate_id = _$0 => $UG$SIPD$State$generate_id$(_$0)

function $UG$Shape$start_centered_rectangle$(_$0/*:V2*/,_$1/*:Number*/,_$2/*:Number*/) {var $x1 = _$1;var $x2 = 2.0;var $half_width$0 = $F64$div$($x1, $x2);var $x4 = 0.0;var $x5 = $half_width$0;var $x3 = $F64$sub$($x4, $x5);var $x6 = _$2;var $top_left$1 = $V2$new$($x3, $x6);var $x7 = $half_width$0;var $x8 = _$2;var $top_right$2 = $V2$new$($x7, $x8);var $x9 = $half_width$0;var $x10 = 0.0;var $bottom_right$3 = $V2$new$($x9, $x10);var $x12 = 0.0;var $x13 = $half_width$0;var $x11 = $F64$sub$($x12, $x13);var $x14 = 0.0;var $bottom_left$4 = $V2$new$($x11, $x14);var $x0 = ({$: "Polygon"});var $x15 = _$0;$x0.center = $x15;var $x16 = ({$: "Cons"});var $x17 = $top_left$1;$x16.head = $x17;var $x18 = ({$: "Cons"});var $x19 = $top_right$2;$x18.head = $x19;var $x20 = ({$: "Cons"});var $x21 = $bottom_right$3;$x20.head = $x21;var $x22 = ({$: "Cons"});var $x23 = $bottom_left$4;$x22.head = $x23;var $x24 = ({$: "Nil"});$x22.tail = $x24;$x20.tail = $x22;$x18.tail = $x20;$x16.tail = $x18;$x0.vertices = $x16;return $x0; }
const $UG$Shape$start_centered_rectangle = _$0 => _$1 => _$2 => $UG$Shape$start_centered_rectangle$(_$0,_$1,_$2)

function $V2$calculate_angle$(_$0/*:V2*/,_$1/*:V2*/) {var $x1 = _$0;var $x2 = _$1;var $x3 = $x2.x;var $x4 = $x1.x;var $dx$0 = $F64$sub$($x3, $x4);var $x5 = $x2.y;var $x6 = $x1.y;var $dy$1 = $F64$sub$($x5, $x6);var $x7 = 0.0;var $x9 = $dx$0;var $x10 = $dy$1;var $x8 = Math.atan2($x9, $x10);var $x0 = $F64$sub$($x7, $x8);return $x0; }
const $V2$calculate_angle = _$0 => _$1 => $V2$calculate_angle$(_$0,_$1)

function $V2$rotate$(_$0/*:V2*/,_$1/*:Number*/) {var $x1 = _$0;var $x2 = _$1;var $x3 = 0.0;var $cos_theta$0 = Math.cos($x2);var $x4 = _$1;var $x5 = 0.0;var $sin_theta$1 = Math.sin($x4);var $x7 = $x1.x;var $x8 = $cos_theta$0;var $x6 = $F64$mul$($x7, $x8);var $x10 = $x1.y;var $x11 = $sin_theta$1;var $x9 = $F64$mul$($x10, $x11);var $new_x$2 = $F64$sub$($x6, $x9);var $x13 = $x1.x;var $x14 = $sin_theta$1;var $x12 = $F64$mul$($x13, $x14);var $x16 = $x1.y;var $x17 = $cos_theta$0;var $x15 = $F64$mul$($x16, $x17);var $new_y$3 = $F64$add$($x12, $x15);var $x0 = ({$: "V2"});var $x18 = $new_x$2;$x0.x = $x18;var $x19 = $new_y$3;$x0.y = $x19;return $x0; }
const $V2$rotate = _$0 => _$1 => $V2$rotate$(_$0,_$1)

function $UG$Shape$rotate$(_$0/*:UG/Shape*/,_$1/*:Number*/) {var $x1 = _$0;switch ($x1.$) { case "Circle": { var $x0 = ({$: "Circle"});var $x2 = $x1.center;$x0.center = $x2;var $x3 = $x1.radius;$x0.radius = $x3; break; } case "Polygon": { var $x4 = $V2;var $x5 = $V2;var $x6 = $x1.vertices;var $x7 = ($vert$0 => {var $x9 = $vert$0;var $x10 = _$1;var $x8 = $V2$rotate$($x9, $x10);return $x8;});var $rotated_vertices$0 = $List$map$($x4, $x5, $x6, $x7);var $x0 = ({$: "Polygon"});var $x11 = $x1.center;$x0.center = $x11;var $x12 = $rotated_vertices$0;$x0.vertices = $x12; break; } }return $x0; }
const $UG$Shape$rotate = _$0 => _$1 => $UG$Shape$rotate$(_$0,_$1)

function $UG$SIPD$GameMap$insert_body$(_$0/*:UG/SIPD/GameMap*/,_$1/*:UG/SIPD/Body*/) {var $x1 = _$0;var $x2 = _$1;var $x3 = $UG$SIPD$Body;var $x4 = $x1.bodies;var $x5 = $x2.id;var $x6 = ({$: "Body"});var $x7 = $x2.id;$x6.id = $x7;var $x8 = $x2.hitbox;$x6.hitbox = $x8;var $x9 = $x2.tick;$x6.tick = $x9;var $x10 = $x2.effects;$x6.effects = $x10;var $x11 = $x2.collidable;$x6.collidable = $x11;var $new_bodies$0 = $Map$insert$($x3, $x4, $x5, $x6);var $x13 = $x2.id;var $x14 = $x1.bodies_count;var $x12 = $U64$gt$($x13, $x14);switch ($x12.$) { case "True": { var $x0 = ({$: "GameMap"});var $x15 = $x1.width;$x0.width = $x15;var $x16 = $x1.height;$x0.height = $x16;var $x17 = $new_bodies$0;$x0.bodies = $x17;var $x18 = $x2.id;$x0.bodies_count = $x18; break; } case "False": { var $x0 = ({$: "GameMap"});var $x19 = $x1.width;$x0.width = $x19;var $x20 = $x1.height;$x0.height = $x20;var $x21 = $new_bodies$0;$x0.bodies = $x21;var $x22 = $x1.bodies_count;$x0.bodies_count = $x22; break; } }return $x0; }
const $UG$SIPD$GameMap$insert_body = _$0 => _$1 => $UG$SIPD$GameMap$insert_body$(_$0,_$1)

function $UG$SIPD$State$insert_body$(_$0/*:UG/SIPD/State*/,_$1/*:UG/SIPD/Body*/) {var $x1 = _$0;var $x2 = $x1.game_map;var $x3 = _$1;var $new_game_map$0 = $UG$SIPD$GameMap$insert_body$($x2, $x3);var $x0 = ({$: "State"});var $x4 = $x1.next_id;$x0.next_id = $x4;var $x5 = $x1.tick;$x0.tick = $x5;var $x6 = $x1.players;$x0.players = $x6;var $x7 = $x1.hero_states;$x0.hero_states = $x7;var $x8 = $new_game_map$0;$x0.game_map = $x8;return $x0; }
const $UG$SIPD$State$insert_body = _$0 => _$1 => $UG$SIPD$State$insert_body$(_$0,_$1)

function $UG$SIPD$Effect$tick_disintegrate_line$(_$0/*:BigInt*/,_$1/*:BigInt*/,_$2/*:Number*/,_$3/*:Number*/,_$4/*:UG/SIPD/State*/) {var $x1 = _$4;var $x2 = $x1.game_map;var $x4 = _$0;var $x5 = $x2.bodies;var $x3 = $UG$SIPD$Body$get_body$($x4, $x5);switch ($x3.$) { case "None": { var $x0 = ({$: "State"});var $x6 = $x1.next_id;$x0.next_id = $x6;var $x7 = $x1.tick;$x0.tick = $x7;var $x8 = $x1.players;$x0.players = $x8;var $x9 = $x1.hero_states;$x0.hero_states = $x9;var $x10 = ({$: "GameMap"});var $x11 = $x2.width;$x10.width = $x11;var $x12 = $x2.height;$x10.height = $x12;var $x13 = $x2.bodies;$x10.bodies = $x13;var $x14 = $x2.bodies_count;$x10.bodies_count = $x14;$x0.game_map = $x10; break; } case "Some": { var $x16 = _$1;var $x17 = $x2.bodies;var $x15 = $UG$SIPD$Body$get_body$($x16, $x17);switch ($x15.$) { case "None": { var $x0 = ({$: "State"});var $x18 = $x1.next_id;$x0.next_id = $x18;var $x19 = $x1.tick;$x0.tick = $x19;var $x20 = $x1.players;$x0.players = $x20;var $x21 = $x1.hero_states;$x0.hero_states = $x21;var $x22 = ({$: "GameMap"});var $x23 = $x2.width;$x22.width = $x23;var $x24 = $x2.height;$x22.height = $x24;var $x25 = $x2.bodies;$x22.bodies = $x25;var $x26 = $x2.bodies_count;$x22.bodies_count = $x26;$x0.game_map = $x22; break; } case "Some": { var $x28 = $UG$SIPD$Player;var $x29 = $x1.players;var $x30 = _$1;var $x27 = $Map$get$($x28, $x29, $x30);switch ($x27.$) { case "None": { var $x0 = ({$: "State"});var $x31 = $x1.next_id;$x0.next_id = $x31;var $x32 = $x1.tick;$x0.tick = $x32;var $x33 = $x1.players;$x0.players = $x33;var $x34 = $x1.hero_states;$x0.hero_states = $x34;var $x35 = ({$: "GameMap"});var $x36 = $x2.width;$x35.width = $x36;var $x37 = $x2.height;$x35.height = $x37;var $x38 = $x2.bodies;$x35.bodies = $x38;var $x39 = $x2.bodies_count;$x35.bodies_count = $x39;$x0.game_map = $x35; break; } case "Some": { var $got$0 = $x15.value;var $x40 = $got$0;var $x41 = $x40.hitbox;var $hero_pos$1 = $UG$Shape$get_center$($x41);var $x42 = $hero_pos$1;var $x43 = _$2;var $x44 = _$3;var $def_line$2 = $UG$Shape$start_centered_rectangle$($x42, $x43, $x44);var $got$3 = $x3.value;var $x45 = $got$3;var $got$4 = $x27.value;var $x46 = $got$4;var $x47 = $hero_pos$1;var $x48 = $x46.target;var $angle$5 = $V2$calculate_angle$($x47, $x48);var $x49 = $def_line$2;var $x50 = $angle$5;var $new_line_shape$6 = $UG$Shape$rotate$($x49, $x50);var $x51 = ({$: "State"});var $x52 = $x1.next_id;$x51.next_id = $x52;var $x53 = $x1.tick;$x51.tick = $x53;var $x54 = $x1.players;$x51.players = $x54;var $x55 = $x1.hero_states;$x51.hero_states = $x55;var $x56 = ({$: "GameMap"});var $x57 = $x2.width;$x56.width = $x57;var $x58 = $x2.height;$x56.height = $x58;var $x59 = $x2.bodies;$x56.bodies = $x59;var $x60 = $x2.bodies_count;$x56.bodies_count = $x60;$x51.game_map = $x56;var $x61 = ({$: "Body"});var $x62 = $x45.id;$x61.id = $x62;var $x63 = $new_line_shape$6;$x61.hitbox = $x63;var $x64 = $x45.tick;$x61.tick = $x64;var $x65 = $x45.effects;$x61.effects = $x65;var $x66 = $x45.collidable;$x61.collidable = $x66;var $new_state$7 = $UG$SIPD$State$insert_body$($x51, $x61);var $x67 = ({$: "Body"});var $x68 = $x45.id;$x67.id = $x68;var $x69 = $new_line_shape$6;$x67.hitbox = $x69;var $x70 = $x45.tick;$x67.tick = $x70;var $x71 = $x45.effects;$x67.effects = $x71;var $x72 = $x45.collidable;$x67.collidable = $x72;var $x73 = $new_state$7;var $x0 = $UG$SIPD$Body$apply_effects$($x67, $x73); break; } } break; } } break; } }return $x0; }
const $UG$SIPD$Effect$tick_disintegrate_line = _$0 => _$1 => _$2 => _$3 => _$4 => $UG$SIPD$Effect$tick_disintegrate_line$(_$0,_$1,_$2,_$3,_$4)

function $disintegrate$create_disintegrate_line$(_$0/*:BigInt*/,_$1/*:BigInt*/,_$2/*:Number*/,_$3/*:Number*/,_$4/*:V2*/,_$5/*:V2*/) {var $x2 = _$5;var $x3 = _$4;var $x1 = $V2$sub$($x2, $x3);var $direction$0 = $V2$normalize$($x1);var $center$1 = _$4;var $x4 = $center$1;var $x5 = _$2;var $x6 = _$3;var $body_shape$2 = $UG$Shape$start_centered_rectangle$($x4, $x5, $x6);var $x10 = $UG$SIPD$Effect$tick_disintegrate_line;var $x11 = _$0;var $x9 = ($x10)($x11);var $x12 = _$1;var $x8 = ($x9)($x12);var $x13 = _$2;var $x7 = ($x8)($x13);var $x14 = _$3;var $body_tick$3 = ($x7)($x14);var $x0 = ({$: "Body"});var $x15 = _$0;$x0.id = $x15;var $x16 = $body_shape$2;$x0.hitbox = $x16;var $x17 = $body_tick$3;$x0.tick = $x17;var $x18 = ({$: "Nil"});$x0.effects = $x18;var $x19 = ({$: "Untouchable"});$x0.collidable = $x19;return $x0; }
const $disintegrate$create_disintegrate_line = _$0 => _$1 => _$2 => _$3 => _$4 => _$5 => $disintegrate$create_disintegrate_line$(_$0,_$1,_$2,_$3,_$4,_$5)

function $UG$SIPD$Effect$spawn_body$(_$0/*:UG/SIPD/Body*/,_$1/*:UG/SIPD/State*/) {var $x1 = _$1;var $x2 = _$0;var $s$0 = $UG$SIPD$State$insert_body$($x1, $x2);var $x0 = $s$0;return $x0; }
const $UG$SIPD$Effect$spawn_body = _$0 => _$1 => $UG$SIPD$Effect$spawn_body$(_$0,_$1)

function $UG$SIPD$Effect$with_duration$(_$0/*:BigInt*/,_$1/*:BigInt*/,_$2/*:UG/SIPD/Effect*/,_$3/*:UG/SIPD/State*/) {var $x1 = _$3;var $x2 = $x1.game_map;var $x4 = _$1;var $x5 = $x2.bodies;var $x3 = $UG$SIPD$Body$get_body$($x4, $x5);switch ($x3.$) { case "None": { var $x0 = ({$: "State"});var $x6 = $x1.next_id;$x0.next_id = $x6;var $x7 = $x1.tick;$x0.tick = $x7;var $x8 = $x1.players;$x0.players = $x8;var $x9 = $x1.hero_states;$x0.hero_states = $x9;var $x10 = ({$: "GameMap"});var $x11 = $x2.width;$x10.width = $x11;var $x12 = $x2.height;$x10.height = $x12;var $x13 = $x2.bodies;$x10.bodies = $x13;var $x14 = $x2.bodies_count;$x10.bodies_count = $x14;$x0.game_map = $x10; break; } case "Some": { var $x15 = $x3.value;var $x17 = _$0;var $x18 = 0n;var $x16 = $U64$gt$($x17, $x18);switch ($x16.$) { case "False": { var $x19 = _$1;var $x20 = $x2.bodies;var $updated_bodies$0 = $UG$SIPD$Body$delete_body$($x19, $x20);var $x0 = ({$: "State"});var $x21 = $x1.next_id;$x0.next_id = $x21;var $x22 = $x1.tick;$x0.tick = $x22;var $x23 = $x1.players;$x0.players = $x23;var $x24 = $x1.hero_states;$x0.hero_states = $x24;var $x25 = ({$: "GameMap"});var $x26 = $x2.width;$x25.width = $x26;var $x27 = $x2.height;$x25.height = $x27;var $x28 = $updated_bodies$0;$x25.bodies = $x28;var $x29 = $x2.bodies_count;$x25.bodies_count = $x29;$x0.game_map = $x25; break; } case "True": { var $x30 = _$0;var $x31 = 1n;var $remaining_ticks$0 = BigInt.asUintN(64, $x30 - $x31);var $x34 = $UG$SIPD$Effect$with_duration;var $x35 = $remaining_ticks$0;var $x33 = ($x34)($x35);var $x36 = _$1;var $x32 = ($x33)($x36);var $x37 = _$2;var $new_effect$1 = ($x32)($x37);var $x38 = ({$: "State"});var $x39 = $x1.next_id;$x38.next_id = $x39;var $x40 = $x1.tick;$x38.tick = $x40;var $x41 = $x1.players;$x38.players = $x41;var $x42 = $x1.hero_states;$x38.hero_states = $x42;var $x43 = ({$: "GameMap"});var $x44 = $x2.width;$x43.width = $x44;var $x45 = $x2.height;$x43.height = $x45;var $x46 = $x2.bodies;$x43.bodies = $x46;var $x47 = $x2.bodies_count;$x43.bodies_count = $x47;$x38.game_map = $x43;var $x48 = ({$: "Body"});var $x49 = $x15.id;$x48.id = $x49;var $x50 = $x15.hitbox;$x48.hitbox = $x50;var $x51 = $x15.tick;$x48.tick = $x51;var $x52 = ({$: "Cons"});var $x53 = $new_effect$1;$x52.head = $x53;var $x54 = $x15.effects;$x52.tail = $x54;$x48.effects = $x52;var $x55 = $x15.collidable;$x48.collidable = $x55;var $state$2 = $UG$SIPD$State$insert_body$($x38, $x48);var $x56 = _$2;var $x57 = $state$2;var $x0 = $UG$SIPD$Effect$apply$($x56, $x57); break; } } break; } }return $x0; }
const $UG$SIPD$Effect$with_duration = _$0 => _$1 => _$2 => _$3 => $UG$SIPD$Effect$with_duration$(_$0,_$1,_$2,_$3)

function $UG$SIPD$Hero$HeroState$update_cooldown$(_$0/*:BigInt*/,_$1/*:String*/,_$2/*:UG/SIPD/State*/,_$3/*:BigInt*/) {var $x1 = _$2;var $x3 = $UG$SIPD$Hero$HeroState;var $x4 = $x1.hero_states;var $x5 = _$0;var $x2 = $Map$get$($x3, $x4, $x5);switch ($x2.$) { case "None": { var $x0 = ({$: "State"});var $x6 = $x1.next_id;$x0.next_id = $x6;var $x7 = $x1.tick;$x0.tick = $x7;var $x8 = $x1.players;$x0.players = $x8;var $x9 = $x1.hero_states;$x0.hero_states = $x9;var $x10 = $x1.game_map;$x0.game_map = $x10; break; } case "Some": { var $x11 = $x2.value;var $x12 = $String;var $x13 = /*BigInt*/null;var $x14 = $String$Ord;var $x15 = $x11.cooldowns;var $x16 = ({$: "Pair"});var $x17 = _$1;$x16.fst = $x17;var $x18 = _$3;$x16.snd = $x18;var $new_cooldowns$0 = $OrdTree$insert$($x12, $x13, $x14, $x15, $x16);var $x19 = $UG$SIPD$Hero$HeroState;var $x20 = $x1.hero_states;var $x21 = _$0;var $x22 = ({$: "HeroState"});var $x23 = $new_cooldowns$0;$x22.cooldowns = $x23;var $x24 = $x11.health;$x22.health = $x24;var $new_hero_states$1 = $Map$insert$($x19, $x20, $x21, $x22);var $x0 = ({$: "State"});var $x25 = $x1.next_id;$x0.next_id = $x25;var $x26 = $x1.tick;$x0.tick = $x26;var $x27 = $x1.players;$x0.players = $x27;var $x28 = $new_hero_states$1;$x0.hero_states = $x28;var $x29 = $x1.game_map;$x0.game_map = $x29; break; } }return $x0; }
const $UG$SIPD$Hero$HeroState$update_cooldown = _$0 => _$1 => _$2 => _$3 => $UG$SIPD$Hero$HeroState$update_cooldown$(_$0,_$1,_$2,_$3)

function $disintegrate$block_player_movement$(_$0/*:BigInt*/,_$1/*:BigInt*/,_$2/*:UG/SIPD/State*/) {var $movement_key$0 = JSTR_TO_LIST(`RightClick`);var $x1 = _$1;var $x2 = $movement_key$0;var $x3 = _$2;var $x4 = _$0;var $x0 = $UG$SIPD$Hero$HeroState$update_cooldown$($x1, $x2, $x3, $x4);return $x0; }
const $disintegrate$block_player_movement = _$0 => _$1 => _$2 => $disintegrate$block_player_movement$(_$0,_$1,_$2)

function $UG$SIPD$Effect$disintegrate$(_$0/*:BigInt*/,_$1/*:BigInt*/,_$2/*:Number*/,_$3/*:Number*/,_$4/*:UG/SIPD/State*/) {var $x1 = _$4;var $x2 = $x1.game_map;var $x4 = $UG$SIPD$Player;var $x5 = $x1.players;var $x6 = _$0;var $x3 = $Map$get$($x4, $x5, $x6);switch ($x3.$) { case "None": { var $x0 = ({$: "State"});var $x7 = $x1.next_id;$x0.next_id = $x7;var $x8 = $x1.tick;$x0.tick = $x8;var $x9 = $x1.players;$x0.players = $x9;var $x10 = $x1.hero_states;$x0.hero_states = $x10;var $x11 = ({$: "GameMap"});var $x12 = $x2.width;$x11.width = $x12;var $x13 = $x2.height;$x11.height = $x13;var $x14 = $x2.bodies;$x11.bodies = $x14;var $x15 = $x2.bodies_count;$x11.bodies_count = $x15;$x0.game_map = $x11; break; } case "Some": { var $x16 = $x3.value;var $got$0 = $x16.hero;var $x17 = $got$0;var $x18 = $x17.body_id;var $x19 = $x2.bodies;var $hero_body$1 = $UG$SIPD$Body$get_body$($x18, $x19);var $x20 = $hero_body$1;switch ($x20.$) { case "None": { var $x0 = ({$: "State"});var $x21 = $x1.next_id;$x0.next_id = $x21;var $x22 = $x1.tick;$x0.tick = $x22;var $x23 = $x1.players;$x0.players = $x23;var $x24 = $x1.hero_states;$x0.hero_states = $x24;var $x25 = ({$: "GameMap"});var $x26 = $x2.width;$x25.width = $x26;var $x27 = $x2.height;$x25.height = $x27;var $x28 = $x2.bodies;$x25.bodies = $x28;var $x29 = $x2.bodies_count;$x25.bodies_count = $x29;$x0.game_map = $x25; break; } case "Some": { var $got$2 = $x20.value;var $x30 = $got$2;var $x31 = $x30.hitbox;var $hero_pos$3 = $UG$Shape$get_center$($x31);var $x32 = ({$: "Player"});var $x33 = $x16.id;$x32.id = $x33;var $x34 = $x16.name;$x32.name = $x34;var $x35 = $x16.keys;$x32.keys = $x35;var $x36 = $x16.target;$x32.target = $x36;var $x37 = $x16.hero;$x32.hero = $x37;var $x38 = JSTR_TO_LIST(`R`);var $target$4 = $UG$SIPD$Player$get_mouse_pos$($x32, $x38);var $x40 = $target$4;var $x41 = $hero_pos$3;var $x39 = $V2$sub$($x40, $x41);var $direction$5 = $V2$normalize$($x39);var $x42 = $hero_pos$3;var $x44 = $direction$5;var $x45 = _$3;var $x43 = $V2$mul_scalar$($x44, $x45);var $line_end$6 = $V2$add$($x42, $x43);var $x46 = ({$: "State"});var $x47 = $x1.next_id;$x46.next_id = $x47;var $x48 = $x1.tick;$x46.tick = $x48;var $x49 = $x1.players;$x46.players = $x49;var $x50 = $x1.hero_states;$x46.hero_states = $x50;var $x51 = ({$: "GameMap"});var $x52 = $x2.width;$x51.width = $x52;var $x53 = $x2.height;$x51.height = $x53;var $x54 = $x2.bodies;$x51.bodies = $x54;var $x55 = $x2.bodies_count;$x51.bodies_count = $x55;$x46.game_map = $x51;var $got$7 = $UG$SIPD$State$generate_id$($x46);var $x56 = $got$7;var $x57 = $x56.fst;var $x58 = _$0;var $x59 = _$2;var $x60 = _$3;var $x61 = $hero_pos$3;var $x62 = $line_end$6;var $disintegrate_line$8 = $disintegrate$create_disintegrate_line$($x57, $x58, $x59, $x60, $x61, $x62);var $x63 = $UG$SIPD$Effect$spawn_body;var $x64 = $disintegrate_line$8;var $spawn_effect$9 = ($x63)($x64);var $x67 = $UG$SIPD$Effect$with_duration;var $x68 = _$1;var $x66 = ($x67)($x68);var $x69 = $x56.fst;var $x65 = ($x66)($x69);var $x73 = $UG$SIPD$Effect$collide_and_dps;var $x74 = $x30.id;var $x72 = ($x73)($x74);var $x75 = $x56.fst;var $x71 = ($x72)($x75);var $x76 = 10n;var $x70 = ($x71)($x76);var $with_duration$10 = ($x65)($x70);var $x77 = $spawn_effect$9;var $x78 = $x56.snd;var $state$11 = $UG$SIPD$Effect$apply$($x77, $x78);var $x79 = _$1;var $x80 = _$0;var $x81 = $state$11;var $state$12 = $disintegrate$block_player_movement$($x79, $x80, $x81);var $x82 = $with_duration$10;var $x83 = $state$12;var $state$13 = $UG$SIPD$Effect$apply$($x82, $x83);var $x0 = $state$13; break; } } break; } }return $x0; }
const $UG$SIPD$Effect$disintegrate = _$0 => _$1 => _$2 => _$3 => _$4 => $UG$SIPD$Effect$disintegrate$(_$0,_$1,_$2,_$3,_$4)

function $V2$reflect$(_$0/*:V2*/,_$1/*:V2*/) {var $x1 = _$0;var $x3 = _$1;var $x5 = 2.0;var $x7 = _$0;var $x8 = _$1;var $x6 = $V2$dot$($x7, $x8);var $x4 = $F64$mul$($x5, $x6);var $x2 = $V2$mul_scalar$($x3, $x4);var $x0 = $V2$sub$($x1, $x2);return $x0; }
const $V2$reflect = _$0 => _$1 => $V2$reflect$(_$0,_$1)

function $knockback$handle_collidable$(_$0/*:V2*/,_$1/*:UG/SIPD/Body*/,_$2/*:UG/SIPD/Body*/,_$3/*:UG/SIPD/State*/) {var $x1 = _$1;var $x2 = _$2;var $x3 = ({$: "Pair"});var $x4 = $x1.collidable;$x3.fst = $x4;var $x5 = $x2.collidable;$x3.snd = $x5;var $x6 = $x3.snd;switch ($x6.$) { case "TakesEffects": { var $got$0 = _$3;var $x7 = $got$0;var $x8 = $UG$SIPD$Player;var $x9 = $x7.players;var $x10 = $x2.id;var $maybe_player$1 = $Map$get$($x8, $x9, $x10);var $x11 = $maybe_player$1;switch ($x11.$) { case "None": { var $x0 = _$3; break; } case "Some": { var $got$2 = $x11.value;var $x12 = $got$2;var $x13 = $x12.target;var $normal$3 = $V2$normalize$($x13);var $x14 = _$0;var $x15 = $normal$3;var $reflected_force$4 = $V2$reflect$($x14, $x15);var $x16 = $x2.hitbox;var $x17 = $reflected_force$4;var $new_hitbox$5 = $UG$Shape$move$($x16, $x17);var $x18 = $new_hitbox$5;var $new_target$6 = $UG$Shape$get_center$($x18);var $x19 = $UG$SIPD$Player;var $x20 = $x7.players;var $x21 = $x12.id;var $x22 = ({$: "Player"});var $x23 = $x12.id;$x22.id = $x23;var $x24 = $x12.name;$x22.name = $x24;var $x25 = $x12.keys;$x22.keys = $x25;var $x26 = $new_target$6;$x22.target = $x26;var $x27 = $x12.hero;$x22.hero = $x27;var $updated_players$7 = $Map$insert$($x19, $x20, $x21, $x22);var $x28 = $x7.game_map;var $x29 = ({$: "Body"});var $x30 = $x2.id;$x29.id = $x30;var $x31 = $new_hitbox$5;$x29.hitbox = $x31;var $x32 = $x2.tick;$x29.tick = $x32;var $x33 = $x2.effects;$x29.effects = $x33;var $x34 = $x2.collidable;$x29.collidable = $x34;var $updated_map$8 = $UG$SIPD$GameMap$insert_body$($x28, $x29);var $x0 = ({$: "State"});var $x35 = $x7.next_id;$x0.next_id = $x35;var $x36 = $x7.tick;$x0.tick = $x36;var $x37 = $updated_players$7;$x0.players = $x37;var $x38 = $x7.hero_states;$x0.hero_states = $x38;var $x39 = $updated_map$8;$x0.game_map = $x39; break; } } break; } default: { var $x0 = _$3; break; } }return $x0; }
const $knockback$handle_collidable = _$0 => _$1 => _$2 => _$3 => $knockback$handle_collidable$(_$0,_$1,_$2,_$3)

function $UG$SIPD$Effect$knockback$(_$0/*:BigInt*/,_$1/*:BigInt*/,_$2/*:V2*/,_$3/*:UG/SIPD/State*/) {var $x1 = _$3;var $got$0 = $x1.game_map;var $x2 = $got$0;var $x3 = $UG$SIPD$Body;var $x4 = $x2.bodies;var $x5 = $x2.bodies_count;var $bodies_list$1 = $Map$values$($x3, $x4, $x5);var $x7 = $x2.bodies;var $x8 = _$1;var $x6 = $UG$SIPD$GameMap$get_body$($x7, $x8);switch ($x6.$) { case "Some": { var $got$2 = $x6.value;var $x9 = $got$2;var $x10 = _$0;var $x11 = $x6.value;var $x12 = $bodies_list$1;var $collision_result$3 = $UG$SIPD$Body$find_collision$($x10, $x11, $x12);var $x13 = $collision_result$3;switch ($x13.$) { case "None": { var $x0 = ({$: "State"});var $x14 = $x1.next_id;$x0.next_id = $x14;var $x15 = $x1.tick;$x0.tick = $x15;var $x16 = $x1.players;$x0.players = $x16;var $x17 = $x1.hero_states;$x0.hero_states = $x17;var $x18 = $x1.game_map;$x0.game_map = $x18; break; } case "Some": { var $got$4 = $x13.value;var $x19 = $got$4;var $x20 = _$2;var $x21 = $x6.value;var $x22 = $x19.snd;var $x23 = ({$: "State"});var $x24 = $x1.next_id;$x23.next_id = $x24;var $x25 = $x1.tick;$x23.tick = $x25;var $x26 = $x1.players;$x23.players = $x26;var $x27 = $x1.hero_states;$x23.hero_states = $x27;var $x28 = $x1.game_map;$x23.game_map = $x28;var $x0 = $knockback$handle_collidable$($x20, $x21, $x22, $x23); break; } } break; } case "None": { var $x0 = ({$: "State"});var $x29 = $x1.next_id;$x0.next_id = $x29;var $x30 = $x1.tick;$x0.tick = $x30;var $x31 = $x1.players;$x0.players = $x31;var $x32 = $x1.hero_states;$x0.hero_states = $x32;var $x33 = $x1.game_map;$x0.game_map = $x33; break; } }return $x0; }
const $UG$SIPD$Effect$knockback = _$0 => _$1 => _$2 => _$3 => $UG$SIPD$Effect$knockback$(_$0,_$1,_$2,_$3)

function $V2$perpendicular$(_$0/*:V2*/) {var $x1 = _$0;var $x0 = ({$: "V2"});var $x3 = $x1.y;var $x2 = $F64$negate$($x3);$x0.x = $x2;var $x4 = $x1.x;$x0.y = $x4;return $x0; }
const $V2$perpendicular = _$0 => $V2$perpendicular$(_$0)

function $magic_missiles$calculate_targets$(_$0/*:V2*/,_$1/*:V2*/,_$2/*:Number*/) {var $x2 = _$1;var $x3 = _$0;var $x1 = $V2$sub$($x2, $x3);var $direction$0 = $V2$normalize$($x1);var $x4 = _$0;var $x6 = $direction$0;var $x7 = _$2;var $x5 = $V2$mul_scalar$($x6, $x7);var $max_target$1 = $V2$add$($x4, $x5);var $x10 = _$1;var $x11 = _$0;var $x9 = $V2$sub$($x10, $x11);var $x8 = $V2$length$($x9);var $x12 = _$2;var $distance$2 = $F64$min$($x8, $x12);var $x13 = $direction$0;var $perpend$3 = $V2$perpendicular$($x13);var $x15 = 1.0;var $x17 = $distance$2;var $x18 = _$2;var $x16 = $F64$div$($x17, $x18);var $x14 = $F64$sub$($x15, $x16);var $x19 = 0.5;var $spread$4 = $F64$mul$($x14, $x19);var $x20 = $perpend$3;var $x22 = $spread$4;var $x23 = _$2;var $x21 = $F64$mul$($x22, $x23);var $side_offset$5 = $V2$mul_scalar$($x20, $x21);var $x24 = $max_target$1;var $x25 = $side_offset$5;var $left_target$6 = $V2$sub$($x24, $x25);var $x26 = $max_target$1;var $x27 = $side_offset$5;var $right_target$7 = $V2$add$($x26, $x27);var $x0 = ({$: "Pair"});var $x28 = $max_target$1;$x0.fst = $x28;var $x29 = ({$: "Pair"});var $x30 = $left_target$6;$x29.fst = $x30;var $x31 = $right_target$7;$x29.snd = $x31;$x0.snd = $x29;return $x0; }
const $magic_missiles$calculate_targets = _$0 => _$1 => _$2 => $magic_missiles$calculate_targets$(_$0,_$1,_$2)

function $UG$Shape$circle$(_$0/*:V2*/,_$1/*:Number*/) {var $x0 = ({$: "Circle"});var $x1 = _$0;$x0.center = $x1;var $x2 = _$1;$x0.radius = $x2;return $x0; }
const $UG$Shape$circle = _$0 => _$1 => $UG$Shape$circle$(_$0,_$1)

function $magic_missiles$tick_projectile$(_$0/*:BigInt*/,_$1/*:UG/SIPD/State*/) {var $x1 = _$1;var $x2 = $x1.game_map;var $x4 = _$0;var $x5 = $x2.bodies;var $x3 = $UG$SIPD$Body$get_body$($x4, $x5);switch ($x3.$) { case "None": { var $x0 = ({$: "State"});var $x6 = $x1.next_id;$x0.next_id = $x6;var $x7 = $x1.tick;$x0.tick = $x7;var $x8 = $x1.players;$x0.players = $x8;var $x9 = $x1.hero_states;$x0.hero_states = $x9;var $x10 = ({$: "GameMap"});var $x11 = $x2.width;$x10.width = $x11;var $x12 = $x2.height;$x10.height = $x12;var $x13 = $x2.bodies;$x10.bodies = $x13;var $x14 = $x2.bodies_count;$x10.bodies_count = $x14;$x0.game_map = $x10; break; } case "Some": { var $x15 = $x3.value;var $x16 = ({$: "State"});var $x17 = $x1.next_id;$x16.next_id = $x17;var $x18 = $x1.tick;$x16.tick = $x18;var $x19 = $x1.players;$x16.players = $x19;var $x20 = $x1.hero_states;$x16.hero_states = $x20;var $x21 = ({$: "GameMap"});var $x22 = $x2.width;$x21.width = $x22;var $x23 = $x2.height;$x21.height = $x23;var $x24 = $x2.bodies;$x21.bodies = $x24;var $x25 = $x2.bodies_count;$x21.bodies_count = $x25;$x16.game_map = $x21;var $x0 = $UG$SIPD$Body$apply_effects$($x15, $x16); break; } }return $x0; }
const $magic_missiles$tick_projectile = _$0 => _$1 => $magic_missiles$tick_projectile$(_$0,_$1)

function $magic_missiles$create_projectile$(_$0/*:BigInt*/,_$1/*:V2*/,_$2/*:V2*/,_$3/*:Number*/) {var $x0 = ({$: "Body"});var $x1 = _$0;$x0.id = $x1;var $x3 = _$1;var $x4 = _$3;var $x2 = $UG$Shape$circle$($x3, $x4);$x0.hitbox = $x2;var $x6 = $magic_missiles$tick_projectile;var $x7 = _$0;var $x5 = ($x6)($x7);$x0.tick = $x5;var $x8 = ({$: "Nil"});$x0.effects = $x8;var $x9 = ({$: "TakesEffects"});$x0.collidable = $x9;return $x0; }
const $magic_missiles$create_projectile = _$0 => _$1 => _$2 => _$3 => $magic_missiles$create_projectile$(_$0,_$1,_$2,_$3)

function $UG$SIPD$GameMap$update_body$(_$0/*:UG/SIPD/GameMap*/,_$1/*:UG/SIPD/Body*/) {var $x1 = _$0;var $x2 = _$1;var $x3 = $UG$SIPD$Body;var $x4 = $x1.bodies;var $x5 = $x2.id;var $x6 = ({$: "Body"});var $x7 = $x2.id;$x6.id = $x7;var $x8 = $x2.hitbox;$x6.hitbox = $x8;var $x9 = $x2.tick;$x6.tick = $x9;var $x10 = $x2.effects;$x6.effects = $x10;var $x11 = $x2.collidable;$x6.collidable = $x11;var $new_bodies$0 = $Map$update$($x3, $x4, $x5, $x6);var $x13 = $x2.id;var $x14 = $x1.bodies_count;var $x12 = $U64$gt$($x13, $x14);switch ($x12.$) { case "True": { var $x0 = ({$: "GameMap"});var $x15 = $x1.width;$x0.width = $x15;var $x16 = $x1.height;$x0.height = $x16;var $x17 = $new_bodies$0;$x0.bodies = $x17;var $x18 = $x2.id;$x0.bodies_count = $x18; break; } case "False": { var $x0 = ({$: "GameMap"});var $x19 = $x1.width;$x0.width = $x19;var $x20 = $x1.height;$x0.height = $x20;var $x21 = $new_bodies$0;$x0.bodies = $x21;var $x22 = $x1.bodies_count;$x0.bodies_count = $x22; break; } }return $x0; }
const $UG$SIPD$GameMap$update_body = _$0 => _$1 => $UG$SIPD$GameMap$update_body$(_$0,_$1)

function $UG$SIPD$State$update_body$(_$0/*:UG/SIPD/State*/,_$1/*:UG/SIPD/Body*/) {var $x1 = _$0;var $x2 = $x1.game_map;var $x3 = _$1;var $new_game_map$0 = $UG$SIPD$GameMap$update_body$($x2, $x3);var $x0 = ({$: "State"});var $x4 = $x1.next_id;$x0.next_id = $x4;var $x5 = $x1.tick;$x0.tick = $x5;var $x6 = $x1.players;$x0.players = $x6;var $x7 = $x1.hero_states;$x0.hero_states = $x7;var $x8 = $new_game_map$0;$x0.game_map = $x8;return $x0; }
const $UG$SIPD$State$update_body = _$0 => _$1 => $UG$SIPD$State$update_body$(_$0,_$1)

function $UG$SIPD$Effect$move_range$(_$0/*:BigInt*/,_$1/*:V2*/,_$2/*:Number*/,_$3/*:BigInt*/,_$4/*:UG/SIPD/Effect*/,_$5/*:UG/SIPD/State*/) {var $x1 = _$5;var $x2 = $x1.game_map;var $x4 = _$0;var $x5 = $x2.bodies;var $x3 = $UG$SIPD$Body$get_body$($x4, $x5);switch ($x3.$) { case "None": { var $x0 = ({$: "State"});var $x6 = $x1.next_id;$x0.next_id = $x6;var $x7 = $x1.tick;$x0.tick = $x7;var $x8 = $x1.players;$x0.players = $x8;var $x9 = $x1.hero_states;$x0.hero_states = $x9;var $x10 = ({$: "GameMap"});var $x11 = $x2.width;$x10.width = $x11;var $x12 = $x2.height;$x10.height = $x12;var $x13 = $x2.bodies;$x10.bodies = $x13;var $x14 = $x2.bodies_count;$x10.bodies_count = $x14;$x0.game_map = $x10; break; } case "Some": { var $x15 = $x3.value;var $x16 = $x15.hitbox;var $hitbox_center$0 = $UG$Shape$get_center$($x16);var $x17 = _$1;var $x18 = $hitbox_center$0;var $distance_to_target$1 = $V2$sub$($x17, $x18);var $x19 = $distance_to_target$1;var $ln$2 = $V2$length$($x19);var $x22 = $ln$2;var $x23 = 3.0;var $x21 = $F64$lt$($x22, $x23);var $x25 = _$2;var $x26 = 0.0;var $x24 = $F64$lte$($x25, $x26);var $x20 = $Bool$or$($x21, $x24);switch ($x20.$) { case "True": { var $x0 = ({$: "State"});var $x27 = $x1.next_id;$x0.next_id = $x27;var $x28 = $x1.tick;$x0.tick = $x28;var $x29 = $x1.players;$x0.players = $x29;var $x30 = $x1.hero_states;$x0.hero_states = $x30;var $x31 = ({$: "GameMap"});var $x32 = $x2.width;$x31.width = $x32;var $x33 = $x2.height;$x31.height = $x33;var $x34 = $x2.bodies;$x31.bodies = $x34;var $x35 = $x2.bodies_count;$x31.bodies_count = $x35;$x0.game_map = $x31; break; } case "False": { var $constant_speed$3 = 10.0;var $x36 = $constant_speed$3;var $x37 = _$2;var $move_distance$4 = $F64$min$($x36, $x37);var $x38 = $distance_to_target$1;var $direction$5 = $V2$normalize$($x38);var $x39 = $direction$5;var $x40 = $move_distance$4;var $movement$6 = $V2$mul_scalar$($x39, $x40);var $x41 = $x15.hitbox;var $x42 = $movement$6;var $new_hitbox$7 = $UG$Shape$move$($x41, $x42);var $x43 = ({$: "State"});var $x44 = $x1.next_id;$x43.next_id = $x44;var $x45 = $x1.tick;$x43.tick = $x45;var $x46 = $x1.players;$x43.players = $x46;var $x47 = $x1.hero_states;$x43.hero_states = $x47;var $x48 = ({$: "GameMap"});var $x49 = $x2.width;$x48.width = $x49;var $x50 = $x2.height;$x48.height = $x50;var $x51 = $x2.bodies;$x48.bodies = $x51;var $x52 = $x2.bodies_count;$x48.bodies_count = $x52;$x43.game_map = $x48;var $x53 = ({$: "Body"});var $x54 = $x15.id;$x53.id = $x54;var $x55 = $new_hitbox$7;$x53.hitbox = $x55;var $x56 = $x15.tick;$x53.tick = $x56;var $x57 = $x15.effects;$x53.effects = $x57;var $x58 = $x15.collidable;$x53.collidable = $x58;var $updated_state$8 = $UG$SIPD$State$update_body$($x43, $x53);var $x59 = _$4;var $x60 = $updated_state$8;var $state$9 = $UG$SIPD$Effect$apply$($x59, $x60);var $x62 = _$3;var $x63 = 0n;var $x61 = $U64$gt$($x62, $x63);switch ($x61.$) { case "True": { var $x68 = $UG$SIPD$Effect$move_range;var $x69 = _$0;var $x67 = ($x68)($x69);var $x70 = _$1;var $x66 = ($x67)($x70);var $x71 = _$2;var $x65 = ($x66)($x71);var $x73 = _$3;var $x74 = 1n;var $x72 = BigInt.asUintN(64, $x73 - $x74);var $x64 = ($x65)($x72);var $x75 = _$4;var $new_effect$10 = ($x64)($x75);var $x76 = $state$9;var $x77 = ({$: "Body"});var $x78 = $x15.id;$x77.id = $x78;var $x79 = $new_hitbox$7;$x77.hitbox = $x79;var $x80 = $x15.tick;$x77.tick = $x80;var $x81 = ({$: "Cons"});var $x82 = $new_effect$10;$x81.head = $x82;var $x83 = $x15.effects;$x81.tail = $x83;$x77.effects = $x81;var $x84 = $x15.collidable;$x77.collidable = $x84;var $x0 = $UG$SIPD$State$update_body$($x76, $x77); break; } case "False": { var $x85 = $state$9;var $x86 = _$0;var $x0 = $UG$SIPD$State$delete_body$($x85, $x86); break; } } break; } } break; } }return $x0; }
const $UG$SIPD$Effect$move_range = _$0 => _$1 => _$2 => _$3 => _$4 => _$5 => $UG$SIPD$Effect$move_range$(_$0,_$1,_$2,_$3,_$4,_$5)

function $magic_missiles$go$(_$0/*:UG/SIPD/Body*/,_$1/*:UG/SIPD/Player*/,_$2/*:Number*/,_$3/*:BigInt*/,_$4/*:Number*/,_$5/*:UG/SIPD/State*/) {var $x1 = _$0;var $x2 = _$1;var $x3 = $x1.hitbox;var $hero_pos$0 = $UG$Shape$get_center$($x3);var $x4 = ({$: "Player"});var $x5 = $x2.id;$x4.id = $x5;var $x6 = $x2.name;$x4.name = $x6;var $x7 = $x2.keys;$x4.keys = $x7;var $x8 = $x2.target;$x4.target = $x8;var $x9 = $x2.hero;$x4.hero = $x9;var $x10 = JSTR_TO_LIST(`Q`);var $mouse_pos$1 = $UG$SIPD$Player$get_mouse_pos$($x4, $x10);var $click_pos$2 = $x2.target;var $x11 = $hero_pos$0;var $x12 = $mouse_pos$1;var $x13 = _$2;var $got$3 = $magic_missiles$calculate_targets$($x11, $x12, $x13);var $x14 = $got$3;var $got$4 = $x14.snd;var $x15 = $got$4;var $x16 = _$5;var $got$5 = $UG$SIPD$State$generate_id$($x16);var $x17 = $got$5;var $x18 = $x17.fst;var $x19 = $hero_pos$0;var $x20 = $x14.fst;var $x21 = _$4;var $projectile1$6 = $magic_missiles$create_projectile$($x18, $x19, $x20, $x21);var $x22 = $x17.snd;var $got$7 = $UG$SIPD$State$generate_id$($x22);var $x23 = $got$7;var $x24 = $x23.fst;var $x25 = $hero_pos$0;var $x26 = $x15.fst;var $x27 = _$4;var $projectile2$8 = $magic_missiles$create_projectile$($x24, $x25, $x26, $x27);var $x28 = $x23.snd;var $got$9 = $UG$SIPD$State$generate_id$($x28);var $x29 = $got$9;var $x30 = $x29.fst;var $x31 = $hero_pos$0;var $x32 = $x15.snd;var $x33 = _$4;var $projectile3$10 = $magic_missiles$create_projectile$($x30, $x31, $x32, $x33);var $x34 = $UG$SIPD$Effect$spawn_body;var $x35 = $projectile1$6;var $spawn_effect1$11 = ($x34)($x35);var $x40 = $UG$SIPD$Effect$move_range;var $x41 = $x17.fst;var $x39 = ($x40)($x41);var $x42 = $x15.fst;var $x38 = ($x39)($x42);var $x43 = _$2;var $x37 = ($x38)($x43);var $x44 = _$3;var $x36 = ($x37)($x44);var $x48 = $UG$SIPD$Effect$collide_and_damage;var $x49 = $x2.id;var $x47 = ($x48)($x49);var $x50 = $x17.fst;var $x46 = ($x47)($x50);var $x51 = 10n;var $x45 = ($x46)($x51);var $move_effect1$12 = ($x36)($x45);var $x52 = $UG$SIPD$Effect$spawn_body;var $x53 = $projectile2$8;var $spawn_effect2$13 = ($x52)($x53);var $x58 = $UG$SIPD$Effect$move_range;var $x59 = $x23.fst;var $x57 = ($x58)($x59);var $x60 = $x14.fst;var $x56 = ($x57)($x60);var $x61 = _$2;var $x55 = ($x56)($x61);var $x62 = _$3;var $x54 = ($x55)($x62);var $x66 = $UG$SIPD$Effect$collide_and_damage;var $x67 = $x2.id;var $x65 = ($x66)($x67);var $x68 = $x23.fst;var $x64 = ($x65)($x68);var $x69 = 10n;var $x63 = ($x64)($x69);var $move_effect2$14 = ($x54)($x63);var $x70 = $UG$SIPD$Effect$spawn_body;var $x71 = $projectile3$10;var $spawn_effect3$15 = ($x70)($x71);var $x76 = $UG$SIPD$Effect$move_range;var $x77 = $x29.fst;var $x75 = ($x76)($x77);var $x78 = $x15.snd;var $x74 = ($x75)($x78);var $x79 = _$2;var $x73 = ($x74)($x79);var $x80 = _$3;var $x72 = ($x73)($x80);var $x84 = $UG$SIPD$Effect$collide_and_damage;var $x85 = $x2.id;var $x83 = ($x84)($x85);var $x86 = $x29.fst;var $x82 = ($x83)($x86);var $x87 = 10n;var $x81 = ($x82)($x87);var $move_effect3$16 = ($x72)($x81);var $x88 = $spawn_effect1$11;var $x89 = $x29.snd;var $state$17 = $UG$SIPD$Effect$apply$($x88, $x89);var $x90 = $spawn_effect2$13;var $x91 = $state$17;var $state$18 = $UG$SIPD$Effect$apply$($x90, $x91);var $x92 = $spawn_effect3$15;var $x93 = $state$18;var $state$19 = $UG$SIPD$Effect$apply$($x92, $x93);var $x94 = $move_effect1$12;var $x95 = $state$19;var $state$20 = $UG$SIPD$Effect$apply$($x94, $x95);var $x96 = $move_effect2$14;var $x97 = $state$20;var $state$21 = $UG$SIPD$Effect$apply$($x96, $x97);var $x98 = $move_effect3$16;var $x99 = $state$21;var $state$22 = $UG$SIPD$Effect$apply$($x98, $x99);var $x0 = $state$22;return $x0; }
const $magic_missiles$go = _$0 => _$1 => _$2 => _$3 => _$4 => _$5 => $magic_missiles$go$(_$0,_$1,_$2,_$3,_$4,_$5)

function $UG$SIPD$Effect$magic_missiles$(_$0/*:BigInt*/,_$1/*:Number*/,_$2/*:BigInt*/,_$3/*:Number*/,_$4/*:UG/SIPD/State*/) {var $x1 = _$4;var $x2 = $x1.game_map;var $x4 = $UG$SIPD$Player;var $x5 = $x1.players;var $x6 = _$0;var $x3 = $Map$get$($x4, $x5, $x6);switch ($x3.$) { case "None": { var $x0 = ({$: "State"});var $x7 = $x1.next_id;$x0.next_id = $x7;var $x8 = $x1.tick;$x0.tick = $x8;var $x9 = $x1.players;$x0.players = $x9;var $x10 = $x1.hero_states;$x0.hero_states = $x10;var $x11 = ({$: "GameMap"});var $x12 = $x2.width;$x11.width = $x12;var $x13 = $x2.height;$x11.height = $x13;var $x14 = $x2.bodies;$x11.bodies = $x14;var $x15 = $x2.bodies_count;$x11.bodies_count = $x15;$x0.game_map = $x11; break; } case "Some": { var $x16 = $x3.value;var $x17 = $x16.hero;var $x19 = $x17.body_id;var $x20 = $x2.bodies;var $x18 = $UG$SIPD$Body$get_body$($x19, $x20);switch ($x18.$) { case "None": { var $x0 = ({$: "State"});var $x21 = $x1.next_id;$x0.next_id = $x21;var $x22 = $x1.tick;$x0.tick = $x22;var $x23 = $x1.players;$x0.players = $x23;var $x24 = $x1.hero_states;$x0.hero_states = $x24;var $x25 = ({$: "GameMap"});var $x26 = $x2.width;$x25.width = $x26;var $x27 = $x2.height;$x25.height = $x27;var $x28 = $x2.bodies;$x25.bodies = $x28;var $x29 = $x2.bodies_count;$x25.bodies_count = $x29;$x0.game_map = $x25; break; } case "Some": { var $x30 = $x18.value;var $x31 = ({$: "Player"});var $x32 = $x16.id;$x31.id = $x32;var $x33 = $x16.name;$x31.name = $x33;var $x34 = $x16.keys;$x31.keys = $x34;var $x35 = $x16.target;$x31.target = $x35;var $x36 = ({$: "Hero"});var $x37 = $x17.owner_id;$x36.owner_id = $x37;var $x38 = $x17.name;$x36.name = $x38;var $x39 = $x17.skills;$x36.skills = $x39;var $x40 = $x17.body_id;$x36.body_id = $x40;$x31.hero = $x36;var $x41 = _$1;var $x42 = _$2;var $x43 = _$3;var $x44 = ({$: "State"});var $x45 = $x1.next_id;$x44.next_id = $x45;var $x46 = $x1.tick;$x44.tick = $x46;var $x47 = $x1.players;$x44.players = $x47;var $x48 = $x1.hero_states;$x44.hero_states = $x48;var $x49 = ({$: "GameMap"});var $x50 = $x2.width;$x49.width = $x50;var $x51 = $x2.height;$x49.height = $x51;var $x52 = $x2.bodies;$x49.bodies = $x52;var $x53 = $x2.bodies_count;$x49.bodies_count = $x53;$x44.game_map = $x49;var $x0 = $magic_missiles$go$($x30, $x31, $x41, $x42, $x43, $x44); break; } } break; } }return $x0; }
const $UG$SIPD$Effect$magic_missiles = _$0 => _$1 => _$2 => _$3 => _$4 => $UG$SIPD$Effect$magic_missiles$(_$0,_$1,_$2,_$3,_$4)

function $UG$SIPD$Effect$move$(_$0/*:BigInt*/,_$1/*:BigInt*/,_$2/*:UG/SIPD/State*/) {var $x1 = _$2;var $x2 = $x1.game_map;var $x3 = ({$: "Pair"});var $x5 = $UG$SIPD$Player;var $x6 = $x1.players;var $x7 = _$0;var $x4 = $Map$get$($x5, $x6, $x7);$x3.fst = $x4;var $x9 = $x2.bodies;var $x10 = _$1;var $x8 = $UG$SIPD$GameMap$get_body$($x9, $x10);$x3.snd = $x8;var $x11 = $x3.fst;switch ($x11.$) { case "None": { var $x12 = $x3.snd;switch ($x12.$) { case "None": { var $x0 = ({$: "State"});var $x13 = $x1.next_id;$x0.next_id = $x13;var $x14 = $x1.tick;$x0.tick = $x14;var $x15 = $x1.players;$x0.players = $x15;var $x16 = $x1.hero_states;$x0.hero_states = $x16;var $x17 = ({$: "GameMap"});var $x18 = $x2.width;$x17.width = $x18;var $x19 = $x2.height;$x17.height = $x19;var $x20 = $x2.bodies;$x17.bodies = $x20;var $x21 = $x2.bodies_count;$x17.bodies_count = $x21;$x0.game_map = $x17; break; } default: { var $x0 = ({$: "State"});var $x22 = $x1.next_id;$x0.next_id = $x22;var $x23 = $x1.tick;$x0.tick = $x23;var $x24 = $x1.players;$x0.players = $x24;var $x25 = $x1.hero_states;$x0.hero_states = $x25;var $x26 = ({$: "GameMap"});var $x27 = $x2.width;$x26.width = $x27;var $x28 = $x2.height;$x26.height = $x28;var $x29 = $x2.bodies;$x26.bodies = $x29;var $x30 = $x2.bodies_count;$x26.bodies_count = $x30;$x0.game_map = $x26; break; } } break; } case "Some": { var $x31 = $x11.value;switch ($x31.$) { case "Player": { var $x32 = $x3.snd;switch ($x32.$) { case "None": { var $x0 = ({$: "State"});var $x33 = $x1.next_id;$x0.next_id = $x33;var $x34 = $x1.tick;$x0.tick = $x34;var $x35 = $x1.players;$x0.players = $x35;var $x36 = $x1.hero_states;$x0.hero_states = $x36;var $x37 = ({$: "GameMap"});var $x38 = $x2.width;$x37.width = $x38;var $x39 = $x2.height;$x37.height = $x39;var $x40 = $x2.bodies;$x37.bodies = $x40;var $x41 = $x2.bodies_count;$x37.bodies_count = $x41;$x0.game_map = $x37; break; } case "Some": { var $x42 = $x32.value;var $old_bodies_count$0 = $x2.bodies_count;var $x43 = $x42.hitbox;var $hitbox_center$1 = $UG$Shape$get_center$($x43);var $x44 = $x31.target;var $x45 = $hitbox_center$1;var $distance_to_target$2 = $V2$sub$($x44, $x45);var $x46 = $distance_to_target$2;var $ln$3 = $V2$length$($x46);var $x48 = $ln$3;var $x49 = 0.1;var $x47 = $F64$lt$($x48, $x49);switch ($x47.$) { case "True": { var $x0 = ({$: "State"});var $x50 = $x1.next_id;$x0.next_id = $x50;var $x51 = $x1.tick;$x0.tick = $x51;var $x52 = $x1.players;$x0.players = $x52;var $x53 = $x1.hero_states;$x0.hero_states = $x53;var $x54 = ({$: "GameMap"});var $x55 = $x2.width;$x54.width = $x55;var $x56 = $x2.height;$x54.height = $x56;var $x57 = $x2.bodies;$x54.bodies = $x57;var $x58 = $old_bodies_count$0;$x54.bodies_count = $x58;$x0.game_map = $x54; break; } case "False": { var $constant_speed$4 = 3.0;var $x59 = $distance_to_target$2;var $direction$5 = $V2$normalize$($x59);var $x60 = $direction$5;var $x62 = $constant_speed$4;var $x63 = $ln$3;var $x61 = $F64$min$($x62, $x63);var $movement$6 = $V2$mul_scalar$($x60, $x61);var $x64 = $UG$SIPD$Body;var $x65 = $x2.bodies;var $x66 = $x2.bodies_count;var $bodies_list$7 = $Map$values$($x64, $x65, $x66);var $x67 = ({$: "Body"});var $x68 = $x42.id;$x67.id = $x68;var $x69 = $x42.hitbox;$x67.hitbox = $x69;var $x70 = $x42.tick;$x67.tick = $x70;var $x71 = $x42.effects;$x67.effects = $x71;var $x72 = $x42.collidable;$x67.collidable = $x72;var $x73 = $movement$6;var $x74 = $bodies_list$7;var $got$8 = $UG$Collision$collide_and_slide$($x67, $x73, $x74);var $x75 = $got$8;var $x76 = $x42.hitbox;var $x78 = $x75.fst;var $x79 = $hitbox_center$1;var $x77 = $V2$sub$($x78, $x79);var $new_hitbox$9 = $UG$Shape$move$($x76, $x77);var $x80 = ({$: "GameMap"});var $x81 = $x2.width;$x80.width = $x81;var $x82 = $x2.height;$x80.height = $x82;var $x83 = $x2.bodies;$x80.bodies = $x83;var $x84 = $x2.bodies_count;$x80.bodies_count = $x84;var $x85 = ({$: "Body"});var $x86 = $x42.id;$x85.id = $x86;var $x87 = $new_hitbox$9;$x85.hitbox = $x87;var $x88 = $x42.tick;$x85.tick = $x88;var $x89 = $x42.effects;$x85.effects = $x89;var $x90 = $x42.collidable;$x85.collidable = $x90;var $updated_map$10 = $UG$SIPD$GameMap$insert_body$($x80, $x85);var $x0 = ({$: "State"});var $x91 = $x1.next_id;$x0.next_id = $x91;var $x92 = $x1.tick;$x0.tick = $x92;var $x93 = $x1.players;$x0.players = $x93;var $x94 = $x1.hero_states;$x0.hero_states = $x94;var $x95 = $updated_map$10;$x0.game_map = $x95; break; } } break; } } break; } default: { var $x97 = /*Type*/null;var $x98 = $x31;var $x96 = ($x97)($x98);var $x99 = $x3.snd;var $x0 = ($x96)($x99); break; } } break; } default: { var $x101 = /*Type*/null;var $x102 = $x11;var $x100 = ($x101)($x102);var $x103 = $x3.snd;var $x0 = ($x100)($x103); break; } }return $x0; }
const $UG$SIPD$Effect$move = _$0 => _$1 => _$2 => $UG$SIPD$Effect$move$(_$0,_$1,_$2)

function $grow_projectile$(_$0/*:UG/SIPD/State*/,_$1/*:BigInt*/) {var $x1 = _$0;var $x2 = $x1.game_map;var $x4 = _$1;var $x5 = $x2.bodies;var $x3 = $UG$SIPD$Body$get_body$($x4, $x5);switch ($x3.$) { case "None": { var $x0 = ({$: "State"});var $x6 = $x1.next_id;$x0.next_id = $x6;var $x7 = $x1.tick;$x0.tick = $x7;var $x8 = $x1.players;$x0.players = $x8;var $x9 = $x1.hero_states;$x0.hero_states = $x9;var $x10 = ({$: "GameMap"});var $x11 = $x2.width;$x10.width = $x11;var $x12 = $x2.height;$x10.height = $x12;var $x13 = $x2.bodies;$x10.bodies = $x13;var $x14 = $x2.bodies_count;$x10.bodies_count = $x14;$x0.game_map = $x10; break; } case "Some": { var $x15 = $x3.value;var $x16 = $x15.hitbox;switch ($x16.$) { case "Circle": { var $growth_factor$0 = 1.05;var $x17 = $x16.radius;var $x18 = $growth_factor$0;var $new_radius$1 = $F64$mul$($x17, $x18);var $x19 = $x16.center;var $x20 = $new_radius$1;var $new_hitbox$2 = $UG$Shape$circle$($x19, $x20);var $x21 = ({$: "State"});var $x22 = $x1.next_id;$x21.next_id = $x22;var $x23 = $x1.tick;$x21.tick = $x23;var $x24 = $x1.players;$x21.players = $x24;var $x25 = $x1.hero_states;$x21.hero_states = $x25;var $x26 = ({$: "GameMap"});var $x27 = $x2.width;$x26.width = $x27;var $x28 = $x2.height;$x26.height = $x28;var $x29 = $x2.bodies;$x26.bodies = $x29;var $x30 = $x2.bodies_count;$x26.bodies_count = $x30;$x21.game_map = $x26;var $x31 = ({$: "Body"});var $x32 = $x15.id;$x31.id = $x32;var $x33 = $new_hitbox$2;$x31.hitbox = $x33;var $x34 = $x15.tick;$x31.tick = $x34;var $x35 = $x15.effects;$x31.effects = $x35;var $x36 = $x15.collidable;$x31.collidable = $x36;var $x0 = $UG$SIPD$State$insert_body$($x21, $x31); break; } case "Polygon": { var $x0 = ({$: "State"});var $x37 = $x1.next_id;$x0.next_id = $x37;var $x38 = $x1.tick;$x0.tick = $x38;var $x39 = $x1.players;$x0.players = $x39;var $x40 = $x1.hero_states;$x0.hero_states = $x40;var $x41 = ({$: "GameMap"});var $x42 = $x2.width;$x41.width = $x42;var $x43 = $x2.height;$x41.height = $x43;var $x44 = $x2.bodies;$x41.bodies = $x44;var $x45 = $x2.bodies_count;$x41.bodies_count = $x45;$x0.game_map = $x41; break; } } break; } }return $x0; }
const $grow_projectile = _$0 => _$1 => $grow_projectile$(_$0,_$1)

function $tick_projectile$(_$0/*:BigInt*/,_$1/*:UG/SIPD/State*/) {var $x1 = _$1;var $x2 = $x1.game_map;var $x4 = _$0;var $x5 = $x2.bodies;var $x3 = $UG$SIPD$Body$get_body$($x4, $x5);switch ($x3.$) { case "None": { var $x0 = ({$: "State"});var $x6 = $x1.next_id;$x0.next_id = $x6;var $x7 = $x1.tick;$x0.tick = $x7;var $x8 = $x1.players;$x0.players = $x8;var $x9 = $x1.hero_states;$x0.hero_states = $x9;var $x10 = ({$: "GameMap"});var $x11 = $x2.width;$x10.width = $x11;var $x12 = $x2.height;$x10.height = $x12;var $x13 = $x2.bodies;$x10.bodies = $x13;var $x14 = $x2.bodies_count;$x10.bodies_count = $x14;$x0.game_map = $x10; break; } case "Some": { var $x15 = $x3.value;var $x16 = ({$: "State"});var $x17 = $x1.next_id;$x16.next_id = $x17;var $x18 = $x1.tick;$x16.tick = $x18;var $x19 = $x1.players;$x16.players = $x19;var $x20 = $x1.hero_states;$x16.hero_states = $x20;var $x21 = ({$: "GameMap"});var $x22 = $x2.width;$x21.width = $x22;var $x23 = $x2.height;$x21.height = $x23;var $x24 = $x2.bodies;$x21.bodies = $x24;var $x25 = $x2.bodies_count;$x21.bodies_count = $x25;$x16.game_map = $x21;var $state$0 = $UG$SIPD$Body$apply_effects$($x15, $x16);var $x26 = $state$0;var $x27 = _$0;var $x0 = $grow_projectile$($x26, $x27); break; } }return $x0; }
const $tick_projectile = _$0 => _$1 => $tick_projectile$(_$0,_$1)

function $shoot$go$(_$0/*:UG/SIPD/Body*/,_$1/*:UG/SIPD/Player*/,_$2/*:Number*/,_$3/*:Number*/,_$4/*:BigInt*/,_$5/*:UG/SIPD/State*/) {var $x1 = _$0;var $x2 = $x1.hitbox;var $hero_pos$0 = $UG$Shape$get_center$($x2);var $x3 = _$1;var $x4 = JSTR_TO_LIST(`W`);var $mouse_pos$1 = $UG$SIPD$Player$get_mouse_pos$($x3, $x4);var $x6 = $mouse_pos$1;var $x7 = $hero_pos$0;var $x5 = $V2$sub$($x6, $x7);var $direction$2 = $V2$normalize$($x5);var $x8 = 20.0;var $x9 = 1.5;var $offset_distance$3 = $x8 * $x9;var $x10 = $hero_pos$0;var $x12 = $direction$2;var $x13 = $offset_distance$3;var $x11 = $V2$mul_scalar$($x12, $x13);var $bullet_pos$4 = $V2$add$($x10, $x11);var $x14 = $hero_pos$0;var $x16 = $direction$2;var $x17 = _$2;var $x15 = $V2$mul_scalar$($x16, $x17);var $real_target$5 = $V2$add$($x14, $x15);var $x18 = $bullet_pos$4;var $x19 = _$3;var $bullet_shape$6 = $UG$Shape$circle$($x18, $x19);var $x20 = _$5;var $got$7 = $UG$SIPD$State$generate_id$($x20);var $x21 = $got$7;var $x22 = $UG$SIPD$Effect$spawn_body;var $x23 = ({$: "Body"});var $x24 = $x21.fst;$x23.id = $x24;var $x25 = $bullet_shape$6;$x23.hitbox = $x25;var $x27 = $tick_projectile;var $x28 = $x21.fst;var $x26 = ($x27)($x28);$x23.tick = $x26;var $x29 = ({$: "Nil"});$x23.effects = $x29;var $x30 = ({$: "Untouchable"});$x23.collidable = $x30;var $spawn_effect$8 = ($x22)($x23);var $x35 = $UG$SIPD$Effect$move_range;var $x36 = $x21.fst;var $x34 = ($x35)($x36);var $x37 = $real_target$5;var $x33 = ($x34)($x37);var $x38 = _$2;var $x32 = ($x33)($x38);var $x39 = _$4;var $x31 = ($x32)($x39);var $x43 = $UG$SIPD$Effect$collide_and_damage;var $x44 = $x1.id;var $x42 = ($x43)($x44);var $x45 = $x21.fst;var $x41 = ($x42)($x45);var $x46 = 10n;var $x40 = ($x41)($x46);var $move_effect$9 = ($x31)($x40);var $x47 = $spawn_effect$8;var $x48 = $x21.snd;var $state_after_spawn$10 = $UG$SIPD$Effect$apply$($x47, $x48);var $x49 = $move_effect$9;var $x50 = $state_after_spawn$10;var $x0 = $UG$SIPD$Effect$apply$($x49, $x50);return $x0; }
const $shoot$go = _$0 => _$1 => _$2 => _$3 => _$4 => _$5 => $shoot$go$(_$0,_$1,_$2,_$3,_$4,_$5)

function $UG$SIPD$Effect$shoot$(_$0/*:BigInt*/,_$1/*:Number*/,_$2/*:Number*/,_$3/*:BigInt*/,_$4/*:UG/SIPD/State*/) {var $x1 = _$4;var $x2 = $x1.game_map;var $x4 = $UG$SIPD$Player;var $x5 = $x1.players;var $x6 = _$0;var $x3 = $Map$get$($x4, $x5, $x6);switch ($x3.$) { case "None": { var $x0 = ({$: "State"});var $x7 = $x1.next_id;$x0.next_id = $x7;var $x8 = $x1.tick;$x0.tick = $x8;var $x9 = $x1.players;$x0.players = $x9;var $x10 = $x1.hero_states;$x0.hero_states = $x10;var $x11 = ({$: "GameMap"});var $x12 = $x2.width;$x11.width = $x12;var $x13 = $x2.height;$x11.height = $x13;var $x14 = $x2.bodies;$x11.bodies = $x14;var $x15 = $x2.bodies_count;$x11.bodies_count = $x15;$x0.game_map = $x11; break; } case "Some": { var $x16 = $x3.value;var $x17 = $x16.hero;var $x19 = $x17.body_id;var $x20 = $x2.bodies;var $x18 = $UG$SIPD$Body$get_body$($x19, $x20);switch ($x18.$) { case "None": { var $x0 = ({$: "State"});var $x21 = $x1.next_id;$x0.next_id = $x21;var $x22 = $x1.tick;$x0.tick = $x22;var $x23 = $x1.players;$x0.players = $x23;var $x24 = $x1.hero_states;$x0.hero_states = $x24;var $x25 = ({$: "GameMap"});var $x26 = $x2.width;$x25.width = $x26;var $x27 = $x2.height;$x25.height = $x27;var $x28 = $x2.bodies;$x25.bodies = $x28;var $x29 = $x2.bodies_count;$x25.bodies_count = $x29;$x0.game_map = $x25; break; } case "Some": { var $x30 = $x18.value;var $x31 = ({$: "Player"});var $x32 = $x16.id;$x31.id = $x32;var $x33 = $x16.name;$x31.name = $x33;var $x34 = $x16.keys;$x31.keys = $x34;var $x35 = $x16.target;$x31.target = $x35;var $x36 = ({$: "Hero"});var $x37 = $x17.owner_id;$x36.owner_id = $x37;var $x38 = $x17.name;$x36.name = $x38;var $x39 = $x17.skills;$x36.skills = $x39;var $x40 = $x17.body_id;$x36.body_id = $x40;$x31.hero = $x36;var $x41 = _$1;var $x42 = _$2;var $x43 = _$3;var $x44 = ({$: "State"});var $x45 = $x1.next_id;$x44.next_id = $x45;var $x46 = $x1.tick;$x44.tick = $x46;var $x47 = $x1.players;$x44.players = $x47;var $x48 = $x1.hero_states;$x44.hero_states = $x48;var $x49 = ({$: "GameMap"});var $x50 = $x2.width;$x49.width = $x50;var $x51 = $x2.height;$x49.height = $x51;var $x52 = $x2.bodies;$x49.bodies = $x52;var $x53 = $x2.bodies_count;$x49.bodies_count = $x53;$x44.game_map = $x49;var $x0 = $shoot$go$($x30, $x31, $x41, $x42, $x43, $x44); break; } } break; } }return $x0; }
const $UG$SIPD$Effect$shoot = _$0 => _$1 => _$2 => _$3 => _$4 => $UG$SIPD$Effect$shoot$(_$0,_$1,_$2,_$3,_$4)

function $UG$SIPD$Effect$teleport$(_$0/*:BigInt*/,_$1/*:BigInt*/,_$2/*:Number*/,_$3/*:UG/SIPD/State*/) {var $x1 = _$3;var $x2 = $x1.game_map;var $x3 = ({$: "Pair"});var $x5 = $UG$SIPD$Player;var $x6 = $x1.players;var $x7 = _$0;var $x4 = $Map$get$($x5, $x6, $x7);$x3.fst = $x4;var $x9 = $x2.bodies;var $x10 = _$1;var $x8 = $UG$SIPD$GameMap$get_body$($x9, $x10);$x3.snd = $x8;var $x11 = $x3.fst;switch ($x11.$) { case "None": { var $x12 = $x3.snd;switch ($x12.$) { case "None": { var $x0 = ({$: "State"});var $x13 = $x1.next_id;$x0.next_id = $x13;var $x14 = $x1.tick;$x0.tick = $x14;var $x15 = $x1.players;$x0.players = $x15;var $x16 = $x1.hero_states;$x0.hero_states = $x16;var $x17 = ({$: "GameMap"});var $x18 = $x2.width;$x17.width = $x18;var $x19 = $x2.height;$x17.height = $x19;var $x20 = $x2.bodies;$x17.bodies = $x20;var $x21 = $x2.bodies_count;$x17.bodies_count = $x21;$x0.game_map = $x17; break; } default: { var $x0 = ({$: "State"});var $x22 = $x1.next_id;$x0.next_id = $x22;var $x23 = $x1.tick;$x0.tick = $x23;var $x24 = $x1.players;$x0.players = $x24;var $x25 = $x1.hero_states;$x0.hero_states = $x25;var $x26 = ({$: "GameMap"});var $x27 = $x2.width;$x26.width = $x27;var $x28 = $x2.height;$x26.height = $x28;var $x29 = $x2.bodies;$x26.bodies = $x29;var $x30 = $x2.bodies_count;$x26.bodies_count = $x30;$x0.game_map = $x26; break; } } break; } case "Some": { var $x31 = $x11.value;switch ($x31.$) { case "Player": { var $x32 = $x3.snd;switch ($x32.$) { case "None": { var $x0 = ({$: "State"});var $x33 = $x1.next_id;$x0.next_id = $x33;var $x34 = $x1.tick;$x0.tick = $x34;var $x35 = $x1.players;$x0.players = $x35;var $x36 = $x1.hero_states;$x0.hero_states = $x36;var $x37 = ({$: "GameMap"});var $x38 = $x2.width;$x37.width = $x38;var $x39 = $x2.height;$x37.height = $x39;var $x40 = $x2.bodies;$x37.bodies = $x40;var $x41 = $x2.bodies_count;$x37.bodies_count = $x41;$x0.game_map = $x37; break; } case "Some": { var $x42 = $x32.value;var $x43 = $x42.hitbox;var $hitbox_center$0 = $UG$Shape$get_center$($x43);var $x45 = $x31.target;var $x46 = $hitbox_center$0;var $x44 = $V2$sub$($x45, $x46);var $direction$1 = $V2$normalize$($x44);var $x48 = $x31.target;var $x49 = $hitbox_center$0;var $x47 = $V2$sub$($x48, $x49);var $distance$2 = $V2$length$($x47);var $x50 = $distance$2;var $x51 = _$2;var $teleport_dist$3 = $F64$min$($x50, $x51);var $x52 = $direction$1;var $x53 = $teleport_dist$3;var $movement$4 = $V2$mul_scalar$($x52, $x53);var $x54 = $hitbox_center$0;var $x55 = $movement$4;var $new_center$5 = $V2$add$($x54, $x55);var $x56 = $x42.hitbox;var $x57 = $movement$4;var $new_hitbox$6 = $UG$Shape$move$($x56, $x57);var $x58 = ({$: "State"});var $x59 = $x1.next_id;$x58.next_id = $x59;var $x60 = $x1.tick;$x58.tick = $x60;var $x61 = $x1.players;$x58.players = $x61;var $x62 = $x1.hero_states;$x58.hero_states = $x62;var $x63 = ({$: "GameMap"});var $x64 = $x2.width;$x63.width = $x64;var $x65 = $x2.height;$x63.height = $x65;var $x66 = $x2.bodies;$x63.bodies = $x66;var $x67 = $x2.bodies_count;$x63.bodies_count = $x67;$x58.game_map = $x63;var $x68 = ({$: "Body"});var $x69 = $x42.id;$x68.id = $x69;var $x70 = $new_hitbox$6;$x68.hitbox = $x70;var $x71 = $x42.tick;$x68.tick = $x71;var $x72 = $x42.effects;$x68.effects = $x72;var $x73 = $x42.collidable;$x68.collidable = $x73;var $x0 = $UG$SIPD$State$insert_body$($x58, $x68); break; } } break; } default: { var $x75 = /*Type*/null;var $x76 = $x31;var $x74 = ($x75)($x76);var $x77 = $x3.snd;var $x0 = ($x74)($x77); break; } } break; } default: { var $x79 = /*Type*/null;var $x80 = $x11;var $x78 = ($x79)($x80);var $x81 = $x3.snd;var $x0 = ($x78)($x81); break; } }return $x0; }
const $UG$SIPD$Effect$teleport = _$0 => _$1 => _$2 => _$3 => $UG$SIPD$Effect$teleport$(_$0,_$1,_$2,_$3)

function $tick_wave$(_$0/*:BigInt*/,_$1/*:UG/SIPD/State*/) {var $x1 = _$1;var $x2 = $x1.game_map;var $x4 = _$0;var $x5 = $x2.bodies;var $x3 = $UG$SIPD$Body$get_body$($x4, $x5);switch ($x3.$) { case "None": { var $x0 = ({$: "State"});var $x6 = $x1.next_id;$x0.next_id = $x6;var $x7 = $x1.tick;$x0.tick = $x7;var $x8 = $x1.players;$x0.players = $x8;var $x9 = $x1.hero_states;$x0.hero_states = $x9;var $x10 = ({$: "GameMap"});var $x11 = $x2.width;$x10.width = $x11;var $x12 = $x2.height;$x10.height = $x12;var $x13 = $x2.bodies;$x10.bodies = $x13;var $x14 = $x2.bodies_count;$x10.bodies_count = $x14;$x0.game_map = $x10; break; } case "Some": { var $x15 = $x3.value;var $x16 = ({$: "State"});var $x17 = $x1.next_id;$x16.next_id = $x17;var $x18 = $x1.tick;$x16.tick = $x18;var $x19 = $x1.players;$x16.players = $x19;var $x20 = $x1.hero_states;$x16.hero_states = $x20;var $x21 = ({$: "GameMap"});var $x22 = $x2.width;$x21.width = $x22;var $x23 = $x2.height;$x21.height = $x23;var $x24 = $x2.bodies;$x21.bodies = $x24;var $x25 = $x2.bodies_count;$x21.bodies_count = $x25;$x16.game_map = $x21;var $x0 = $UG$SIPD$Body$apply_effects$($x15, $x16); break; } }return $x0; }
const $tick_wave = _$0 => _$1 => $tick_wave$(_$0,_$1)

function $create_wave_body$(_$0/*:V2*/,_$1/*:BigInt*/,_$2/*:Number*/) {var $x0 = ({$: "Body"});var $x1 = _$1;$x0.id = $x1;var $x3 = _$0;var $x4 = _$2;var $x2 = $UG$Shape$circle$($x3, $x4);$x0.hitbox = $x2;var $x6 = $tick_wave;var $x7 = _$1;var $x5 = ($x6)($x7);$x0.tick = $x5;var $x8 = ({$: "Nil"});$x0.effects = $x8;var $x9 = ({$: "Untouchable"});$x0.collidable = $x9;return $x0; }
const $create_wave_body = _$0 => _$1 => _$2 => $create_wave_body$(_$0,_$1,_$2)

function $UG$SIPD$Effect$wave_of_force$(_$0/*:BigInt*/,_$1/*:BigInt*/,_$2/*:Number*/,_$3/*:UG/SIPD/State*/) {var $x1 = _$3;var $x2 = $x1.game_map;var $x4 = $UG$SIPD$Player;var $x5 = $x1.players;var $x6 = _$0;var $x3 = $Map$get$($x4, $x5, $x6);switch ($x3.$) { case "None": { var $x0 = ({$: "State"});var $x7 = $x1.next_id;$x0.next_id = $x7;var $x8 = $x1.tick;$x0.tick = $x8;var $x9 = $x1.players;$x0.players = $x9;var $x10 = $x1.hero_states;$x0.hero_states = $x10;var $x11 = ({$: "GameMap"});var $x12 = $x2.width;$x11.width = $x12;var $x13 = $x2.height;$x11.height = $x13;var $x14 = $x2.bodies;$x11.bodies = $x14;var $x15 = $x2.bodies_count;$x11.bodies_count = $x15;$x0.game_map = $x11; break; } case "Some": { var $x16 = $x3.value;var $x17 = JSTR_TO_LIST(`Z`);var $target$0 = $UG$SIPD$Player$get_mouse_pos$($x16, $x17);var $x18 = ({$: "State"});var $x19 = $x1.next_id;$x18.next_id = $x19;var $x20 = $x1.tick;$x18.tick = $x20;var $x21 = $x1.players;$x18.players = $x21;var $x22 = $x1.hero_states;$x18.hero_states = $x22;var $x23 = ({$: "GameMap"});var $x24 = $x2.width;$x23.width = $x24;var $x25 = $x2.height;$x23.height = $x25;var $x26 = $x2.bodies;$x23.bodies = $x26;var $x27 = $x2.bodies_count;$x23.bodies_count = $x27;$x18.game_map = $x23;var $got$1 = $UG$SIPD$State$generate_id$($x18);var $x28 = $got$1;var $x29 = $target$0;var $x30 = $x28.fst;var $x31 = _$2;var $wave_body$2 = $create_wave_body$($x29, $x30, $x31);var $x32 = $UG$SIPD$Effect$spawn_body;var $x33 = $wave_body$2;var $spawn_effect$3 = ($x32)($x33);var $x36 = $UG$SIPD$Effect$with_duration;var $x37 = _$1;var $x35 = ($x36)($x37);var $x38 = $x28.fst;var $x34 = ($x35)($x38);var $x42 = $UG$SIPD$Effect$knockback;var $x43 = _$0;var $x41 = ($x42)($x43);var $x44 = $x28.fst;var $x40 = ($x41)($x44);var $x45 = ({$: "V2"});var $x46 = 10.0;$x45.x = $x46;var $x47 = 10.0;$x45.y = $x47;var $x39 = ($x40)($x45);var $with_duration_effect$4 = ($x34)($x39);var $x48 = $spawn_effect$3;var $x49 = $x28.snd;var $state$5 = $UG$SIPD$Effect$apply$($x48, $x49);var $x50 = $with_duration_effect$4;var $x51 = $state$5;var $state$6 = $UG$SIPD$Effect$apply$($x50, $x51);var $x0 = $state$6; break; } }return $x0; }
const $UG$SIPD$Effect$wave_of_force = _$0 => _$1 => _$2 => _$3 => $UG$SIPD$Effect$wave_of_force$(_$0,_$1,_$2,_$3)

const $UG$SIPD$Event$Click$ = (() => {var $x0 = /*{$:'LeftButton'} | {$:'RightButton'}*/null;return $x0; })()
const $UG$SIPD$Event$Click = $UG$SIPD$Event$Click$

const $UG$SIPD$Event$ = (() => {var $x0 = /*{$:'KeyEvent', time: BigInt, pid: BigInt, key: String, pressed: Bool} | {$:'MouseClick', time: BigInt, pid: BigInt, click: UG/SIPD/Event/Click, x: Number, y: Number} | {$:'KeyMouse', time: BigInt, pid: BigInt, key: String, pressed: Bool, x: Number, y: Number} | {$:'MouseMove', time: BigInt, pid: BigInt, x: Number, y: Number} | {$:'ActionEvent', action: UG/SIPD/Action}*/null;return $x0; })()
const $UG$SIPD$Event = $UG$SIPD$Event$

function $UG$SIPD$Event$Click$eq$(_$0/*:UG/SIPD/Event/Click*/) {var $x1 = _$0;switch ($x1.$) { case "LeftButton": { var $x0 = ($__0$0 => {var $x3 = $__0$0;switch ($x3.$) { case "LeftButton": { var $x2 = ({$: "True"}); break; } default: { var $x2 = ({$: "False"}); break; } }return $x2;}); break; } case "RightButton": { var $x0 = ($__0$0 => {var $x5 = $__0$0;switch ($x5.$) { case "RightButton": { var $x4 = ({$: "True"}); break; } default: { var $x4 = ({$: "False"}); break; } }return $x4;}); break; } default: { var $x6 = /*Type*/null;var $x7 = $x1;var $x0 = ($x6)($x7); break; } }return $x0; }
const $UG$SIPD$Event$Click$eq = _$0 => $UG$SIPD$Event$Click$eq$(_$0)

function $UG$SIPD$Event$eq$(_$0/*:UG/SIPD/Event*/) {var $x1 = _$0;switch ($x1.$) { case "ActionEvent": { var $x0 = ($__1$0 => {var $x3 = $__1$0;switch ($x3.$) { case "ActionEvent": { var $x4 = $x1.action;var $x5 = $x3.action;var $x2 = $UG$SIPD$Action$eq$($x4, $x5); break; } default: { var $x2 = ({$: "False"}); break; } }return $x2;}); break; } case "KeyEvent": { var $x0 = ($__4$0 => {var $x7 = $__4$0;switch ($x7.$) { case "KeyEvent": { var $x8 = $x1.time;var $x9 = $x7.time;var $time_eq$1 = $U64$eq$($x8, $x9);var $x10 = $x1.pid;var $x11 = $x7.pid;var $pid_eq$2 = $U64$eq$($x10, $x11);var $x12 = $x1.key;var $x13 = $x7.key;var $key_eq$3 = $String$eq$($x12, $x13);var $x15 = $x1.pressed;var $x14 = $Bool$eq$($x15);var $x16 = $x7.pressed;var $pressed_eq$4 = ($x14)($x16);var $x17 = $time_eq$1;var $x19 = $pid_eq$2;var $x21 = $key_eq$3;var $x22 = $pressed_eq$4;var $x20 = $Bool$and$($x21, $x22);var $x18 = $Bool$and$($x19, $x20);var $x6 = $Bool$and$($x17, $x18); break; } default: { var $x6 = ({$: "False"}); break; } }return $x6;}); break; } case "KeyMouse": { var $x0 = ($__6$0 => {var $x24 = $__6$0;switch ($x24.$) { case "KeyMouse": { var $x25 = $x1.time;var $x26 = $x24.time;var $time_eq$1 = $U64$eq$($x25, $x26);var $x27 = $x1.pid;var $x28 = $x24.pid;var $pid_eq$2 = $U64$eq$($x27, $x28);var $x29 = $x1.key;var $x30 = $x24.key;var $key_eq$3 = $String$eq$($x29, $x30);var $x32 = $x1.pressed;var $x31 = $Bool$eq$($x32);var $x33 = $x24.pressed;var $pressed_eq$4 = ($x31)($x33);var $x34 = $x1.x;var $x35 = $x24.x;var $x_eq$5 = $F64$eq$($x34, $x35);var $x36 = $x1.y;var $x37 = $x24.y;var $y_eq$6 = $F64$eq$($x36, $x37);var $x38 = $time_eq$1;var $x40 = $pid_eq$2;var $x42 = $key_eq$3;var $x44 = $pressed_eq$4;var $x46 = $x_eq$5;var $x47 = $y_eq$6;var $x45 = $Bool$and$($x46, $x47);var $x43 = $Bool$and$($x44, $x45);var $x41 = $Bool$and$($x42, $x43);var $x39 = $Bool$and$($x40, $x41);var $x23 = $Bool$and$($x38, $x39); break; } default: { var $x23 = ({$: "False"}); break; } }return $x23;}); break; } case "MouseClick": { var $x0 = ($__5$0 => {var $x49 = $__5$0;switch ($x49.$) { case "MouseClick": { var $x50 = $x1.time;var $x51 = $x49.time;var $time_eq$1 = $U64$eq$($x50, $x51);var $x52 = $x1.pid;var $x53 = $x49.pid;var $pid_eq$2 = $U64$eq$($x52, $x53);var $x55 = $x1.click;var $x54 = $UG$SIPD$Event$Click$eq$($x55);var $x56 = $x49.click;var $click_eq$3 = ($x54)($x56);var $x57 = $x1.x;var $x58 = $x49.x;var $x_eq$4 = $F64$eq$($x57, $x58);var $x59 = $x1.y;var $x60 = $x49.y;var $y_eq$5 = $F64$eq$($x59, $x60);var $x61 = $time_eq$1;var $x63 = $pid_eq$2;var $x65 = $click_eq$3;var $x67 = $x_eq$4;var $x68 = $y_eq$5;var $x66 = $Bool$and$($x67, $x68);var $x64 = $Bool$and$($x65, $x66);var $x62 = $Bool$and$($x63, $x64);var $x48 = $Bool$and$($x61, $x62); break; } default: { var $x48 = ({$: "False"}); break; } }return $x48;}); break; } case "MouseMove": { var $x0 = ($__4$0 => {var $x70 = $__4$0;switch ($x70.$) { case "MouseMove": { var $x71 = $x1.time;var $x72 = $x70.time;var $time_eq$1 = $U64$eq$($x71, $x72);var $x73 = $x1.pid;var $x74 = $x70.pid;var $pid_eq$2 = $U64$eq$($x73, $x74);var $x75 = $x1.x;var $x76 = $x70.x;var $x_eq$3 = $F64$eq$($x75, $x76);var $x77 = $x1.y;var $x78 = $x70.y;var $y_eq$4 = $F64$eq$($x77, $x78);var $x79 = $time_eq$1;var $x81 = $pid_eq$2;var $x83 = $x_eq$3;var $x84 = $y_eq$4;var $x82 = $Bool$and$($x83, $x84);var $x80 = $Bool$and$($x81, $x82);var $x69 = $Bool$and$($x79, $x80); break; } default: { var $x69 = ({$: "False"}); break; } }return $x69;}); break; } default: { var $x85 = /*Type*/null;var $x86 = $x1;var $x0 = ($x85)($x86); break; } }return $x0; }
const $UG$SIPD$Event$eq = _$0 => $UG$SIPD$Event$eq$(_$0)

function $UG$SIPD$Event$get_event_pid$(_$0/*:UG/SIPD/Event*/) {var $x1 = _$0;switch ($x1.$) { case "ActionEvent": { var $x2 = $x1.action;var $x0 = $x2.pid; break; } case "KeyEvent": { var $x0 = $x1.pid; break; } case "KeyMouse": { var $x0 = $x1.pid; break; } case "MouseClick": { var $x0 = $x1.pid; break; } case "MouseMove": { var $x0 = $x1.pid; break; } }return $x0; }
const $UG$SIPD$Event$get_event_pid = _$0 => $UG$SIPD$Event$get_event_pid$(_$0)

function $UG$SM$Game$(_$0/*:Type*/,_$1/*:Type*/) {var $x0 = /*{$:'Game', init: _$0, when: ($_$0:_$1) => ($_$1:_$0) => _$0, tick: ($_$0:_$0) => _$0}*/null;return $x0; }
const $UG$SM$Game = _$0 => _$1 => $UG$SM$Game$(_$0,_$1)

const $UG$SIPD$Game$ = (() => {var $x1 = $UG$SIPD$State;var $x2 = $UG$SIPD$Event;var $x0 = $UG$SM$Game$($x1, $x2);return $x0; })()
const $UG$SIPD$Game = $UG$SIPD$Game$

const $UG$SIPD$GameMap$initial_map$ = (() => {var $x1 = $UG$SIPD$Body;var $empty$0 = $Map$empty$($x1);var $x0 = $empty$0;return $x0; })()
const $UG$SIPD$GameMap$initial_map = $UG$SIPD$GameMap$initial_map$

function $UG$SIPD$GameMap$init$(_$0/*:BigInt*/,_$1/*:BigInt*/) {var $x0 = ({$: "GameMap"});var $x1 = _$0;$x0.width = $x1;var $x2 = _$1;$x0.height = $x2;var $x3 = $UG$SIPD$GameMap$initial_map;$x0.bodies = $x3;var $x4 = 10000n;$x0.bodies_count = $x4;return $x0; }
const $UG$SIPD$GameMap$init = _$0 => _$1 => $UG$SIPD$GameMap$init$(_$0,_$1)

const $UG$SIPD$Game$init$ = (() => {var $x0 = ({$: "State"});var $x1 = 20n;$x0.next_id = $x1;var $x2 = 0n;$x0.tick = $x2;var $x4 = $UG$SIPD$Player;var $x3 = $Map$empty$($x4);$x0.players = $x3;var $x6 = $UG$SIPD$Hero$HeroState;var $x5 = $Map$empty$($x6);$x0.hero_states = $x5;var $x8 = 1200n;var $x9 = 1200n;var $x7 = $UG$SIPD$GameMap$init$($x8, $x9);$x0.game_map = $x7;return $x0; })()
const $UG$SIPD$Game$init = $UG$SIPD$Game$init$

function $update_cooldown$(_$0/*:Pair<String><BigInt>*/,_$1/*:OrdTree<String><BigInt>*/) {var $x1 = _$0;var $x4 = $x1.snd;var $x5 = 0n;var $x3 = BigInt.asUintN(64, $x4 === $x5);var $x2 = $U64$to_bool$($x3);switch ($x2.$) { case "True": { var $x0 = _$1; break; } case "False": { var $x6 = $String;var $x7 = /*BigInt*/null;var $x8 = $String$Ord;var $x9 = _$1;var $x10 = ({$: "Pair"});var $x11 = $x1.fst;$x10.fst = $x11;var $x13 = $x1.snd;var $x14 = 1n;var $x12 = BigInt.asUintN(64, $x13 - $x14);$x10.snd = $x12;var $x0 = $OrdTree$insert$($x6, $x7, $x8, $x9, $x10); break; } }return $x0; }
const $update_cooldown = _$0 => _$1 => $update_cooldown$(_$0,_$1)

function $decrement_cooldowns$(_$0/*:UG/SIPD/Hero/HeroState*/) {var $x1 = _$0;var $x2 = $String;var $x3 = /*BigInt*/null;var $x4 = $x1.cooldowns;var $x6 = $String;var $x7 = /*BigInt*/null;var $x5 = $OrdTree$($x6, $x7);var $x8 = $x1.cooldowns;var $x9 = $update_cooldown;var $new_cooldowns$0 = $OrdTree$fold$($x2, $x3, $x4, $x5, $x8, $x9);var $x0 = ({$: "HeroState"});var $x10 = $new_cooldowns$0;$x0.cooldowns = $x10;var $x11 = $x1.health;$x0.health = $x11;return $x0; }
const $decrement_cooldowns = _$0 => $decrement_cooldowns$(_$0)

function $update_hero_state$(_$0/*:UG/SIPD/State*/,_$1/*:BigInt*/,_$2/*:UG/SIPD/Hero/HeroState*/) {var $x1 = _$0;var $x2 = $UG$SIPD$Hero$HeroState;var $x3 = $x1.hero_states;var $x4 = _$1;var $x6 = _$2;var $x5 = $decrement_cooldowns$($x6);var $new_hero_states$0 = $Map$insert$($x2, $x3, $x4, $x5);var $x0 = ({$: "State"});var $x7 = $x1.next_id;$x0.next_id = $x7;var $x8 = $x1.tick;$x0.tick = $x8;var $x9 = $x1.players;$x0.players = $x9;var $x10 = $new_hero_states$0;$x0.hero_states = $x10;var $x11 = $x1.game_map;$x0.game_map = $x11;return $x0; }
const $update_hero_state = _$0 => _$1 => _$2 => $update_hero_state$(_$0,_$1,_$2)

function $update_cooldowns$(_$0/*:UG/SIPD/State*/) {var $x1 = _$0;var $x2 = $x1.game_map;var $x3 = $UG$SIPD$Hero$HeroState;var $x4 = $UG$SIPD$State;var $x5 = $x1.hero_states;var $x6 = $x2.bodies_count;var $x7 = ({$: "State"});var $x8 = $x1.next_id;$x7.next_id = $x8;var $x9 = $x1.tick;$x7.tick = $x9;var $x10 = $x1.players;$x7.players = $x10;var $x11 = $x1.hero_states;$x7.hero_states = $x11;var $x12 = ({$: "GameMap"});var $x13 = $x2.width;$x12.width = $x13;var $x14 = $x2.height;$x12.height = $x14;var $x15 = $x2.bodies;$x12.bodies = $x15;var $x16 = $x2.bodies_count;$x12.bodies_count = $x16;$x7.game_map = $x12;var $x17 = $update_hero_state;var $x0 = $Map$fold$($x3, $x4, $x5, $x6, $x7, $x17);return $x0; }
const $update_cooldowns = _$0 => $update_cooldowns$(_$0)

function $UG$SIPD$Game$tick$(_$0/*:UG/SIPD/State*/) {var $x1 = _$0;var $got$0 = $x1.game_map;var $x2 = $got$0;var $x3 = $UG$SIPD$Body;var $x4 = $x2.bodies;var $x5 = $x2.bodies_count;var $body_values$1 = $Map$values$($x3, $x4, $x5);var $x6 = $UG$SIPD$Body;var $x7 = $body_values$1;var $x8 = $UG$SIPD$State;var $x9 = ({$: "State"});var $x10 = $x1.next_id;$x9.next_id = $x10;var $x11 = $x1.tick;$x9.tick = $x11;var $x12 = $x1.players;$x9.players = $x12;var $x13 = $x1.hero_states;$x9.hero_states = $x13;var $x14 = $x1.game_map;$x9.game_map = $x14;var $x15 = ($body$2 => $acc$3 => {var $x18 = $body$2;var $x17 = $UG$SIPD$Body$tick$($x18);var $x19 = $acc$3;var $x16 = ($x17)($x19);return $x16;});var $updated_gs$2 = $List$fold$($x6, $x7, $x8, $x9, $x15);var $got$3 = $updated_gs$2;var $x20 = $got$3;var $x21 = $x20.tick;var $x22 = 1n;var $updated_tick$4 = $U64$add$($x21, $x22);var $x23 = ({$: "State"});var $x24 = $x20.next_id;$x23.next_id = $x24;var $x25 = $updated_tick$4;$x23.tick = $x25;var $x26 = $x20.players;$x23.players = $x26;var $x27 = $x20.hero_states;$x23.hero_states = $x27;var $x28 = $x20.game_map;$x23.game_map = $x28;var $x0 = $update_cooldowns$($x23);return $x0; }
const $UG$SIPD$Game$tick = _$0 => $UG$SIPD$Game$tick$(_$0)

function $get_player_name$(_$0/*:UG/SIPD/Event*/) {var $x1 = _$0;switch ($x1.$) { case "ActionEvent": { var $x2 = $x1.action;switch ($x2.$) { case "SetNick": { var $x0 = $x2.nick; break; } default: { var $x3 = /*Type*/null;var $x4 = $x2;var $x0 = ($x3)($x4); break; } } break; } default: { var $x0 = JSTR_TO_LIST(`Anon`); break; } }return $x0; }
const $get_player_name = _$0 => $get_player_name$(_$0)

function $get_body_effects_state$(_$0/*:Maybe<UG/SIPD/Body>*/,_$1/*:UG/SIPD/State*/) {var $x1 = _$0;switch ($x1.$) { case "None": { var $x0 = _$1; break; } case "Some": { var $x2 = $x1.value;var $x3 = _$1;var $x0 = $UG$SIPD$Body$apply_effects$($x2, $x3); break; } }return $x0; }
const $get_body_effects_state = _$0 => _$1 => $get_body_effects_state$(_$0,_$1)

function $UG$SIPD$Hero$HeroState$key_on_cooldown$(_$0/*:String*/,_$1/*:OrdTree<String><BigInt>*/) {var $x3 = $String;var $x4 = /*BigInt*/null;var $x5 = $String$Ord;var $x6 = _$1;var $x2 = $OrdTree$get$($x3, $x4, $x5, $x6);var $x7 = _$0;var $x1 = ($x2)($x7);switch ($x1.$) { case "None": { var $x0 = ({$: "True"}); break; } case "Some": { var $x8 = $x1.value;var $x9 = 0n;var $x0 = $U64$neq$($x8, $x9); break; } }return $x0; }
const $UG$SIPD$Hero$HeroState$key_on_cooldown = _$0 => _$1 => $UG$SIPD$Hero$HeroState$key_on_cooldown$(_$0,_$1)

function $UG$SIPD$Skill$apply$(_$0/*:UG/SIPD/Skill*/,_$1/*:UG/SIPD/State*/) {var $x1 = _$0;var $x2 = $UG$SIPD$Effect;var $x3 = $x1.effects;var $x4 = $UG$SIPD$State;var $x5 = _$1;var $x6 = ($state$0 => $effect$1 => {var $x8 = $effect$1;var $x9 = $state$0;var $x7 = ($x8)($x9);return $x7;});var $x0 = $List$foldl$($x2, $x3, $x4, $x5, $x6);return $x0; }
const $UG$SIPD$Skill$apply = _$0 => _$1 => $UG$SIPD$Skill$apply$(_$0,_$1)

function $revert_cooldown$(_$0/*:Maybe<UG/SIPD/Hero/HeroState>*/,_$1/*:UG/SIPD/State*/,_$2/*:BigInt*/,_$3/*:String*/,_$4/*:BigInt*/) {var $x1 = _$0;switch ($x1.$) { case "None": { var $x0 = _$1; break; } case "Some": { var $x2 = $x1.value;var $x3 = $String;var $x4 = /*BigInt*/null;var $x5 = $String$Ord;var $x6 = $x2.cooldowns;var $x7 = ({$: "Pair"});var $x8 = _$3;$x7.fst = $x8;var $x9 = _$4;$x7.snd = $x9;var $updated_cooldowns$0 = $OrdTree$insert$($x3, $x4, $x5, $x6, $x7);var $got$1 = _$1;var $x10 = $got$1;var $x11 = $UG$SIPD$Hero$HeroState;var $x12 = $x10.hero_states;var $x13 = _$2;var $x14 = ({$: "HeroState"});var $x15 = $updated_cooldowns$0;$x14.cooldowns = $x15;var $x16 = $x2.health;$x14.health = $x16;var $updated_hero_states$2 = $Map$insert$($x11, $x12, $x13, $x14);var $x0 = ({$: "State"});var $x17 = $x10.next_id;$x0.next_id = $x17;var $x18 = $x10.tick;$x0.tick = $x18;var $x19 = $x10.players;$x0.players = $x19;var $x20 = $updated_hero_states$2;$x0.hero_states = $x20;var $x21 = $x10.game_map;$x0.game_map = $x21; break; } }return $x0; }
const $revert_cooldown = _$0 => _$1 => _$2 => _$3 => _$4 => $revert_cooldown$(_$0,_$1,_$2,_$3,_$4)

function $get_skill$(_$0/*:OrdTree<String><UG/SIPD/Skill>*/,_$1/*:String*/) {var $x2 = $String;var $x3 = $UG$SIPD$Skill;var $x4 = $String$Ord;var $x5 = _$0;var $x1 = $OrdTree$get$($x2, $x3, $x4, $x5);var $x6 = _$1;var $x0 = ($x1)($x6);return $x0; }
const $get_skill = _$0 => _$1 => $get_skill$(_$0,_$1)

function $UG$SIPD$Player$is_player_key_pressed$(_$0/*:String*/,_$1/*:OrdTree<String><Pair<Bool><V2>>*/) {var $x3 = $String;var $x5 = $Bool;var $x6 = $V2;var $x4 = $Pair$($x5, $x6);var $x7 = $String$Ord;var $x8 = _$1;var $x2 = $OrdTree$get$($x3, $x4, $x7, $x8);var $x9 = _$0;var $x1 = ($x2)($x9);switch ($x1.$) { case "None": { var $x0 = ({$: "False"}); break; } case "Some": { var $x10 = $x1.value;var $x0 = $x10.fst; break; } }return $x0; }
const $UG$SIPD$Player$is_player_key_pressed = _$0 => _$1 => $UG$SIPD$Player$is_player_key_pressed$(_$0,_$1)

function $UG$SIPD$Hero$apply_skill_if_pressed$(_$0/*:String*/,_$1/*:BigInt*/,_$2/*:OrdTree<String><UG/SIPD/Skill>*/,_$3/*:OrdTree<String><Pair<Bool><V2>>*/,_$4/*:OrdTree<String><BigInt>*/,_$5/*:UG/SIPD/State*/) {var $x1 = ({$: "Pair"});var $x3 = _$2;var $x4 = _$0;var $x2 = $get_skill$($x3, $x4);$x1.fst = $x2;var $x6 = _$0;var $x7 = _$3;var $x5 = $UG$SIPD$Player$is_player_key_pressed$($x6, $x7);$x1.snd = $x5;var $x8 = $x1.fst;switch ($x8.$) { case "None": { var $x9 = $x1.snd;switch ($x9.$) { case "False": { var $x0 = _$5; break; } case "True": { var $x0 = _$5; break; } } break; } case "Some": { var $x10 = $x1.snd;switch ($x10.$) { case "False": { var $x0 = _$5; break; } case "True": { var $x11 = _$0;var $x12 = _$4;var $on_cooldown$0 = $UG$SIPD$Hero$HeroState$key_on_cooldown$($x11, $x12);var $x15 = $on_cooldown$0;var $x14 = $Bool$eq$($x15);var $x16 = ({$: "True"});var $x13 = ($x14)($x16);switch ($x13.$) { case "True": { var $x0 = _$5; break; } case "False": { var $x17 = $x8.value;var $x18 = _$5;var $new_state$1 = $UG$SIPD$Skill$apply$($x17, $x18);var $got$2 = $x8.value;var $x19 = $got$2;var $got$3 = $new_state$1;var $x20 = $got$3;var $x21 = $UG$SIPD$Hero$HeroState;var $x22 = $x20.hero_states;var $x23 = _$1;var $hero_state$4 = $Map$get$($x21, $x22, $x23);var $x24 = $hero_state$4;var $x25 = $new_state$1;var $x26 = _$1;var $x27 = _$0;var $x28 = $x19.cooldown;var $x0 = $revert_cooldown$($x24, $x25, $x26, $x27, $x28); break; } } break; } } break; } }return $x0; }
const $UG$SIPD$Hero$apply_skill_if_pressed = _$0 => _$1 => _$2 => _$3 => _$4 => _$5 => $UG$SIPD$Hero$apply_skill_if_pressed$(_$0,_$1,_$2,_$3,_$4,_$5)

function $UG$SIPD$Hero$apply_pressed_skills$(_$0/*:List<String>*/,_$1/*:BigInt*/,_$2/*:OrdTree<String><UG/SIPD/Skill>*/,_$3/*:OrdTree<String><Pair<Bool><V2>>*/,_$4/*:OrdTree<String><BigInt>*/,_$5/*:UG/SIPD/State*/) {while(1){var $x1 = _$0;switch ($x1.$) { case "Cons": { var $x2 = $x1.head;var $x3 = _$1;var $x4 = _$2;var $x5 = _$3;var $x6 = _$4;var $x7 = _$5;var $new_state$0 = $UG$SIPD$Hero$apply_skill_if_pressed$($x2, $x3, $x4, $x5, $x6, $x7);var $x8 = $x1.tail;var $x9 = _$1;var $x10 = _$2;var $x11 = _$3;var $x12 = _$4;var $x13 = $new_state$0;_$0 = $x8;_$1 = $x9;_$2 = $x10;_$3 = $x11;_$4 = $x12;_$5 = $x13;/*TCO*/continue; break; } case "Nil": { var $x0 = _$5; break; } }return $x0; }}
const $UG$SIPD$Hero$apply_pressed_skills = _$0 => _$1 => _$2 => _$3 => _$4 => _$5 => $UG$SIPD$Hero$apply_pressed_skills$(_$0,_$1,_$2,_$3,_$4,_$5)

function $apply_skill_if_not_on_cooldown$(_$0/*:UG/SIPD/Skill*/,_$1/*:BigInt*/,_$2/*:UG/SIPD/State*/) {var $x2 = _$1;var $x3 = 0n;var $x1 = $U64$eq$($x2, $x3);switch ($x1.$) { case "True": { var $x4 = _$0;var $x5 = _$2;var $x0 = $UG$SIPD$Skill$apply$($x4, $x5); break; } case "False": { var $x0 = _$2; break; } }return $x0; }
const $apply_skill_if_not_on_cooldown = _$0 => _$1 => _$2 => $apply_skill_if_not_on_cooldown$(_$0,_$1,_$2)

function $tick$(_$0/*:BigInt*/,_$1/*:UG/SIPD/State*/) {var $x1 = _$1;var $x2 = $x1.game_map;var $x4 = $UG$SIPD$Player;var $x5 = $x1.players;var $x6 = _$0;var $x3 = $Map$get$($x4, $x5, $x6);switch ($x3.$) { case "None": { var $x0 = ({$: "State"});var $x7 = $x1.next_id;$x0.next_id = $x7;var $x8 = $x1.tick;$x0.tick = $x8;var $x9 = $x1.players;$x0.players = $x9;var $x10 = $x1.hero_states;$x0.hero_states = $x10;var $x11 = ({$: "GameMap"});var $x12 = $x2.width;$x11.width = $x12;var $x13 = $x2.height;$x11.height = $x13;var $x14 = $x2.bodies;$x11.bodies = $x14;var $x15 = $x2.bodies_count;$x11.bodies_count = $x15;$x0.game_map = $x11; break; } case "Some": { var $x16 = $x3.value;var $x17 = $x16.hero;var $x19 = $UG$SIPD$Hero$HeroState;var $x20 = $x1.hero_states;var $x21 = _$0;var $x18 = $Map$get$($x19, $x20, $x21);switch ($x18.$) { case "None": { var $x0 = ({$: "State"});var $x22 = $x1.next_id;$x0.next_id = $x22;var $x23 = $x1.tick;$x0.tick = $x23;var $x24 = $x1.players;$x0.players = $x24;var $x25 = $x1.hero_states;$x0.hero_states = $x25;var $x26 = ({$: "GameMap"});var $x27 = $x2.width;$x26.width = $x27;var $x28 = $x2.height;$x26.height = $x28;var $x29 = $x2.bodies;$x26.bodies = $x29;var $x30 = $x2.bodies_count;$x26.bodies_count = $x30;$x0.game_map = $x26; break; } case "Some": { var $x31 = $x18.value;var $x32 = $UG$SIPD$Body;var $x33 = $x2.bodies;var $x34 = $x17.body_id;var $maybe_hero_body$0 = $Map$get$($x32, $x33, $x34);var $x35 = $maybe_hero_body$0;var $x36 = ({$: "State"});var $x37 = $x1.next_id;$x36.next_id = $x37;var $x38 = $x1.tick;$x36.tick = $x38;var $x39 = $x1.players;$x36.players = $x39;var $x40 = $x1.hero_states;$x36.hero_states = $x40;var $x41 = ({$: "GameMap"});var $x42 = $x2.width;$x41.width = $x42;var $x43 = $x2.height;$x41.height = $x43;var $x44 = $x2.bodies;$x41.bodies = $x44;var $x45 = $x2.bodies_count;$x41.bodies_count = $x45;$x36.game_map = $x41;var $body_effects_state$1 = $get_body_effects_state$($x35, $x36);var $x46 = $String;var $x47 = $UG$SIPD$Skill;var $x48 = $x17.skills;var $skill_keys$2 = $OrdTree$keys$($x46, $x47, $x48);var $x49 = $skill_keys$2;var $x50 = _$0;var $x51 = $x17.skills;var $x52 = $x16.keys;var $x53 = $x31.cooldowns;var $x54 = $body_effects_state$1;var $state_after_skills$3 = $UG$SIPD$Hero$apply_pressed_skills$($x49, $x50, $x51, $x52, $x53, $x54);var $x56 = $String;var $x57 = $UG$SIPD$Skill;var $x58 = $String$Ord;var $x59 = $x17.skills;var $x55 = $OrdTree$get$($x56, $x57, $x58, $x59);var $x60 = JSTR_TO_LIST(`RightClick`);var $maybe_right_click$4 = ($x55)($x60);var $x61 = $maybe_right_click$4;switch ($x61.$) { case "None": { var $x0 = $state_after_skills$3; break; } case "Some": { var $x63 = $String;var $x64 = /*BigInt*/null;var $x65 = $String$Ord;var $x66 = $x31.cooldowns;var $x62 = $OrdTree$get$($x63, $x64, $x65, $x66);var $x67 = JSTR_TO_LIST(`RightClick`);var $cooldown$5 = ($x62)($x67);var $x68 = $cooldown$5;switch ($x68.$) { case "None": { var $x0 = $state_after_skills$3; break; } case "Some": { var $x69 = $x61.value;var $x70 = $x68.value;var $x71 = $state_after_skills$3;var $x0 = $apply_skill_if_not_on_cooldown$($x69, $x70, $x71); break; } } break; } } break; } } break; } }return $x0; }
const $tick = _$0 => _$1 => $tick$(_$0,_$1)

function $insert_skill$(_$0/*:OrdTree<String><UG/SIPD/Skill>*/,_$1/*:String*/,_$2/*:UG/SIPD/Skill*/) {var $x1 = $String;var $x2 = $UG$SIPD$Skill;var $x3 = $String$Ord;var $x4 = _$0;var $x5 = ({$: "Pair"});var $x6 = _$1;$x5.fst = $x6;var $x7 = _$2;$x5.snd = $x7;var $x0 = $OrdTree$insert$($x1, $x2, $x3, $x4, $x5);return $x0; }
const $insert_skill = _$0 => _$1 => _$2 => $insert_skill$(_$0,_$1,_$2)

function $UG$SIPD$Skill$move$(_$0/*:BigInt*/,_$1/*:BigInt*/,_$2/*:BigInt*/) {var $x0 = ({$: "Skill"});var $x1 = JSTR_TO_LIST(`move`);$x0.name = $x1;var $x2 = ({$: "Cons"});var $x5 = $UG$SIPD$Effect$move;var $x6 = _$0;var $x4 = ($x5)($x6);var $x7 = _$1;var $x3 = ($x4)($x7);$x2.head = $x3;var $x8 = ({$: "Nil"});$x2.tail = $x8;$x0.effects = $x2;var $x9 = _$2;$x0.cooldown = $x9;return $x0; }
const $UG$SIPD$Skill$move = _$0 => _$1 => _$2 => $UG$SIPD$Skill$move$(_$0,_$1,_$2)

function $UG$SIPD$Skill$teleport$(_$0/*:BigInt*/,_$1/*:BigInt*/,_$2/*:Number*/,_$3/*:BigInt*/) {var $x0 = ({$: "Skill"});var $x1 = JSTR_TO_LIST(`teleport`);$x0.name = $x1;var $x2 = ({$: "Cons"});var $x6 = $UG$SIPD$Effect$teleport;var $x7 = _$0;var $x5 = ($x6)($x7);var $x8 = _$1;var $x4 = ($x5)($x8);var $x9 = _$2;var $x3 = ($x4)($x9);$x2.head = $x3;var $x10 = ({$: "Nil"});$x2.tail = $x10;$x0.effects = $x2;var $x11 = _$3;$x0.cooldown = $x11;return $x0; }
const $UG$SIPD$Skill$teleport = _$0 => _$1 => _$2 => _$3 => $UG$SIPD$Skill$teleport$(_$0,_$1,_$2,_$3)

function $UG$SIPD$Skill$wave_of_force$(_$0/*:BigInt*/,_$1/*:BigInt*/,_$2/*:Number*/,_$3/*:BigInt*/) {var $x0 = ({$: "Skill"});var $x1 = JSTR_TO_LIST(`wave_of_force`);$x0.name = $x1;var $x2 = ({$: "Cons"});var $x6 = $UG$SIPD$Effect$wave_of_force;var $x7 = _$0;var $x5 = ($x6)($x7);var $x8 = _$1;var $x4 = ($x5)($x8);var $x9 = _$2;var $x3 = ($x4)($x9);$x2.head = $x3;var $x10 = ({$: "Nil"});$x2.tail = $x10;$x0.effects = $x2;var $x11 = _$3;$x0.cooldown = $x11;return $x0; }
const $UG$SIPD$Skill$wave_of_force = _$0 => _$1 => _$2 => _$3 => $UG$SIPD$Skill$wave_of_force$(_$0,_$1,_$2,_$3)

function $UG$SIPD$Skill$shoot$(_$0/*:BigInt*/,_$1/*:Number*/,_$2/*:Number*/,_$3/*:BigInt*/,_$4/*:BigInt*/) {var $x0 = ({$: "Skill"});var $x1 = JSTR_TO_LIST(`shoot`);$x0.name = $x1;var $x2 = ({$: "Cons"});var $x7 = $UG$SIPD$Effect$shoot;var $x8 = _$0;var $x6 = ($x7)($x8);var $x9 = _$1;var $x5 = ($x6)($x9);var $x10 = _$2;var $x4 = ($x5)($x10);var $x11 = _$3;var $x3 = ($x4)($x11);$x2.head = $x3;var $x12 = ({$: "Nil"});$x2.tail = $x12;$x0.effects = $x2;var $x13 = _$4;$x0.cooldown = $x13;return $x0; }
const $UG$SIPD$Skill$shoot = _$0 => _$1 => _$2 => _$3 => _$4 => $UG$SIPD$Skill$shoot$(_$0,_$1,_$2,_$3,_$4)

function $UG$SIPD$Skill$magic_missiles$(_$0/*:BigInt*/,_$1/*:Number*/,_$2/*:BigInt*/,_$3/*:Number*/,_$4/*:BigInt*/) {var $x0 = ({$: "Skill"});var $x1 = JSTR_TO_LIST(`magic_missiles`);$x0.name = $x1;var $x2 = ({$: "Cons"});var $x7 = $UG$SIPD$Effect$magic_missiles;var $x8 = _$0;var $x6 = ($x7)($x8);var $x9 = _$1;var $x5 = ($x6)($x9);var $x10 = _$2;var $x4 = ($x5)($x10);var $x11 = _$3;var $x3 = ($x4)($x11);$x2.head = $x3;var $x12 = ({$: "Nil"});$x2.tail = $x12;$x0.effects = $x2;var $x13 = _$4;$x0.cooldown = $x13;return $x0; }
const $UG$SIPD$Skill$magic_missiles = _$0 => _$1 => _$2 => _$3 => _$4 => $UG$SIPD$Skill$magic_missiles$(_$0,_$1,_$2,_$3,_$4)

function $UG$SIPD$Skill$disintegrate$(_$0/*:BigInt*/,_$1/*:BigInt*/,_$2/*:Number*/,_$3/*:Number*/,_$4/*:BigInt*/) {var $x0 = ({$: "Skill"});var $x1 = JSTR_TO_LIST(`disintegrate`);$x0.name = $x1;var $x2 = ({$: "Cons"});var $x7 = $UG$SIPD$Effect$disintegrate;var $x8 = _$0;var $x6 = ($x7)($x8);var $x9 = _$1;var $x5 = ($x6)($x9);var $x10 = _$2;var $x4 = ($x5)($x10);var $x11 = _$3;var $x3 = ($x4)($x11);$x2.head = $x3;var $x12 = ({$: "Nil"});$x2.tail = $x12;$x0.effects = $x2;var $x13 = _$4;$x0.cooldown = $x13;return $x0; }
const $UG$SIPD$Skill$disintegrate = _$0 => _$1 => _$2 => _$3 => _$4 => $UG$SIPD$Skill$disintegrate$(_$0,_$1,_$2,_$3,_$4)

function $insert_cooldown$(_$0/*:OrdTree<String><BigInt>*/,_$1/*:String*/,_$2/*:BigInt*/) {var $x1 = $String;var $x2 = /*BigInt*/null;var $x3 = $String$Ord;var $x4 = _$0;var $x5 = ({$: "Pair"});var $x6 = _$1;$x5.fst = $x6;var $x7 = _$2;$x5.snd = $x7;var $x0 = $OrdTree$insert$($x1, $x2, $x3, $x4, $x5);return $x0; }
const $insert_cooldown = _$0 => _$1 => _$2 => $insert_cooldown$(_$0,_$1,_$2)

function $make_skills$(_$0/*:UG/SIPD/State*/,_$1/*:BigInt*/,_$2/*:BigInt*/) {var $x1 = _$0;var $x2 = $String;var $x3 = $UG$SIPD$Skill;var $s$0 = $OrdTree$empty$($x2, $x3);var $x4 = $s$0;var $x5 = JSTR_TO_LIST(`RightClick`);var $x7 = _$1;var $x8 = _$2;var $x9 = 0n;var $x6 = $UG$SIPD$Skill$move$($x7, $x8, $x9);var $s$1 = $insert_skill$($x4, $x5, $x6);var $x10 = $s$1;var $x11 = JSTR_TO_LIST(`E`);var $x13 = _$1;var $x14 = _$2;var $x15 = 100.0;var $x16 = 100n;var $x12 = $UG$SIPD$Skill$teleport$($x13, $x14, $x15, $x16);var $s$2 = $insert_skill$($x10, $x11, $x12);var $x17 = $s$2;var $x18 = JSTR_TO_LIST(`Z`);var $x20 = _$1;var $x21 = 300n;var $x22 = 100.0;var $x23 = 100n;var $x19 = $UG$SIPD$Skill$wave_of_force$($x20, $x21, $x22, $x23);var $s$3 = $insert_skill$($x17, $x18, $x19);var $x24 = $s$3;var $x25 = JSTR_TO_LIST(`W`);var $x27 = _$1;var $x28 = 500.0;var $x29 = 5.0;var $x30 = 20n;var $x31 = 100n;var $x26 = $UG$SIPD$Skill$shoot$($x27, $x28, $x29, $x30, $x31);var $s$4 = $insert_skill$($x24, $x25, $x26);var $x32 = $s$4;var $x33 = JSTR_TO_LIST(`Q`);var $x35 = _$1;var $x36 = 200.0;var $x37 = 10n;var $x38 = 5.0;var $x39 = 100n;var $x34 = $UG$SIPD$Skill$magic_missiles$($x35, $x36, $x37, $x38, $x39);var $s$5 = $insert_skill$($x32, $x33, $x34);var $x40 = $s$5;var $x41 = JSTR_TO_LIST(`R`);var $x43 = _$1;var $x44 = 500n;var $x45 = 30.0;var $x46 = 200.0;var $x47 = 100n;var $x42 = $UG$SIPD$Skill$disintegrate$($x43, $x44, $x45, $x46, $x47);var $s$6 = $insert_skill$($x40, $x41, $x42);var $li_ming_health$7 = 200n;var $x48 = $String;var $x49 = /*BigInt*/null;var $s_cooldowns$8 = $OrdTree$empty$($x48, $x49);var $x50 = $s_cooldowns$8;var $x51 = JSTR_TO_LIST(`RightClick`);var $x52 = 0n;var $s_cooldowns$9 = $insert_cooldown$($x50, $x51, $x52);var $x53 = $s_cooldowns$9;var $x54 = JSTR_TO_LIST(`R`);var $x55 = 0n;var $s_cooldowns$10 = $insert_cooldown$($x53, $x54, $x55);var $x56 = $s_cooldowns$10;var $x57 = JSTR_TO_LIST(`E`);var $x58 = 0n;var $s_cooldowns$11 = $insert_cooldown$($x56, $x57, $x58);var $x59 = $s_cooldowns$11;var $x60 = JSTR_TO_LIST(`Z`);var $x61 = 0n;var $s_cooldowns$12 = $insert_cooldown$($x59, $x60, $x61);var $x62 = $s_cooldowns$12;var $x63 = JSTR_TO_LIST(`W`);var $x64 = 0n;var $s_cooldowns$13 = $insert_cooldown$($x62, $x63, $x64);var $x65 = $s_cooldowns$13;var $x66 = JSTR_TO_LIST(`Q`);var $x67 = 0n;var $s_cooldowns$14 = $insert_cooldown$($x65, $x66, $x67);var $x68 = $UG$SIPD$Hero$HeroState;var $x69 = $x1.hero_states;var $x70 = _$1;var $x71 = ({$: "HeroState"});var $x72 = $s_cooldowns$14;$x71.cooldowns = $x72;var $x73 = $li_ming_health$7;$x71.health = $x73;var $new_hero_states$15 = $Map$insert$($x68, $x69, $x70, $x71);var $x0 = ({$: "Pair"});var $x74 = $s$6;$x0.fst = $x74;var $x75 = ({$: "State"});var $x76 = $x1.next_id;$x75.next_id = $x76;var $x77 = $x1.tick;$x75.tick = $x77;var $x78 = $x1.players;$x75.players = $x78;var $x79 = $new_hero_states$15;$x75.hero_states = $x79;var $x80 = $x1.game_map;$x75.game_map = $x80;$x0.snd = $x75;return $x0; }
const $make_skills = _$0 => _$1 => _$2 => $make_skills$(_$0,_$1,_$2)

function $UG$SIPD$Hero$li_ming$(_$0/*:UG/SIPD/State*/,_$1/*:BigInt*/,_$2/*:V2*/) {var $name$0 = JSTR_TO_LIST(`Li-Ming`);var $x1 = _$2;var $x2 = 20.0;var $shape$1 = $UG$Shape$circle$($x1, $x2);var $x3 = _$0;var $x4 = ({$: "Body"});var $x5 = _$1;$x4.id = $x5;var $x6 = $shape$1;$x4.hitbox = $x6;var $x8 = $tick;var $x9 = _$1;var $x7 = ($x8)($x9);$x4.tick = $x7;var $x10 = ({$: "Nil"});$x4.effects = $x10;var $x11 = ({$: "TakesEffects"});$x4.collidable = $x11;var $state$2 = $UG$SIPD$State$insert_body$($x3, $x4);var $x12 = $state$2;var $x13 = _$1;var $x14 = _$1;var $got$3 = $make_skills$($x12, $x13, $x14);var $x15 = $got$3;var $x0 = ({$: "Pair"});var $x16 = ({$: "Hero"});var $x17 = _$1;$x16.owner_id = $x17;var $x18 = $name$0;$x16.name = $x18;var $x19 = $x15.fst;$x16.skills = $x19;var $x20 = _$1;$x16.body_id = $x20;$x0.fst = $x16;var $x21 = $x15.snd;$x0.snd = $x21;return $x0; }
const $UG$SIPD$Hero$li_ming = _$0 => _$1 => _$2 => $UG$SIPD$Hero$li_ming$(_$0,_$1,_$2)

function $p_hero$(_$0/*:UG/SIPD/State*/,_$1/*:BigInt*/) {var $x1 = _$0;var $x2 = _$1;var $x3 = ({$: "V2"});var $x4 = 0.0;$x3.x = $x4;var $x5 = 0.0;$x3.y = $x5;var $x0 = $UG$SIPD$Hero$li_ming$($x1, $x2, $x3);return $x0; }
const $p_hero = _$0 => _$1 => $p_hero$(_$0,_$1)

const $initial_keys$ = (() => {var $x1 = $String;var $x3 = $Bool;var $x4 = $V2;var $x2 = $Pair$($x3, $x4);var $keys$0 = $OrdTree$empty$($x1, $x2);var $x5 = $String;var $x7 = $Bool;var $x8 = $V2;var $x6 = $Pair$($x7, $x8);var $x9 = $String$Ord;var $x10 = $keys$0;var $x11 = ({$: "Pair"});var $x12 = JSTR_TO_LIST(`E`);$x11.fst = $x12;var $x13 = ({$: "Pair"});var $x14 = ({$: "False"});$x13.fst = $x14;var $x15 = ({$: "V2"});var $x16 = 0.0;$x15.x = $x16;var $x17 = 0.0;$x15.y = $x17;$x13.snd = $x15;$x11.snd = $x13;var $keys$1 = $OrdTree$insert$($x5, $x6, $x9, $x10, $x11);var $x0 = $keys$1;return $x0; })()
const $initial_keys = $initial_keys$

function $UG$SIPD$Player$init$(_$0/*:BigInt*/,_$1/*:UG/SIPD/State*/) {var $x1 = _$1;var $x2 = _$0;var $got$0 = $p_hero$($x1, $x2);var $x3 = $got$0;var $x0 = ({$: "Pair"});var $x4 = ({$: "Player"});var $x5 = _$0;$x4.id = $x5;var $x6 = JSTR_TO_LIST(`Anon`);$x4.name = $x6;var $x7 = $initial_keys;$x4.keys = $x7;var $x8 = ({$: "V2"});var $x9 = 0.0;$x8.x = $x9;var $x10 = 0.0;$x8.y = $x10;$x4.target = $x8;var $x11 = $x3.fst;$x4.hero = $x11;$x0.fst = $x4;var $x12 = $x3.snd;$x0.snd = $x12;return $x0; }
const $UG$SIPD$Player$init = _$0 => _$1 => $UG$SIPD$Player$init$(_$0,_$1)

function $handle_new_player$(_$0/*:BigInt*/,_$1/*:UG/SIPD/Event*/,_$2/*:UG/SIPD/State*/) {var $x1 = _$2;var $x3 = $UG$SIPD$Player;var $x4 = $x1.players;var $x5 = _$0;var $x2 = $Map$get$($x3, $x4, $x5);switch ($x2.$) { case "None": { var $x6 = _$1;var $initial_name$0 = $get_player_name$($x6);var $x7 = _$0;var $x8 = ({$: "State"});var $x9 = $x1.next_id;$x8.next_id = $x9;var $x10 = $x1.tick;$x8.tick = $x10;var $x11 = $x1.players;$x8.players = $x11;var $x12 = $x1.hero_states;$x8.hero_states = $x12;var $x13 = $x1.game_map;$x8.game_map = $x13;var $got$1 = $UG$SIPD$Player$init$($x7, $x8);var $x14 = $got$1;var $got$2 = $x14.snd;var $x15 = $got$2;var $x16 = $UG$SIPD$Player;var $x17 = $x15.players;var $x18 = _$0;var $x19 = $x14.fst;var $updated_players$3 = $Map$insert$($x16, $x17, $x18, $x19);var $x0 = ({$: "State"});var $x20 = $x15.next_id;$x0.next_id = $x20;var $x21 = $x15.tick;$x0.tick = $x21;var $x22 = $updated_players$3;$x0.players = $x22;var $x23 = $x15.hero_states;$x0.hero_states = $x23;var $x24 = $x15.game_map;$x0.game_map = $x24; break; } case "Some": { var $x25 = $x2.value;var $x0 = ({$: "State"});var $x26 = $x1.next_id;$x0.next_id = $x26;var $x27 = $x1.tick;$x0.tick = $x27;var $x28 = $x1.players;$x0.players = $x28;var $x29 = $x1.hero_states;$x0.hero_states = $x29;var $x30 = $x1.game_map;$x0.game_map = $x30; break; } }return $x0; }
const $handle_new_player = _$0 => _$1 => _$2 => $handle_new_player$(_$0,_$1,_$2)

function $update_player_name$(_$0/*:Maybe<UG/SIPD/Player>*/,_$1/*:String*/,_$2/*:BigInt*/,_$3/*:Map<BigInt, Maybe<UG/SIPD/Player>>*/) {var $x1 = _$0;switch ($x1.$) { case "None": { var $x0 = _$3; break; } case "Some": { var $x2 = $x1.value;var $x3 = $UG$SIPD$Player;var $x4 = _$3;var $x5 = _$2;var $x6 = ({$: "Player"});var $x7 = $x2.id;$x6.id = $x7;var $x8 = _$1;$x6.name = $x8;var $x9 = $x2.keys;$x6.keys = $x9;var $x10 = $x2.target;$x6.target = $x10;var $x11 = $x2.hero;$x6.hero = $x11;var $x0 = $Map$insert$($x3, $x4, $x5, $x6); break; } }return $x0; }
const $update_player_name = _$0 => _$1 => _$2 => _$3 => $update_player_name$(_$0,_$1,_$2,_$3)

function $get_mouse_pos$(_$0/*:Maybe<Pair<Bool><V2>>*/) {var $x1 = _$0;switch ($x1.$) { case "None": { var $x0 = ({$: "V2"});var $x2 = 0.0;$x0.x = $x2;var $x3 = 0.0;$x0.y = $x3; break; } case "Some": { var $x4 = $x1.value;var $x0 = $x4.snd; break; } }return $x0; }
const $get_mouse_pos = _$0 => $get_mouse_pos$(_$0)

function $get_key_value$(_$0/*:String*/,_$1/*:Maybe<UG/SIPD/Player>*/) {var $x1 = _$1;switch ($x1.$) { case "None": { var $x0 = ({$: "None"}); break; } case "Some": { var $x2 = $x1.value;var $x4 = $String;var $x6 = $Bool;var $x7 = $V2;var $x5 = $Pair$($x6, $x7);var $x8 = $String$Ord;var $x9 = $x2.keys;var $x3 = $OrdTree$get$($x4, $x5, $x8, $x9);var $x10 = _$0;var $x0 = ($x3)($x10); break; } }return $x0; }
const $get_key_value = _$0 => _$1 => $get_key_value$(_$0,_$1)

function $update_player_key$(_$0/*:Maybe<UG/SIPD/Player>*/,_$1/*:String*/,_$2/*:Bool*/,_$3/*:BigInt*/,_$4/*:V2*/,_$5/*:Map<BigInt, Maybe<UG/SIPD/Player>>*/) {var $x1 = _$0;switch ($x1.$) { case "None": { var $x0 = _$5; break; } case "Some": { var $x2 = $x1.value;var $x3 = $String;var $x5 = $Bool;var $x6 = $V2;var $x4 = $Pair$($x5, $x6);var $x7 = $String$Ord;var $x8 = $x2.keys;var $x9 = ({$: "Pair"});var $x10 = _$1;$x9.fst = $x10;var $x11 = ({$: "Pair"});var $x12 = _$2;$x11.fst = $x12;var $x13 = _$4;$x11.snd = $x13;$x9.snd = $x11;var $new_keys$0 = $OrdTree$insert$($x3, $x4, $x7, $x8, $x9);var $x14 = $UG$SIPD$Player;var $x15 = _$5;var $x16 = _$3;var $x17 = ({$: "Player"});var $x18 = $x2.id;$x17.id = $x18;var $x19 = $x2.name;$x17.name = $x19;var $x20 = $new_keys$0;$x17.keys = $x20;var $x21 = $x2.target;$x17.target = $x21;var $x22 = $x2.hero;$x17.hero = $x22;var $x0 = $Map$insert$($x14, $x15, $x16, $x17); break; } }return $x0; }
const $update_player_key = _$0 => _$1 => _$2 => _$3 => _$4 => _$5 => $update_player_key$(_$0,_$1,_$2,_$3,_$4,_$5)

function $update_player_target$(_$0/*:Maybe<UG/SIPD/Player>*/,_$1/*:Number*/,_$2/*:Number*/,_$3/*:BigInt*/,_$4/*:Map<BigInt, Maybe<UG/SIPD/Player>>*/) {var $x1 = _$0;switch ($x1.$) { case "None": { var $x0 = _$4; break; } case "Some": { var $x2 = $x1.value;var $x3 = $UG$SIPD$Player;var $x4 = _$4;var $x5 = _$3;var $x6 = ({$: "Player"});var $x7 = $x2.id;$x6.id = $x7;var $x8 = $x2.name;$x6.name = $x8;var $x9 = $x2.keys;$x6.keys = $x9;var $x10 = ({$: "V2"});var $x11 = _$1;$x10.x = $x11;var $x12 = _$2;$x10.y = $x12;$x6.target = $x10;var $x13 = $x2.hero;$x6.hero = $x13;var $x0 = $Map$insert$($x3, $x4, $x5, $x6); break; } }return $x0; }
const $update_player_target = _$0 => _$1 => _$2 => _$3 => _$4 => $update_player_target$(_$0,_$1,_$2,_$3,_$4)

function $handle_event$(_$0/*:UG/SIPD/Event*/) {var $x1 = _$0;switch ($x1.$) { case "ActionEvent": { var $x2 = $x1.action;var $x0 = ($__3$0 => {var $x4 = $__3$0;var $x5 = $UG$SIPD$Player;var $x6 = $x4.players;var $x7 = $x2.pid;var $action_player$1 = $Map$get$($x5, $x6, $x7);var $x8 = $action_player$1;var $x9 = $x2.nick;var $x10 = $x2.pid;var $x11 = $x4.players;var $updated_players$2 = $update_player_name$($x8, $x9, $x10, $x11);var $x3 = ({$: "State"});var $x12 = $x4.next_id;$x3.next_id = $x12;var $x13 = $x4.tick;$x3.tick = $x13;var $x14 = $updated_players$2;$x3.players = $x14;var $x15 = $x4.hero_states;$x3.hero_states = $x15;var $x16 = $x4.game_map;$x3.game_map = $x16;return $x3;}); break; } case "KeyEvent": { var $x0 = ($__4$0 => {var $x18 = $__4$0;var $x19 = $UG$SIPD$Player;var $x20 = $x18.players;var $x21 = $x1.pid;var $action_player$1 = $Map$get$($x19, $x20, $x21);var $x23 = $x1.key;var $x24 = $action_player$1;var $x22 = $get_key_value$($x23, $x24);var $old_value$2 = $get_mouse_pos$($x22);var $x25 = $action_player$1;var $x26 = $x1.key;var $x27 = $x1.pressed;var $x28 = $x1.pid;var $x29 = $old_value$2;var $x30 = $x18.players;var $updated_players$3 = $update_player_key$($x25, $x26, $x27, $x28, $x29, $x30);var $x17 = ({$: "State"});var $x31 = $x18.next_id;$x17.next_id = $x31;var $x32 = $x18.tick;$x17.tick = $x32;var $x33 = $updated_players$3;$x17.players = $x33;var $x34 = $x18.hero_states;$x17.hero_states = $x34;var $x35 = $x18.game_map;$x17.game_map = $x35;return $x17;}); break; } case "KeyMouse": { var $x0 = ($__6$0 => {var $x37 = $__6$0;var $x38 = $UG$SIPD$Player;var $x39 = $x37.players;var $x40 = $x1.pid;var $action_player$1 = $Map$get$($x38, $x39, $x40);var $x41 = $action_player$1;var $x42 = $x1.key;var $x43 = $x1.pressed;var $x44 = $x1.pid;var $x45 = ({$: "V2"});var $x46 = $x1.x;$x45.x = $x46;var $x47 = $x1.y;$x45.y = $x47;var $x48 = $x37.players;var $updated_players$2 = $update_player_key$($x41, $x42, $x43, $x44, $x45, $x48);var $x36 = ({$: "State"});var $x49 = $x37.next_id;$x36.next_id = $x49;var $x50 = $x37.tick;$x36.tick = $x50;var $x51 = $updated_players$2;$x36.players = $x51;var $x52 = $x37.hero_states;$x36.hero_states = $x52;var $x53 = $x37.game_map;$x36.game_map = $x53;return $x36;}); break; } case "MouseClick": { var $x54 = $x1.click;switch ($x54.$) { case "LeftButton": { var $x0 = ($__4$0 => {var $x56 = $__4$0;var $x57 = $UG$SIPD$Player;var $x58 = $x56.players;var $x59 = $x1.pid;var $action_player$1 = $Map$get$($x57, $x58, $x59);var $x60 = $action_player$1;var $x61 = $x1.x;var $x62 = $x1.y;var $x63 = $x1.pid;var $x64 = $x56.players;var $updated_players$2 = $update_player_target$($x60, $x61, $x62, $x63, $x64);var $x55 = ({$: "State"});var $x65 = $x56.next_id;$x55.next_id = $x65;var $x66 = $x56.tick;$x55.tick = $x66;var $x67 = $updated_players$2;$x55.players = $x67;var $x68 = $x56.hero_states;$x55.hero_states = $x68;var $x69 = $x56.game_map;$x55.game_map = $x69;return $x55;}); break; } case "RightButton": { var $x0 = ($__4$0 => {var $x71 = $__4$0;var $x72 = $UG$SIPD$Player;var $x73 = $x71.players;var $x74 = $x1.pid;var $action_player$1 = $Map$get$($x72, $x73, $x74);var $x75 = $action_player$1;var $x76 = $x1.x;var $x77 = $x1.y;var $x78 = $x1.pid;var $x79 = $x71.players;var $updated_players$2 = $update_player_target$($x75, $x76, $x77, $x78, $x79);var $x70 = ({$: "State"});var $x80 = $x71.next_id;$x70.next_id = $x80;var $x81 = $x71.tick;$x70.tick = $x81;var $x82 = $updated_players$2;$x70.players = $x82;var $x83 = $x71.hero_states;$x70.hero_states = $x83;var $x84 = $x71.game_map;$x70.game_map = $x84;return $x70;}); break; } } break; } case "MouseMove": { var $x0 = ($__4$0 => {var $x86 = $__4$0;var $x85 = ({$: "State"});var $x87 = $x86.next_id;$x85.next_id = $x87;var $x88 = $x86.tick;$x85.tick = $x88;var $x89 = $x86.players;$x85.players = $x89;var $x90 = $x86.hero_states;$x85.hero_states = $x90;var $x91 = $x86.game_map;$x85.game_map = $x91;return $x85;}); break; } }return $x0; }
const $handle_event = _$0 => $handle_event$(_$0)

function $UG$SIPD$Game$when$(_$0/*:UG/SIPD/Event*/,_$1/*:UG/SIPD/State*/) {var $x1 = _$0;var $pid$0 = $UG$SIPD$Event$get_event_pid$($x1);var $x2 = $pid$0;var $x3 = _$0;var $x4 = _$1;var $state$1 = $handle_new_player$($x2, $x3, $x4);var $x6 = _$0;var $x5 = $handle_event$($x6);var $x7 = $state$1;var $state$2 = ($x5)($x7);var $x0 = $state$2;return $x0; }
const $UG$SIPD$Game$when = _$0 => _$1 => $UG$SIPD$Game$when$(_$0,_$1)

function $UG$SIPD$GameMap$b_tick$(_$0/*:UG/SIPD/State*/) {var $x0 = _$0;return $x0; }
const $UG$SIPD$GameMap$b_tick = _$0 => $UG$SIPD$GameMap$b_tick$(_$0)

function $UG$SM$ActionLogs$(_$0/*:Type*/) {var $x2 = _$0;var $x1 = $List$($x2);var $x0 = $BinMap$($x1);return $x0; }
const $UG$SM$ActionLogs = _$0 => $UG$SM$ActionLogs$(_$0)

const $UG$SM$Tick$ = (() => {var $x0 = /*BigInt*/null;return $x0; })()
const $UG$SM$Tick = $UG$SM$Tick$

function $UG$SM$ActionLogs$add_action$(_$0/*:Type*/,_$1/*:UG/SM/ActionLogs<null>*/,_$2/*:UG/SM/Tick*/,_$3/*:null*/) {var $x3 = _$0;var $x2 = $List$($x3);var $x4 = _$1;var $x6 = _$2;var $x5 = $U64$to_bits$($x6);var $x1 = $BinMap$get$($x2, $x4, $x5);switch ($x1.$) { case "None": { var $x8 = _$0;var $x7 = $List$($x8);var $x9 = _$1;var $x11 = _$2;var $x10 = $U64$to_bits$($x11);var $x12 = ({$: "Cons"});var $x13 = _$3;$x12.head = $x13;var $x14 = ({$: "Nil"});$x12.tail = $x14;var $x0 = $BinMap$set$($x7, $x9, $x10, $x12); break; } case "Some": { var $x16 = _$0;var $x15 = $List$($x16);var $x17 = _$1;var $x19 = _$2;var $x18 = $U64$to_bits$($x19);var $x21 = _$0;var $x22 = $x1.value;var $x23 = ({$: "Cons"});var $x24 = _$3;$x23.head = $x24;var $x25 = ({$: "Nil"});$x23.tail = $x25;var $x20 = $List$append$($x21, $x22, $x23);var $x0 = $BinMap$set$($x15, $x17, $x18, $x20); break; } }return $x0; }
const $UG$SM$ActionLogs$add_action = _$0 => _$1 => _$2 => _$3 => $UG$SM$ActionLogs$add_action$(_$0,_$1,_$2,_$3)

function $UG$SM$ActionLogs$get_actions$(_$0/*:Type*/,_$1/*:UG/SM/ActionLogs<null>*/,_$2/*:UG/SM/Tick*/) {var $x1 = _$2;var $key$0 = $U64$to_bits$($x1);var $x4 = _$0;var $x3 = $List$($x4);var $x5 = _$1;var $x6 = $key$0;var $x2 = $BinMap$get$($x3, $x5, $x6);switch ($x2.$) { case "None": { var $x0 = ({$: "Nil"}); break; } case "Some": { var $x0 = $x2.value; break; } }return $x0; }
const $UG$SM$ActionLogs$get_actions = _$0 => _$1 => _$2 => $UG$SM$ActionLogs$get_actions$(_$0,_$1,_$2)

function $UG$SM$Game$init$(_$0/*:Type*/,_$1/*:Type*/,_$2/*:UG/SM/Game<null><null>*/) {var $x1 = _$2;var $x0 = $x1.init;return $x0; }
const $UG$SM$Game$init = _$0 => _$1 => _$2 => $UG$SM$Game$init$(_$0,_$1,_$2)

function $UG$SM$Game$tick$(_$0/*:Type*/,_$1/*:Type*/,_$2/*:UG/SM/Game<null><null>*/) {var $x1 = _$2;var $x0 = $x1.tick;return $x0; }
const $UG$SM$Game$tick = _$0 => _$1 => _$2 => $UG$SM$Game$tick$(_$0,_$1,_$2)

function $UG$SM$Game$when$(_$0/*:Type*/,_$1/*:Type*/,_$2/*:UG/SM/Game<null><null>*/) {var $x1 = _$2;var $x0 = $x1.when;return $x0; }
const $UG$SM$Game$when = _$0 => _$1 => _$2 => $UG$SM$Game$when$(_$0,_$1,_$2)

function $UG$SM$StateLogs$StateNode$(_$0/*:Type*/) {var $x0 = /*{$:'StateNode', tick: UG/SM/Tick, keep: BigInt, life: BigInt, state: _$0, older: Maybe<UG/SM/StateLogs/StateNode<_$0>>}*/null;return $x0; }
const $UG$SM$StateLogs$StateNode = _$0 => $UG$SM$StateLogs$StateNode$(_$0)

function $UG$SM$StateLogs$(_$0/*:Type*/) {var $x2 = _$0;var $x1 = $UG$SM$StateLogs$StateNode$($x2);var $x0 = $Maybe$($x1);return $x0; }
const $UG$SM$StateLogs = _$0 => $UG$SM$StateLogs$(_$0)

function $UG$SM$Mach$(_$0/*:Type*/,_$1/*:Type*/) {var $x0 = /*{$:'Mach', ticks_per_second: BigInt, genesis_tick: UG/SM/Tick, cached_tick: UG/SM/Tick, state_logs: UG/SM/StateLogs<_$0>, action_logs: UG/SM/ActionLogs<_$1>, action_eq: ($_$0:_$1) => ($_$1:_$1) => Bool}*/null;return $x0; }
const $UG$SM$Mach = _$0 => _$1 => $UG$SM$Mach$(_$0,_$1)

function $UG$SM$Mach$action_logs$(_$0/*:Type*/,_$1/*:Type*/,_$2/*:UG/SM/Mach<null><null>*/) {var $x1 = _$2;var $x0 = $x1.action_logs;return $x0; }
const $UG$SM$Mach$action_logs = _$0 => _$1 => _$2 => $UG$SM$Mach$action_logs$(_$0,_$1,_$2)

function $UG$SM$Mach$cached_tick$(_$0/*:Type*/,_$1/*:Type*/,_$2/*:UG/SM/Mach<null><null>*/) {var $x1 = _$2;var $x0 = $x1.cached_tick;return $x0; }
const $UG$SM$Mach$cached_tick = _$0 => _$1 => _$2 => $UG$SM$Mach$cached_tick$(_$0,_$1,_$2)

function $UG$SM$StateLogs$StateNode$keep$(_$0/*:Type*/,_$1/*:UG/SM/StateLogs/StateNode<null>*/) {var $x1 = _$1;var $x0 = $x1.keep;return $x0; }
const $UG$SM$StateLogs$StateNode$keep = _$0 => _$1 => $UG$SM$StateLogs$StateNode$keep$(_$0,_$1)

function $UG$SM$StateLogs$StateNode$life$(_$0/*:Type*/,_$1/*:UG/SM/StateLogs/StateNode<null>*/) {var $x1 = _$1;var $x0 = $x1.life;return $x0; }
const $UG$SM$StateLogs$StateNode$life = _$0 => _$1 => $UG$SM$StateLogs$StateNode$life$(_$0,_$1)

function $UG$SM$StateLogs$StateNode$older$(_$0/*:Type*/,_$1/*:UG/SM/StateLogs/StateNode<null>*/) {var $x1 = _$1;var $x0 = $x1.older;return $x0; }
const $UG$SM$StateLogs$StateNode$older = _$0 => _$1 => $UG$SM$StateLogs$StateNode$older$(_$0,_$1)

function $UG$SM$StateLogs$StateNode$set_keep$(_$0/*:Type*/,_$1/*:BigInt*/,_$2/*:UG/SM/StateLogs/StateNode<null>*/) {var $x1 = _$2;var $x0 = ({$: "StateNode"});var $x2 = $x1.tick;$x0.tick = $x2;var $x3 = _$1;$x0.keep = $x3;var $x4 = $x1.life;$x0.life = $x4;var $x5 = $x1.state;$x0.state = $x5;var $x6 = $x1.older;$x0.older = $x6;return $x0; }
const $UG$SM$StateLogs$StateNode$set_keep = _$0 => _$1 => _$2 => $UG$SM$StateLogs$StateNode$set_keep$(_$0,_$1,_$2)

function $UG$SM$StateLogs$StateNode$set_life$(_$0/*:Type*/,_$1/*:BigInt*/,_$2/*:UG/SM/StateLogs/StateNode<null>*/) {var $x1 = _$2;var $x0 = ({$: "StateNode"});var $x2 = $x1.tick;$x0.tick = $x2;var $x3 = $x1.keep;$x0.keep = $x3;var $x4 = _$1;$x0.life = $x4;var $x5 = $x1.state;$x0.state = $x5;var $x6 = $x1.older;$x0.older = $x6;return $x0; }
const $UG$SM$StateLogs$StateNode$set_life = _$0 => _$1 => _$2 => $UG$SM$StateLogs$StateNode$set_life$(_$0,_$1,_$2)

function $UG$SM$StateLogs$StateNode$state$(_$0/*:Type*/,_$1/*:UG/SM/StateLogs/StateNode<null>*/) {var $x1 = _$1;var $x0 = $x1.state;return $x0; }
const $UG$SM$StateLogs$StateNode$state = _$0 => _$1 => $UG$SM$StateLogs$StateNode$state$(_$0,_$1)

function $UG$SM$StateLogs$StateNode$tick$(_$0/*:Type*/,_$1/*:UG/SM/StateLogs/StateNode<null>*/) {var $x1 = _$1;var $x0 = $x1.tick;return $x0; }
const $UG$SM$StateLogs$StateNode$tick = _$0 => _$1 => $UG$SM$StateLogs$StateNode$tick$(_$0,_$1)

function $UG$SM$StateLogs$find_rollback_amount$go$(_$0/*:Type*/,_$1/*:UG/SM/Tick*/,_$2/*:UG/SM/StateLogs<null>*/,_$3/*:BigInt*/) {while(1){var $x1 = _$2;switch ($x1.$) { case "None": { var $x0 = _$3; break; } case "Some": { var $x2 = $x1.value;var $x3 = _$1;var $x4 = $x2.tick;var $is_target_greater$0 = $U64$lt$($x3, $x4);var $x5 = $is_target_greater$0;switch ($x5.$) { case "True": { var $x6 = _$0;var $x7 = _$1;var $x8 = $x2.older;var $x10 = 1n;var $x11 = _$3;var $x9 = $U64$add$($x10, $x11);_$0 = $x6;_$1 = $x7;_$2 = $x8;_$3 = $x9;/*TCO*/continue; break; } case "False": { var $x0 = _$3; break; } } break; } }return $x0; }}
const $UG$SM$StateLogs$find_rollback_amount$go = _$0 => _$1 => _$2 => _$3 => $UG$SM$StateLogs$find_rollback_amount$go$(_$0,_$1,_$2,_$3)

function $UG$SM$StateLogs$find_rollback_amount$(_$0/*:Type*/,_$1/*:UG/SM/Tick*/,_$2/*:UG/SM/StateLogs<null>*/) {var $x1 = _$0;var $x2 = _$1;var $x3 = _$2;var $x4 = 0n;var $x0 = $UG$SM$StateLogs$find_rollback_amount$go$($x1, $x2, $x3, $x4);return $x0; }
const $UG$SM$StateLogs$find_rollback_amount = _$0 => _$1 => _$2 => $UG$SM$StateLogs$find_rollback_amount$(_$0,_$1,_$2)

function $UG$SM$StateLogs$push$go$life$(_$0/*:Type*/,_$1/*:null*/,_$2/*:UG/SM/StateLogs/StateNode<null>*/,_$3/*:UG/SM/Tick*/,_$4/*:BigInt*/) {var $x1 = _$4;if ($x1 === 0n) { var $x2 = _$0;var $x3 = 0n;var $x4 = _$2;var $updated_node$0 = $UG$SM$StateLogs$StateNode$set_keep$($x2, $x3, $x4);var $x0 = ({$: "Some"});var $x5 = ({$: "StateNode"});var $x6 = _$3;$x5.tick = $x6;var $x7 = 0n;$x5.keep = $x7;var $x9 = _$0;var $x10 = _$2;var $x8 = $UG$SM$StateLogs$StateNode$life$($x9, $x10);$x5.life = $x8;var $x11 = _$1;$x5.state = $x11;var $x12 = ({$: "Some"});var $x13 = $updated_node$0;$x12.value = $x13;$x5.older = $x12;$x0.value = $x5; } else { var $x14 = _$0;var $x15 = 0n;var $x17 = _$0;var $x19 = $x1;var $x20 = 1n;var $x18 = BigInt.asUintN(64, $x19 - $x20);var $x21 = _$2;var $x16 = $UG$SM$StateLogs$StateNode$set_life$($x17, $x18, $x21);var $updated_node$0 = $UG$SM$StateLogs$StateNode$set_keep$($x14, $x15, $x16);var $x0 = ({$: "Some"});var $x22 = ({$: "StateNode"});var $x23 = _$3;$x22.tick = $x23;var $x24 = 0n;$x22.keep = $x24;var $x25 = 0n;$x22.life = $x25;var $x26 = _$1;$x22.state = $x26;var $x27 = ({$: "Some"});var $x28 = $updated_node$0;$x27.value = $x28;$x22.older = $x27;$x0.value = $x22; }return $x0; }
const $UG$SM$StateLogs$push$go$life = _$0 => _$1 => _$2 => _$3 => _$4 => $UG$SM$StateLogs$push$go$life$(_$0,_$1,_$2,_$3,_$4)

function $UG$SM$StateLogs$push$go$(_$0/*:Type*/,_$1/*:null*/,_$2/*:UG/SM/StateLogs/StateNode<null>*/,_$3/*:UG/SM/Tick*/,_$4/*:BigInt*/) {var $x1 = _$4;if ($x1 === 0n) { var $x0 = ({$: "Some"});var $x3 = _$0;var $x4 = 1n;var $x5 = _$2;var $x2 = $UG$SM$StateLogs$StateNode$set_keep$($x3, $x4, $x5);$x0.value = $x2; } else { var $x6 = _$0;var $x7 = _$2;var $life$0 = $UG$SM$StateLogs$StateNode$life$($x6, $x7);var $x8 = _$0;var $x9 = _$1;var $x10 = _$2;var $x11 = _$3;var $x12 = $life$0;var $x0 = $UG$SM$StateLogs$push$go$life$($x8, $x9, $x10, $x11, $x12); }return $x0; }
const $UG$SM$StateLogs$push$go = _$0 => _$1 => _$2 => _$3 => _$4 => $UG$SM$StateLogs$push$go$(_$0,_$1,_$2,_$3,_$4)

function $UG$SM$StateLogs$push$(_$0/*:Type*/,_$1/*:null*/,_$2/*:UG/SM/StateLogs<null>*/,_$3/*:UG/SM/Tick*/) {var $x1 = _$2;switch ($x1.$) { case "None": { var $x0 = ({$: "Some"});var $x2 = ({$: "StateNode"});var $x3 = _$3;$x2.tick = $x3;var $x4 = 0n;$x2.keep = $x4;var $x5 = 0n;$x2.life = $x5;var $x6 = _$1;$x2.state = $x6;var $x7 = ({$: "None"});$x2.older = $x7;$x0.value = $x2; break; } case "Some": { var $x8 = _$0;var $x9 = $x1.value;var $keep$0 = $UG$SM$StateLogs$StateNode$keep$($x8, $x9);var $x10 = _$0;var $x11 = _$1;var $x12 = $x1.value;var $x13 = _$3;var $x14 = $keep$0;var $x0 = $UG$SM$StateLogs$push$go$($x10, $x11, $x12, $x13, $x14); break; } }return $x0; }
const $UG$SM$StateLogs$push = _$0 => _$1 => _$2 => _$3 => $UG$SM$StateLogs$push$(_$0,_$1,_$2,_$3)

function $UG$SM$StateLogs$rollback$go$(_$0/*:Type*/,_$1/*:BigInt*/,_$2/*:BigInt*/,_$3/*:UG/SM/StateLogs<null>*/,_$4/*:BigInt*/) {while(1){var $x1 = _$2;var $x2 = _$1;var $is_done$0 = $U64$lt$($x1, $x2);var $x5 = $is_done$0;var $x4 = $U64$from_bool$($x5);var $x3 = $U64$to_bool$($x4);switch ($x3.$) { case "True": { var $x0 = ({$: "Pair"});var $x6 = _$3;$x0.fst = $x6;var $x7 = _$4;$x0.snd = $x7; break; } case "False": { var $x8 = _$3;switch ($x8.$) { case "None": { var $x0 = ({$: "Pair"});var $x9 = ({$: "None"});$x0.fst = $x9;var $x10 = _$4;$x0.snd = $x10; break; } case "Some": { var $x11 = _$4;var $x14 = _$0;var $x15 = $x8.value;var $x13 = $UG$SM$StateLogs$StateNode$life$($x14, $x15);var $x16 = 1n;var $x12 = $U64$add$($x13, $x16);var $cut$1 = $U64$add$($x11, $x12);var $x17 = _$0;var $x18 = $x8.value;var $states$2 = $UG$SM$StateLogs$StateNode$older$($x17, $x18);var $x19 = _$0;var $x21 = _$1;var $x22 = 1n;var $x20 = $U64$add$($x21, $x22);var $x23 = _$2;var $x24 = $states$2;var $x25 = $cut$1;_$0 = $x19;_$1 = $x20;_$2 = $x23;_$3 = $x24;_$4 = $x25;/*TCO*/continue; break; } } break; } }return $x0; }}
const $UG$SM$StateLogs$rollback$go = _$0 => _$1 => _$2 => _$3 => _$4 => $UG$SM$StateLogs$rollback$go$(_$0,_$1,_$2,_$3,_$4)

function $UG$SM$StateLogs$rollback$(_$0/*:Type*/,_$1/*:BigInt*/,_$2/*:UG/SM/StateLogs<null>*/) {var $x1 = _$2;switch ($x1.$) { case "None": { var $x0 = ({$: "None"}); break; } case "Some": { var $x2 = _$0;var $x3 = 0n;var $x4 = _$1;var $x5 = _$2;var $x6 = 0n;var $pair$0 = $UG$SM$StateLogs$rollback$go$($x2, $x3, $x4, $x5, $x6);var $x7 = $pair$0;var $x8 = $x7.fst;switch ($x8.$) { case "None": { var $x0 = ({$: "None"}); break; } case "Some": { var $x9 = _$0;var $x10 = $x8.value;var $tick$1 = $UG$SM$StateLogs$StateNode$tick$($x9, $x10);var $x12 = _$0;var $x13 = $x8.value;var $x11 = $UG$SM$StateLogs$StateNode$life$($x12, $x13);var $x14 = $x7.snd;var $life$2 = $U64$add$($x11, $x14);var $x15 = _$0;var $x16 = $x8.value;var $state$3 = $UG$SM$StateLogs$StateNode$state$($x15, $x16);var $x17 = _$0;var $x18 = $x8.value;var $older$4 = $UG$SM$StateLogs$StateNode$older$($x17, $x18);var $x0 = ({$: "Some"});var $x19 = ({$: "StateNode"});var $x20 = $tick$1;$x19.tick = $x20;var $x21 = 0n;$x19.keep = $x21;var $x22 = $life$2;$x19.life = $x22;var $x23 = $state$3;$x19.state = $x23;var $x24 = $older$4;$x19.older = $x24;$x0.value = $x19; break; } } break; } }return $x0; }
const $UG$SM$StateLogs$rollback = _$0 => _$1 => _$2 => $UG$SM$StateLogs$rollback$(_$0,_$1,_$2)

const $UG$SM$Time$ = (() => {var $x0 = /*BigInt*/null;return $x0; })()
const $UG$SM$Time = $UG$SM$Time$

function $UG$SM$Time$time_to_tick$(_$0/*:Type*/,_$1/*:Type*/,_$2/*:UG/SM/Mach<null><null>*/,_$3/*:UG/SM/Time*/) {var $x1 = _$2;var $x2 = _$3;var $x3 = $x1.ticks_per_second;var $ticks$0 = $U64$mul$($x2, $x3);var $x4 = $ticks$0;var $x5 = 1000n;var $x0 = $U64$div$($x4, $x5);return $x0; }
const $UG$SM$Time$time_to_tick = _$0 => _$1 => _$2 => _$3 => $UG$SM$Time$time_to_tick$(_$0,_$1,_$2,_$3)

function $UG$SM$TimedAction$(_$0/*:Type*/) {var $x0 = /*{$:'TimedAction', action: _$0, time: UG/SM/Time}*/null;return $x0; }
const $UG$SM$TimedAction = _$0 => $UG$SM$TimedAction$(_$0)

function $UG$SM$TimedAction$time_action$(_$0/*:Type*/,_$1/*:UG/SM/Time*/,_$2/*:null*/) {var $x0 = ({$: "TimedAction"});var $x1 = _$2;$x0.action = $x1;var $x2 = _$1;$x0.time = $x2;return $x0; }
const $UG$SM$TimedAction$time_action = _$0 => _$1 => _$2 => $UG$SM$TimedAction$time_action$(_$0,_$1,_$2)

function $UG$SM$add_action_to_logs$(_$0/*:Type*/,_$1/*:Type*/,_$2/*:UG/SM/Mach<null><null>*/,_$3/*:UG/SM/Tick*/,_$4/*:null*/) {var $x1 = _$2;var $x2 = _$1;var $x3 = $x1.action_logs;var $x4 = _$3;var $x5 = _$4;var $new_logs$0 = $UG$SM$ActionLogs$add_action$($x2, $x3, $x4, $x5);var $x0 = ({$: "Mach"});var $x6 = $x1.ticks_per_second;$x0.ticks_per_second = $x6;var $x7 = $x1.genesis_tick;$x0.genesis_tick = $x7;var $x8 = $x1.cached_tick;$x0.cached_tick = $x8;var $x9 = $x1.state_logs;$x0.state_logs = $x9;var $x10 = $new_logs$0;$x0.action_logs = $x10;var $x11 = $x1.action_eq;$x0.action_eq = $x11;return $x0; }
const $UG$SM$add_action_to_logs = _$0 => _$1 => _$2 => _$3 => _$4 => $UG$SM$add_action_to_logs$(_$0,_$1,_$2,_$3,_$4)

function $UG$SM$get_initial_state$(_$0/*:Type*/,_$1/*:Type*/,_$2/*:UG/SM/Mach<null><null>*/,_$3/*:UG/SM/Game<null><null>*/) {var $x1 = _$2;var $x2 = $x1.state_logs;switch ($x2.$) { case "None": { var $x0 = ({$: "Pair"});var $x4 = _$0;var $x5 = _$1;var $x6 = _$3;var $x3 = $UG$SM$Game$init$($x4, $x5, $x6);$x0.fst = $x3;var $x7 = $x1.genesis_tick;$x0.snd = $x7; break; } case "Some": { var $x0 = ({$: "Pair"});var $x9 = _$0;var $x10 = $x2.value;var $x8 = $UG$SM$StateLogs$StateNode$state$($x9, $x10);$x0.fst = $x8;var $x12 = _$0;var $x13 = $x2.value;var $x11 = $UG$SM$StateLogs$StateNode$tick$($x12, $x13);$x0.snd = $x11; break; } }return $x0; }
const $UG$SM$get_initial_state = _$0 => _$1 => _$2 => _$3 => $UG$SM$get_initial_state$(_$0,_$1,_$2,_$3)

function $UG$SM$update_mach$(_$0/*:Type*/,_$1/*:Type*/,_$2/*:UG/SM/Mach<null><null>*/,_$3/*:UG/SM/Tick*/,_$4/*:null*/) {var $x1 = _$2;var $x2 = $x1.cached_tick;var $x3 = _$3;var $new_cached_tick$0 = $U64$max$($x2, $x3);var $x4 = _$0;var $x5 = _$4;var $x6 = $x1.state_logs;var $x7 = _$3;var $new_state_logs$1 = $UG$SM$StateLogs$push$($x4, $x5, $x6, $x7);var $x0 = ({$: "Mach"});var $x8 = $x1.ticks_per_second;$x0.ticks_per_second = $x8;var $x9 = $x1.genesis_tick;$x0.genesis_tick = $x9;var $x10 = $new_cached_tick$0;$x0.cached_tick = $x10;var $x11 = $new_state_logs$1;$x0.state_logs = $x11;var $x12 = $x1.action_logs;$x0.action_logs = $x12;var $x13 = $x1.action_eq;$x0.action_eq = $x13;return $x0; }
const $UG$SM$update_mach = _$0 => _$1 => _$2 => _$3 => _$4 => $UG$SM$update_mach$(_$0,_$1,_$2,_$3,_$4)

function $UG$SM$compute$go$(_$0/*:Type*/,_$1/*:Type*/,_$2/*:UG/SM/Mach<null><null>*/,_$3/*:UG/SM/Game<null><null>*/,_$4/*:null*/,_$5/*:UG/SM/Tick*/,_$6/*:UG/SM/Tick*/) {while(1){var $x2 = _$5;var $x3 = _$6;var $x1 = $U64$eq$($x2, $x3);switch ($x1.$) { case "True": { var $x0 = ({$: "Pair"});var $x4 = _$4;$x0.fst = $x4;var $x5 = _$2;$x0.snd = $x5; break; } case "False": { var $x6 = _$5;var $x7 = 1n;var $next_tick$0 = $U64$add$($x6, $x7);var $x8 = _$1;var $x10 = _$0;var $x11 = _$1;var $x12 = _$2;var $x9 = $UG$SM$Mach$action_logs$($x10, $x11, $x12);var $x13 = _$5;var $actions$1 = $UG$SM$ActionLogs$get_actions$($x8, $x9, $x13);var $x14 = _$1;var $x15 = $actions$1;var $x16 = _$0;var $x17 = _$4;var $x19 = _$0;var $x20 = _$1;var $x21 = _$3;var $x18 = $UG$SM$Game$when$($x19, $x20, $x21);var $state_with_actions$2 = $List$foldr$($x14, $x15, $x16, $x17, $x18);var $x23 = _$0;var $x24 = _$1;var $x25 = _$3;var $x22 = $UG$SM$Game$tick$($x23, $x24, $x25);var $x26 = $state_with_actions$2;var $next_state$3 = ($x22)($x26);var $x27 = _$0;var $x28 = _$1;var $x29 = _$2;var $x30 = _$5;var $x31 = _$4;var $updated_mach$4 = $UG$SM$update_mach$($x27, $x28, $x29, $x30, $x31);var $x32 = _$0;var $x33 = _$1;var $x34 = $updated_mach$4;var $x35 = _$3;var $x36 = $next_state$3;var $x37 = $next_tick$0;var $x38 = _$6;_$0 = $x32;_$1 = $x33;_$2 = $x34;_$3 = $x35;_$4 = $x36;_$5 = $x37;_$6 = $x38;/*TCO*/continue; break; } }return $x0; }}
const $UG$SM$compute$go = _$0 => _$1 => _$2 => _$3 => _$4 => _$5 => _$6 => $UG$SM$compute$go$(_$0,_$1,_$2,_$3,_$4,_$5,_$6)

function $UG$SM$compute$(_$0/*:Type*/,_$1/*:Type*/,_$2/*:UG/SM/Mach<null><null>*/,_$3/*:UG/SM/Game<null><null>*/,_$4/*:UG/SM/Time*/) {var $x1 = _$0;var $x2 = _$1;var $x3 = _$2;var $x4 = _$4;var $end_t$0 = $UG$SM$Time$time_to_tick$($x1, $x2, $x3, $x4);var $x5 = _$0;var $x6 = _$1;var $x7 = _$2;var $x8 = _$3;var $got$1 = $UG$SM$get_initial_state$($x5, $x6, $x7, $x8);var $x9 = $got$1;var $x10 = $end_t$0;var $x11 = $x9.snd;var $diff$2 = $U64$sub$($x10, $x11);var $x13 = $diff$2;var $x14 = 1000n;var $x12 = $U64$gt$($x13, $x14);switch ($x12.$) { case "True": { var $x0 = ({$: "Pair"});var $x15 = $x9.fst;$x0.fst = $x15;var $x16 = _$2;$x0.snd = $x16; break; } case "False": { var $x17 = _$0;var $x18 = _$1;var $x19 = _$2;var $x20 = _$3;var $x21 = $x9.fst;var $x22 = $x9.snd;var $x23 = $end_t$0;var $x0 = $UG$SM$compute$go$($x17, $x18, $x19, $x20, $x21, $x22, $x23); break; } }return $x0; }
const $UG$SM$compute = _$0 => _$1 => _$2 => _$3 => _$4 => $UG$SM$compute$(_$0,_$1,_$2,_$3,_$4)

function $UG$SM$new_mach$(_$0/*:Type*/,_$1/*:Type*/,_$2/*:BigInt*/,_$3/*:($_$3:null) => ($_$4:null) => Bool*/) {var $x0 = ({$: "Mach"});var $x1 = _$2;$x0.ticks_per_second = $x1;var $x2 = 687399551400673280n;$x0.genesis_tick = $x2;var $x3 = 0n;$x0.cached_tick = $x3;var $x6 = _$0;var $x5 = $UG$SM$StateLogs$StateNode$($x6);var $x4 = $Maybe$none$($x5);$x0.state_logs = $x4;var $x9 = _$1;var $x8 = $List$($x9);var $x7 = $BinMap$new$($x8);$x0.action_logs = $x7;var $x10 = _$3;$x0.action_eq = $x10;return $x0; }
const $UG$SM$new_mach = _$0 => _$1 => _$2 => _$3 => $UG$SM$new_mach$(_$0,_$1,_$2,_$3)

function $UG$SM$update_genesis_tick$(_$0/*:Type*/,_$1/*:Type*/,_$2/*:UG/SM/Mach<null><null>*/,_$3/*:UG/SM/Tick*/) {var $x1 = _$2;var $x2 = _$3;var $x3 = $x1.genesis_tick;var $new_genesis$0 = $U64$min$($x2, $x3);var $x0 = ({$: "Mach"});var $x4 = $x1.ticks_per_second;$x0.ticks_per_second = $x4;var $x5 = $new_genesis$0;$x0.genesis_tick = $x5;var $x6 = $x1.cached_tick;$x0.cached_tick = $x6;var $x7 = $x1.state_logs;$x0.state_logs = $x7;var $x8 = $x1.action_logs;$x0.action_logs = $x8;var $x9 = $x1.action_eq;$x0.action_eq = $x9;return $x0; }
const $UG$SM$update_genesis_tick = _$0 => _$1 => _$2 => _$3 => $UG$SM$update_genesis_tick$(_$0,_$1,_$2,_$3)

function $UG$SM$update_cached_tick$(_$0/*:Type*/,_$1/*:Type*/,_$2/*:UG/SM/Mach<null><null>*/,_$3/*:UG/SM/Tick*/) {var $x1 = _$2;var $x3 = _$3;var $x4 = $x1.cached_tick;var $x2 = $U64$lt$($x3, $x4);switch ($x2.$) { case "True": { var $x0 = ({$: "Mach"});var $x5 = $x1.ticks_per_second;$x0.ticks_per_second = $x5;var $x6 = $x1.genesis_tick;$x0.genesis_tick = $x6;var $x7 = _$3;$x0.cached_tick = $x7;var $x8 = $x1.state_logs;$x0.state_logs = $x8;var $x9 = $x1.action_logs;$x0.action_logs = $x9;var $x10 = $x1.action_eq;$x0.action_eq = $x10; break; } case "False": { var $x0 = ({$: "Mach"});var $x11 = $x1.ticks_per_second;$x0.ticks_per_second = $x11;var $x12 = $x1.genesis_tick;$x0.genesis_tick = $x12;var $x13 = $x1.cached_tick;$x0.cached_tick = $x13;var $x14 = $x1.state_logs;$x0.state_logs = $x14;var $x15 = $x1.action_logs;$x0.action_logs = $x15;var $x16 = $x1.action_eq;$x0.action_eq = $x16; break; } }return $x0; }
const $UG$SM$update_cached_tick = _$0 => _$1 => _$2 => _$3 => $UG$SM$update_cached_tick$(_$0,_$1,_$2,_$3)

function $UG$SM$remove_future_states$(_$0/*:Type*/,_$1/*:Type*/,_$2/*:UG/SM/Mach<null><null>*/,_$3/*:UG/SM/Tick*/) {var $x1 = _$2;var $x2 = _$0;var $x3 = _$3;var $x4 = $x1.state_logs;var $rollback_amount$0 = $UG$SM$StateLogs$find_rollback_amount$($x2, $x3, $x4);var $x5 = _$0;var $x6 = $rollback_amount$0;var $x7 = $x1.state_logs;var $new_logs$1 = $UG$SM$StateLogs$rollback$($x5, $x6, $x7);var $x0 = ({$: "Mach"});var $x8 = $x1.ticks_per_second;$x0.ticks_per_second = $x8;var $x9 = $x1.genesis_tick;$x0.genesis_tick = $x9;var $x10 = $x1.cached_tick;$x0.cached_tick = $x10;var $x11 = $new_logs$1;$x0.state_logs = $x11;var $x12 = $x1.action_logs;$x0.action_logs = $x12;var $x13 = $x1.action_eq;$x0.action_eq = $x13;return $x0; }
const $UG$SM$remove_future_states = _$0 => _$1 => _$2 => _$3 => $UG$SM$remove_future_states$(_$0,_$1,_$2,_$3)

function $UG$SM$register_action$(_$0/*:Type*/,_$1/*:Type*/,_$2/*:UG/SM/Mach<null><null>*/,_$3/*:UG/SM/TimedAction<null>*/) {var $x1 = _$3;var $x2 = _$0;var $x3 = _$1;var $x4 = _$2;var $x5 = $x1.time;var $tick$0 = $UG$SM$Time$time_to_tick$($x2, $x3, $x4, $x5);var $x6 = _$0;var $x7 = _$1;var $x8 = _$2;var $x9 = $tick$0;var $mach$1 = $UG$SM$update_genesis_tick$($x6, $x7, $x8, $x9);var $x10 = _$0;var $x11 = _$1;var $x12 = $mach$1;var $x13 = $tick$0;var $mach$2 = $UG$SM$update_cached_tick$($x10, $x11, $x12, $x13);var $x14 = _$0;var $x15 = _$1;var $x16 = $mach$2;var $x17 = $tick$0;var $mach$3 = $UG$SM$remove_future_states$($x14, $x15, $x16, $x17);var $x18 = _$0;var $x19 = _$1;var $x20 = $mach$3;var $x21 = $tick$0;var $x22 = $x1.action;var $x0 = $UG$SM$add_action_to_logs$($x18, $x19, $x20, $x21, $x22);return $x0; }
const $UG$SM$register_action = _$0 => _$1 => _$2 => _$3 => $UG$SM$register_action$(_$0,_$1,_$2,_$3)

function $UG$Shape$line_circle_intersection$(_$0/*:V2*/,_$1/*:V2*/,_$2/*:V2*/,_$3/*:Number*/) {var $x1 = _$0;var $x2 = _$1;var $x3 = _$2;var $x4 = $x2.x;var $x5 = $x1.x;var $dx$0 = $F64$sub$($x4, $x5);var $x6 = $x2.y;var $x7 = $x1.y;var $dy$1 = $F64$sub$($x6, $x7);var $x9 = $dx$0;var $x10 = $dx$0;var $x8 = $F64$mul$($x9, $x10);var $x12 = $dy$1;var $x13 = $dy$1;var $x11 = $F64$mul$($x12, $x13);var $a$2 = $F64$add$($x8, $x11);var $x14 = 2.0;var $x17 = $dx$0;var $x19 = $x1.x;var $x20 = $x3.x;var $x18 = $F64$sub$($x19, $x20);var $x16 = $F64$mul$($x17, $x18);var $x22 = $dy$1;var $x24 = $x1.y;var $x25 = $x3.y;var $x23 = $F64$sub$($x24, $x25);var $x21 = $F64$mul$($x22, $x23);var $x15 = $F64$add$($x16, $x21);var $b$3 = $F64$mul$($x14, $x15);var $x27 = $x3.x;var $x28 = $x3.x;var $x26 = $F64$mul$($x27, $x28);var $x30 = $x3.y;var $x31 = $x3.y;var $x29 = $F64$mul$($x30, $x31);var $c1$4 = $F64$add$($x26, $x29);var $x33 = $x1.x;var $x34 = $x1.x;var $x32 = $F64$mul$($x33, $x34);var $x36 = $x1.y;var $x37 = $x1.y;var $x35 = $F64$mul$($x36, $x37);var $c2$5 = $F64$add$($x32, $x35);var $x38 = 2.0;var $x41 = $x3.x;var $x42 = $x1.x;var $x40 = $F64$mul$($x41, $x42);var $x44 = $x3.y;var $x45 = $x1.y;var $x43 = $F64$mul$($x44, $x45);var $x39 = $F64$add$($x40, $x43);var $c3$6 = $F64$mul$($x38, $x39);var $x46 = _$3;var $x47 = _$3;var $c4$7 = $F64$mul$($x46, $x47);var $x49 = $c1$4;var $x50 = $c2$5;var $x48 = $F64$add$($x49, $x50);var $x52 = $c3$6;var $x53 = $c4$7;var $x51 = $F64$add$($x52, $x53);var $c$8 = $F64$sub$($x48, $x51);var $x55 = $b$3;var $x56 = $b$3;var $x54 = $F64$mul$($x55, $x56);var $x59 = 4.0;var $x60 = $a$2;var $x58 = $F64$mul$($x59, $x60);var $x61 = $c$8;var $x57 = $F64$mul$($x58, $x61);var $disc$9 = $F64$sub$($x54, $x57);var $x63 = $disc$9;var $x64 = 0.0;var $x62 = $F64$lt$($x63, $x64);switch ($x62.$) { case "True": { var $x0 = ({$: "False"}); break; } case "False": { var $x67 = $b$3;var $x66 = $F64$negate$($x67);var $x69 = $disc$9;var $x68 = $F64$sqrt$($x69);var $x65 = $F64$add$($x66, $x68);var $x71 = 2.0;var $x72 = $a$2;var $x70 = $F64$mul$($x71, $x72);var $t1$10 = $F64$div$($x65, $x70);var $x75 = $b$3;var $x74 = $F64$negate$($x75);var $x77 = $disc$9;var $x76 = $F64$sqrt$($x77);var $x73 = $F64$sub$($x74, $x76);var $x79 = 2.0;var $x80 = $a$2;var $x78 = $F64$mul$($x79, $x80);var $t2$11 = $F64$div$($x73, $x78);var $x82 = $t1$10;var $x83 = 0.0;var $x81 = $F64$gte$($x82, $x83);var $x85 = $t1$10;var $x86 = 1.0;var $x84 = $F64$lte$($x85, $x86);var $valid1$12 = $Bool$and$($x81, $x84);var $x88 = $t2$11;var $x89 = 0.0;var $x87 = $F64$gte$($x88, $x89);var $x91 = $t2$11;var $x92 = 1.0;var $x90 = $F64$lte$($x91, $x92);var $valid2$13 = $Bool$and$($x87, $x90);var $x93 = $valid1$12;var $x94 = $valid2$13;var $x0 = $Bool$or$($x93, $x94); break; } }return $x0; }
const $UG$Shape$line_circle_intersection = _$0 => _$1 => _$2 => _$3 => $UG$Shape$line_circle_intersection$(_$0,_$1,_$2,_$3)

function $UG$Shape$check_edges$(_$0/*:V2*/,_$1/*:Number*/,_$2/*:List<V2>*/,_$3/*:List<V2>*/) {while(1){var $x1 = _$2;switch ($x1.$) { case "Cons": { var $x2 = $x1.tail;switch ($x2.$) { case "Cons": { var $x4 = $x1.head;var $x5 = $x2.head;var $x6 = _$0;var $x7 = _$1;var $x3 = $UG$Shape$line_circle_intersection$($x4, $x5, $x6, $x7);switch ($x3.$) { case "True": { var $x0 = ({$: "True"}); break; } case "False": { var $x8 = _$0;var $x9 = _$1;var $x10 = ({$: "Cons"});var $x11 = $x2.head;$x10.head = $x11;var $x12 = $x2.tail;$x10.tail = $x12;var $x13 = _$3;_$0 = $x8;_$1 = $x9;_$2 = $x10;_$3 = $x13;/*TCO*/continue; break; } } break; } case "Nil": { var $x0 = ({$: "False"}); break; } } break; } case "Nil": { var $x0 = ({$: "False"}); break; } }return $x0; }}
const $UG$Shape$check_edges = _$0 => _$1 => _$2 => _$3 => $UG$Shape$check_edges$(_$0,_$1,_$2,_$3)

function $default_hero$(_$0/*:BigInt*/,_$1/*:BigInt*/) {var $x0 = ({$: "Hero"});var $x1 = _$0;$x0.owner_id = $x1;var $x2 = JSTR_TO_LIST(`Default`);$x0.name = $x2;var $x4 = $String;var $x5 = $UG$SIPD$Skill;var $x3 = $OrdTree$empty$($x4, $x5);$x0.skills = $x3;var $x6 = _$1;$x0.body_id = $x6;return $x0; }
const $default_hero = _$0 => _$1 => $default_hero$(_$0,_$1)

const $event4$ = (() => {var $x0 = ({$: "ActionEvent"});var $x1 = ({$: "SetNick"});var $x2 = 1n;$x1.time = $x2;var $x3 = 1n;$x1.pid = $x3;var $x4 = JSTR_TO_LIST(`hey`);$x1.nick = $x4;$x0.action = $x1;return $x0; })()
const $event4 = $event4$

const $export_action_eq$ = (() => {var $x0 = $UG$SIPD$Event$eq;return $x0; })()
const $export_action_eq = $export_action_eq$

const $export_compute$ = (() => {var $x0 = $UG$SM$compute;return $x0; })()
const $export_compute = $export_compute$

const $export_game$ = (() => {var $x0 = ({$: "Game"});var $x1 = $UG$SIPD$Game$init;$x0.init = $x1;var $x2 = $UG$SIPD$Game$when;$x0.when = $x2;var $x3 = $UG$SIPD$Game$tick;$x0.tick = $x3;return $x0; })()
const $export_game = $export_game$

const $export_game_init$ = (() => {var $x0 = $UG$SIPD$Game$init;return $x0; })()
const $export_game_init = $export_game_init$

const $export_game_tick$ = (() => {var $x0 = $UG$SIPD$Game$tick;return $x0; })()
const $export_game_tick = $export_game_tick$

const $export_game_when$ = (() => {var $x0 = $UG$SIPD$Game$when;return $x0; })()
const $export_game_when = $export_game_when$

const $export_register_action$ = (() => {var $x0 = $UG$SM$register_action;return $x0; })()
const $export_register_action = $export_register_action$

const $export_time_action$ = (() => {var $x0 = $UG$SM$TimedAction$time_action;return $x0; })()
const $export_time_action = $export_time_action$

const $test$0$ = (() => {var $x0 = ({$: "Refl"});return $x0; })()
const $test$0 = $test$0$

const $test$1$ = (() => {var $x0 = ({$: "Refl"});return $x0; })()
const $test$1 = $test$1$

const $test$10$ = (() => {var $x0 = ({$: "Refl"});return $x0; })()
const $test$10 = $test$10$

const $test$2$ = (() => {var $x0 = ({$: "Refl"});return $x0; })()
const $test$2 = $test$2$

const $test$3$ = (() => {var $x0 = ({$: "Refl"});return $x0; })()
const $test$3 = $test$3$

const $test$4$ = (() => {var $x0 = ({$: "Refl"});return $x0; })()
const $test$4 = $test$4$

const $test$5$ = (() => {var $x0 = ({$: "Refl"});return $x0; })()
const $test$5 = $test$5$

const $test$6$ = (() => {var $x0 = ({$: "Refl"});return $x0; })()
const $test$6 = $test$6$

const $test$7$ = (() => {var $x0 = ({$: "Refl"});return $x0; })()
const $test$7 = $test$7$

const $test$8$ = (() => {var $x0 = ({$: "Refl"});return $x0; })()
const $test$8 = $test$8$

const $test$9$ = (() => {var $x0 = ({$: "Refl"});return $x0; })()
const $test$9 = $test$9$


export { $BinTree, $Maybe, $BinMap, $BinMap$empty, $Bits, $BinMap$get, $BinMap$new, $BinMap$set, $Bool, $Bool$and, $Bool$eq, $Bool$if, $Bool$not, $Bool$or, $Char, $U64$to_bool, $U64$eql, $Cmp, $U64$compare, $Char$compare, $Ord, $Char$Ord, $Char$eq, $Equal, $F64$add, $F64$div, $F64$eql, $F64$eq, $F64$gt, $F64$gte, $F64$is_zero, $F64$lt, $F64$lte, $F64$min, $F64$mul, $F64$negate, $F64$sqrt_go, $F64$sqrt, $F64$sub, $KEYEVENT, $KEYMOUSE, $List, $List$append, $List$foldr, $List$fold, $List$foldl, $List$head, $List$insert_at_sorted, $List$insertion_sort, $List$map, $List$sort, $Pair, $List$zip, $MOUSECLICK, $MOUSEMOVE, $Map$delete, $Map$empty, $U64$eq, $Map$fold$go, $Map$fold, $Map$fold$test_map, $Map$get, $Map$get$test_map, $Map$insert, $Map$update, $Map$values$go, $Map$values, $Map$values$test_map, $Maybe$none, $Nat, $Nat$add, $Nat$lte, $Nat$gte, $Nat$max, $Ord$compare, $OrdTree$Balance, $OrdTree, $OrdTree$Balance$rotate_left, $OrdTree$Balance$rotate_right, $OrdTree$empty, $OrdTree$fold, $OrdTree$get, $OrdTree$height, $Pair$get_fst, $OrdTree$insert$go, $OrdTree$insert, $OrdTree$keys, $OrdTree$singleton, $OrdTree$size, $SETNICK, $String, $String$compare, $String$Ord, $String$eq, $U64$Ord, $U64$add, $U64$div, $U64$from_bool, $U64$gt, $U64$lt, $U64$lte, $U64$max, $U64$min, $U64$mod, $U64$mul, $U64$neq, $U64$sub, $U64$to_bits, $UG$Collision$Collidable, $V2, $V2$div_scalar, $V2$length, $V2$is_zero, $V2$normalize, $V2$sub, $UG$Shape$segments, $V2$dot, $V2$point_to_segment_distance, $UG$Shape$closest_point_on_polygon$go, $UG$Shape$closest_point_on_polygon, $UG$Shape$abs_vertices$go, $UG$Shape, $UG$Shape$abs_vertices, $V2$new, $closest_point_polygon_polygon, $UG$Collision$calculate_collision_normal, $UG$Shape$get_center, $V2$add, $UG$Shape$move, $V2$sqr_dist, $V2$dist, $V2$x, $V2$y, $is_right_side, $process_edge, $point_in_polygon$go, $UG$Shape$point_in_polygon, $UG$Shape$any_vertex_inside, $UG$Shape$line_line_intersection, $UG$Shape$check_against_all, $UG$Shape$any_edges_intersect, $UG$Shape$collide, $UG$SIPD$Effect, $UG$SIPD$Skill, $UG$SIPD$Hero, $UG$SIPD$Player, $UG$SIPD$Hero$HeroState, $UG$SIPD$GameMap, $UG$SIPD$State, $UG$SIPD$Body, $UG$SIPD$Body$find_collision, $V2$mul_scalar, $collide_and_slide$handle_collidable, $collide_and_slide$go, $UG$Collision$collide_and_slide, $UG$SIPD$Action, $UG$SIPD$Action$eq, $UG$SIPD$Body$set_effects, $UG$SIPD$Effect$apply, $UG$SIPD$Body$apply_effects$go, $UG$SIPD$Body$apply_effects, $UG$SIPD$Body$delete_body, $UG$SIPD$Body$get_body, $UG$SIPD$Body$tick, $UG$SIPD$GameMap$delete_body, $UG$SIPD$State$delete_body, $damage$handle_collidable, $UG$SIPD$GameMap$get_body, $UG$SIPD$Effect$collide_and_damage, $dps$handle_collidable, $UG$SIPD$Effect$collide_and_dps, $UG$SIPD$Player$get_mouse_pos, $UG$SIPD$State$generate_id, $UG$Shape$start_centered_rectangle, $V2$calculate_angle, $V2$rotate, $UG$Shape$rotate, $UG$SIPD$GameMap$insert_body, $UG$SIPD$State$insert_body, $UG$SIPD$Effect$tick_disintegrate_line, $disintegrate$create_disintegrate_line, $UG$SIPD$Effect$spawn_body, $UG$SIPD$Effect$with_duration, $UG$SIPD$Hero$HeroState$update_cooldown, $disintegrate$block_player_movement, $UG$SIPD$Effect$disintegrate, $V2$reflect, $knockback$handle_collidable, $UG$SIPD$Effect$knockback, $V2$perpendicular, $magic_missiles$calculate_targets, $UG$Shape$circle, $magic_missiles$tick_projectile, $magic_missiles$create_projectile, $UG$SIPD$GameMap$update_body, $UG$SIPD$State$update_body, $UG$SIPD$Effect$move_range, $magic_missiles$go, $UG$SIPD$Effect$magic_missiles, $UG$SIPD$Effect$move, $grow_projectile, $tick_projectile, $shoot$go, $UG$SIPD$Effect$shoot, $UG$SIPD$Effect$teleport, $tick_wave, $create_wave_body, $UG$SIPD$Effect$wave_of_force, $UG$SIPD$Event$Click, $UG$SIPD$Event, $UG$SIPD$Event$Click$eq, $UG$SIPD$Event$eq, $UG$SIPD$Event$get_event_pid, $UG$SM$Game, $UG$SIPD$Game, $UG$SIPD$GameMap$initial_map, $UG$SIPD$GameMap$init, $UG$SIPD$Game$init, $update_cooldown, $decrement_cooldowns, $update_hero_state, $update_cooldowns, $UG$SIPD$Game$tick, $get_player_name, $get_body_effects_state, $UG$SIPD$Hero$HeroState$key_on_cooldown, $UG$SIPD$Skill$apply, $revert_cooldown, $get_skill, $UG$SIPD$Player$is_player_key_pressed, $UG$SIPD$Hero$apply_skill_if_pressed, $UG$SIPD$Hero$apply_pressed_skills, $apply_skill_if_not_on_cooldown, $tick, $insert_skill, $UG$SIPD$Skill$move, $UG$SIPD$Skill$teleport, $UG$SIPD$Skill$wave_of_force, $UG$SIPD$Skill$shoot, $UG$SIPD$Skill$magic_missiles, $UG$SIPD$Skill$disintegrate, $insert_cooldown, $make_skills, $UG$SIPD$Hero$li_ming, $p_hero, $initial_keys, $UG$SIPD$Player$init, $handle_new_player, $update_player_name, $get_mouse_pos, $get_key_value, $update_player_key, $update_player_target, $handle_event, $UG$SIPD$Game$when, $UG$SIPD$GameMap$b_tick, $UG$SM$ActionLogs, $UG$SM$Tick, $UG$SM$ActionLogs$add_action, $UG$SM$ActionLogs$get_actions, $UG$SM$Game$init, $UG$SM$Game$tick, $UG$SM$Game$when, $UG$SM$StateLogs$StateNode, $UG$SM$StateLogs, $UG$SM$Mach, $UG$SM$Mach$action_logs, $UG$SM$Mach$cached_tick, $UG$SM$StateLogs$StateNode$keep, $UG$SM$StateLogs$StateNode$life, $UG$SM$StateLogs$StateNode$older, $UG$SM$StateLogs$StateNode$set_keep, $UG$SM$StateLogs$StateNode$set_life, $UG$SM$StateLogs$StateNode$state, $UG$SM$StateLogs$StateNode$tick, $UG$SM$StateLogs$find_rollback_amount$go, $UG$SM$StateLogs$find_rollback_amount, $UG$SM$StateLogs$push$go$life, $UG$SM$StateLogs$push$go, $UG$SM$StateLogs$push, $UG$SM$StateLogs$rollback$go, $UG$SM$StateLogs$rollback, $UG$SM$Time, $UG$SM$Time$time_to_tick, $UG$SM$TimedAction, $UG$SM$TimedAction$time_action, $UG$SM$add_action_to_logs, $UG$SM$get_initial_state, $UG$SM$update_mach, $UG$SM$compute$go, $UG$SM$compute, $UG$SM$new_mach, $UG$SM$update_genesis_tick, $UG$SM$update_cached_tick, $UG$SM$remove_future_states, $UG$SM$register_action, $UG$Shape$line_circle_intersection, $UG$Shape$check_edges, $default_hero, $event4, $export_action_eq, $export_compute, $export_game, $export_game_init, $export_game_tick, $export_game_when, $export_register_action, $export_time_action, $test$0, $test$1, $test$10, $test$2, $test$3, $test$4, $test$5, $test$6, $test$7, $test$8, $test$9 }
